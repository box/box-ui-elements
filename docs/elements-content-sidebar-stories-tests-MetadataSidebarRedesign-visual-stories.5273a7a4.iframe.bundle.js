"use strict";(globalThis.webpackChunkbox_ui_elements=globalThis.webpackChunkbox_ui_elements||[]).push([[92385],{"./src/elements/content-sidebar/stories/tests/MetadataSidebarRedesign-visual.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{AddTemplateDropdownMenuOn:()=>AddTemplateDropdownMenuOn,AddTemplateDropdownMenuOnEmpty:()=>AddTemplateDropdownMenuOnEmpty,AddingNewMetadataTemplate:()=>AddingNewMetadataTemplate,DeleteButtonIsDisabledWhenAddingNewMetadataTemplate:()=>DeleteButtonIsDisabledWhenAddingNewMetadataTemplate,DeleteButtonIsEnabledWhenEditingMetadataTemplateInstance:()=>DeleteButtonIsEnabledWhenEditingMetadataTemplateInstance,EditMultilevelTaxonomy:()=>EditMultilevelTaxonomy,EditSinglelevelTaxonomy:()=>EditSinglelevelTaxonomy,EmptyStateWithBoxAiDisabled:()=>EmptyStateWithBoxAiDisabled,EmptyStateWithBoxAiEnabled:()=>EmptyStateWithBoxAiEnabled,FilterInstancesDropdown:()=>FilterInstancesDropdown,MetadataInstanceEditorAIEnabled:()=>MetadataInstanceEditorAIEnabled,MetadataInstanceEditorAIEnabledAdvancedExtractAgent:()=>MetadataInstanceEditorAIEnabledAdvancedExtractAgent,MetadataInstanceEditorAddTemplateAgainAfterCancel:()=>MetadataInstanceEditorAddTemplateAgainAfterCancel,MetadataInstanceEditorCancelChanges:()=>MetadataInstanceEditorCancelChanges,MetadataInstanceEditorWithCustomTemplate:()=>MetadataInstanceEditorWithCustomTemplate,MetadataInstanceEditorWithDefinedTemplate:()=>MetadataInstanceEditorWithDefinedTemplate,ShowErrorOnDelete:()=>ShowErrorOnDelete,ShowErrorWhenAIAPIIsUnavailable:()=>ShowErrorWhenAIAPIIsUnavailable,SuggestionForNewlyCreatedTemplateInstance:()=>SuggestionForNewlyCreatedTemplateInstance,SuggestionsWhenAIAPIResponses:()=>SuggestionsWhenAIAPIResponses,SwitchEditingTemplateInstances:()=>SwitchEditingTemplateInstances,UnsavedChangesModalWhenChoosingDifferentTemplate:()=>UnsavedChangesModalWhenChoosingDifferentTemplate,ViewMultilevelTaxonomy:()=>ViewMultilevelTaxonomy,ViewSinglelevelTaxonomy:()=>ViewSinglelevelTaxonomy,__namedExportsOrder:()=>__namedExportsOrder,default:()=>MetadataSidebarRedesign_visual_stories});var external_STORYBOOK_MODULE_TEST_=__webpack_require__("storybook/test"),http=__webpack_require__("./node_modules/msw/lib/core/http.mjs"),HttpResponse=__webpack_require__("./node_modules/msw/lib/core/HttpResponse.mjs"),ContentSidebar=__webpack_require__("./src/elements/content-sidebar/ContentSidebar.js"),MetadataSidebarRedesignedMocks=__webpack_require__("./src/elements/content-sidebar/stories/__mocks__/MetadataSidebarRedesignedMocks.ts"),mockRequests=__webpack_require__("./src/elements/common/__mocks__/mockRequests.ts");const apiV2Path=`${__webpack_require__("./src/constants.js").f9u}/2.0`,multilevelTaxonomyLevels=[{display_name:"Country",description:"Country",level:1},{display_name:"Region",description:"Region",level:2},{displayName:"City",display_name:"City",level:3}],mockMetadataTemplatesWithMultilevelTaxonomy={url:`${apiV2Path}/metadata_templates/enterprise`,response:{limit:1e3,entries:[{id:"multilevel-taxonomy-template",type:"metadata_template",templateKey:"myTaxonomy",scope:"enterprise_173733877",displayName:"My Taxonomy",hidden:!1,copyInstanceOnItemCopy:!1,fields:[{id:"another-field-id",type:"string",key:"anotherAttribute",displayName:"Another Attribute",hidden:!1},{id:"multilevel-taxonomy-field-id",type:"taxonomy",key:"multiLevel",displayName:"Multi level taxonomy",hidden:!1,namespace:"testNamespace",taxonomyKey:"multilevel-taxonomy",levels:multilevelTaxonomyLevels,optionsRules:{multiSelect:!0,selectableLevels:[3]}}]}],next_marker:null,prev_marker:null}},mockMetadataTemplatesWithSinglelevelTaxonomy={url:`${apiV2Path}/metadata_templates/enterprise`,response:{limit:1e3,entries:[{id:"singlelevel-taxonomy-template",type:"metadata_template",templateKey:"myTaxonomy",scope:"enterprise_173733877",displayName:"My Taxonomy",hidden:!1,copyInstanceOnItemCopy:!1,fields:[{id:"singlelevel-taxonomy-id",type:"taxonomy",key:"singleLevel",displayName:"Single level taxonomy",hidden:!1,namespace:"testNamespace",taxonomyKey:"singlelevel-taxonomy",optionsRules:{multiSelect:!0,selectableLevels:[1]}},{id:"another-field-id",type:"string",key:"anotherAttribute",displayName:"Another Attribute",hidden:!1}]}],next_marker:null,prev_marker:null}},mockMetadataInstancesWithTaxonomy={url:`${apiV2Path}/files/${MetadataSidebarRedesignedMocks.pT}/metadata`,response:{entries:[{$id:"metadata-id",$version:0,$type:"myTaxonomy-123",$parent:"file_415542803939",$typeVersion:2,$template:"myTaxonomy",$scope:"enterprise_173733877",$canEdit:!0,anotherAttribute:"test value",singleLevel:[{displayName:"Blue",id:"blue-id",level:"1",nodePath:null,parentId:null}],multiLevel:[{displayName:"London",id:"london-l3-id",level:"3",nodePath:["england-l2-id","uk-l1-id"],parentId:"england-l2-id"}]}],limit:100}},mockMultilevelTaxonomyOptions={url:`${apiV2Path}/metadata_templates/enterprise_173733877/myTaxonomy/fields/multiLevel/options`,response:{firstLevel:{entries:[{id:"uk-l1-id",display_name:"United Kingdom",level:1,ancestors:[],selectable:!1},{id:"japan-l1-id",display_name:"Japan",level:1,ancestors:[],selectable:!1}],taxonomy_id:"multilevel-taxonomy-id"},"uk-l1-id":{entries:[{id:"england-l2-id",display_name:"England",level:2,ancestors:["uk-l1-id"],selectable:!1},{id:"scotland-l2-id",ancestors:[{id:"uk-l1-id",display_name:"United Kingdom",level:1}],display_name:"Scotland",level:2,selectable:!0},{id:"wales-l2-id",ancestors:[{id:"uk-l1-id",display_name:"United Kingdom",level:1}],display_name:"Wales",level:2,selectable:!0}],taxonomy_id:"multilevel-taxonomy-id"},"england-l2-id":{entries:[{id:"london-l3-id",ancestors:[{id:"uk-l1-id",display_name:"United Kingdom",level:1},{id:"england-l2-id",display_name:"England",level:2}],display_name:"London",level:3,selectable:!0}],taxonomy_id:"multilevel-taxonomy-id"},"japan-l1-id":{entries:[{id:"tokyo-l2-id",ancestors:[{id:"japan-l1-id",display_name:"Japan",level:1}],display_name:"Tokyo",level:2,selectable:!0},{id:"hokkaido-l2-id",ancestors:[{id:"japan-l1-id",display_name:"Japan",level:1}],display_name:"Hokkaido",level:2,selectable:!0},{id:"iwate-l2-id",ancestors:[{id:"japan-l1-id",display_name:"Japan",level:1}],display_name:"Iwate",level:2,selectable:!0},{id:"nagano-l2-id",ancestors:[{id:"japan-l1-id",display_name:"Japan",level:1}],display_name:"Nagano",level:2,selectable:!0}],taxonomy_id:"multilevel-taxonomy-id"},"hokkaido-l2-id":{entries:[{id:"sapporo-l3-id",ancestors:[{id:"japan-l1-id",display_name:"Japan",level:1},{id:"hokkaido-l2-id",display_name:"Hokkaido",level:2}],display_name:"Sapporo",level:3,selectable:!0}],taxonomy_id:"multilevel-taxonomy-id"}}},mockSinglelevelTaxonomyOptions={url:`${apiV2Path}/metadata_templates/enterprise_173733877/myTaxonomy/fields/singleLevel/options`,response:{entries:[{id:"blue-id",display_name:"Blue",level:1,ancestors:[],selectable:!0},{id:"red-id",display_name:"Red",level:1,ancestors:[],selectable:!0},{id:"green-id",display_name:"Green",level:1,ancestors:[],selectable:!0}],taxonomy_id:"singlelevel-taxonomy-id"}},mockMultilevelTaxonomy={url:`${apiV2Path}/metadata_taxonomies/testNamespace/multilevel-taxonomy`,response:{display_name:"Multilevel Taxonomy",id:"multilevel-taxonomy-id",key:"multilevel-taxonomy",levels:multilevelTaxonomyLevels,namespace:"testNamespace"}},mockSinglelevelTaxonomy={url:`${apiV2Path}/metadata_taxonomies/testNamespace/singlelevel-taxonomy`,response:{display_name:"Singlelevel Taxonomy",id:"singlelevel-taxonomy-id",key:"singlelevel-taxonomy",levels:[{display_name:"Colour",description:"Colour",level:1}],namespace:"testNamespace"}},mockMultilevelTaxonomyNodes={url:`${apiV2Path}/metadata_taxonomies/testNamespace/multilevel-taxonomy/nodes/london-l3-id?include-ancestors=true`,response:{id:"london-l3-id",ancestors:[{level:2,id:"england-l2-id",display_name:"England"},{level:1,id:"uk-l1-id",display_name:"United Kingdom"}],display_name:"London",level:3,selectable:!0,parent_id:"england-l2-id",node_path:["uk-l1-id","england-l2-id"]}},mockSinglelevelTaxonomyNodes={url:`${apiV2Path}/metadata_taxonomies/testNamespace/singlelevel-taxonomy/nodes/blue-id?include-ancestors=true`,response:{id:"blue-id",ancestors:[],display_name:"Blue",level:1,selectable:!0,parent_id:null,node_path:[]}},taxonomyMockHandlers=[http.L.get(MetadataSidebarRedesignedMocks.ul.url,(()=>HttpResponse.c.json(MetadataSidebarRedesignedMocks.ul.response))),http.L.get(mockMetadataInstancesWithTaxonomy.url,(()=>HttpResponse.c.json(mockMetadataInstancesWithTaxonomy.response))),http.L.get(mockMultilevelTaxonomy.url,(()=>HttpResponse.c.json(mockMultilevelTaxonomy.response))),http.L.get(mockSinglelevelTaxonomy.url,(()=>HttpResponse.c.json(mockSinglelevelTaxonomy.response))),http.L.get(mockMultilevelTaxonomyNodes.url,(()=>HttpResponse.c.json(mockMultilevelTaxonomyNodes.response))),http.L.get(mockSinglelevelTaxonomyNodes.url,(()=>HttpResponse.c.json(mockSinglelevelTaxonomyNodes.response))),http.L.get(mockMultilevelTaxonomyOptions.url,(({request})=>{const ancestorId=new URL(request.url).searchParams.get("ancestor_id");return ancestorId?HttpResponse.c.json(mockMultilevelTaxonomyOptions.response[ancestorId]):HttpResponse.c.json(mockMultilevelTaxonomyOptions.response.firstLevel)})),http.L.get(mockSinglelevelTaxonomyOptions.url,(()=>HttpResponse.c.json(mockSinglelevelTaxonomyOptions.response)))];function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,o)}return t}function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach((function(r){_defineProperty(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function _defineProperty(e,r,t){return(r=function _toPropertyKey(t){var i=function _toPrimitive(t,r){if("object"!=typeof t||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||"default");if("object"!=typeof i)return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(t,"string");return"symbol"==typeof i?i:i+""}(r))in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}const token=__webpack_require__.g.TOKEN,defaultMetadataArgs={fileId:MetadataSidebarRedesignedMocks.pT,isFeatureEnabled:!0,onError:(0,external_STORYBOOK_MODULE_TEST_.fn)(),onSuccess:(0,external_STORYBOOK_MODULE_TEST_.fn)()},defaultMetadataSidebarProps={isFeatureEnabled:!0,onError:(0,external_STORYBOOK_MODULE_TEST_.fn)(),onSuccess:(0,external_STORYBOOK_MODULE_TEST_.fn)()},mockFeatures={"metadata.redesign.enabled":!0},mockLogger={onReadyMetric:({endMarkName})=>{console.log(`Logger: onReadyMetric called with endMarkName: ${endMarkName}`)}},AddTemplateDropdownMenuOn={play:async({canvasElement})=>{const canvas=(0,external_STORYBOOK_MODULE_TEST_.within)(canvasElement),addTemplateButton=await canvas.findByRole("button",{name:"Add template"},{timeout:2e3});(0,external_STORYBOOK_MODULE_TEST_.expect)(addTemplateButton).toBeInTheDocument(),await external_STORYBOOK_MODULE_TEST_.userEvent.click(addTemplateButton);const customMetadataOption=canvas.getByRole("option",{name:"Custom Metadata"});(0,external_STORYBOOK_MODULE_TEST_.expect)(customMetadataOption).toBeInTheDocument(),(0,external_STORYBOOK_MODULE_TEST_.expect)(customMetadataOption).toHaveAttribute("aria-disabled")}},AddTemplateDropdownMenuOnEmpty={args:{fileId:MetadataSidebarRedesignedMocks.Fd,metadataSidebarProps:{isBoxAiSuggestionsEnabled:!0,isBetaLanguageEnabled:!1,isFeatureEnabled:!0,onError:(0,external_STORYBOOK_MODULE_TEST_.fn)(),onSuccess:(0,external_STORYBOOK_MODULE_TEST_.fn)()}},play:async({canvasElement})=>{const canvas=(0,external_STORYBOOK_MODULE_TEST_.within)(canvasElement),addTemplateButton=await canvas.findByRole("button",{name:"Add template"},{timeout:2e3});(0,external_STORYBOOK_MODULE_TEST_.expect)(addTemplateButton).toBeInTheDocument(),await external_STORYBOOK_MODULE_TEST_.userEvent.click(addTemplateButton);const options=canvas.getAllByRole("option");(0,external_STORYBOOK_MODULE_TEST_.expect)(options).toHaveLength(5),options.forEach((option=>{(0,external_STORYBOOK_MODULE_TEST_.expect)(option).not.toHaveAttribute("disabled")}))}},FilterInstancesDropdown={play:async({canvasElement})=>{const canvas=(0,external_STORYBOOK_MODULE_TEST_.within)(canvasElement);await(0,external_STORYBOOK_MODULE_TEST_.waitFor)((async()=>{const filterInstancesButton=await canvas.findByRole("combobox");(0,external_STORYBOOK_MODULE_TEST_.expect)(filterInstancesButton).toBeInTheDocument(),await external_STORYBOOK_MODULE_TEST_.userEvent.click(filterInstancesButton);const firstOption=canvas.getByRole("option",{name:"My Template"});(0,external_STORYBOOK_MODULE_TEST_.expect)(firstOption).toBeInTheDocument();const secondOption=canvas.getByRole("option",{name:"Select Dropdowns"});(0,external_STORYBOOK_MODULE_TEST_.expect)(secondOption).toBeInTheDocument();const thirdOption=canvas.getByRole("option",{name:"Custom Metadata"});(0,external_STORYBOOK_MODULE_TEST_.expect)(thirdOption).toBeInTheDocument(),await external_STORYBOOK_MODULE_TEST_.userEvent.click(firstOption);const headlines=await canvas.findAllByRole("heading",{level:4});(0,external_STORYBOOK_MODULE_TEST_.expect)(headlines).toHaveLength(1),(0,external_STORYBOOK_MODULE_TEST_.expect)(headlines[0].textContent).toEqual("My Template")}),{timeout:2e3})}},defaultMockHandlers=[http.L.get(mockRequests.X3.url,(()=>HttpResponse.c.json(mockRequests.X3.response))),http.L.get(MetadataSidebarRedesignedMocks.ul.url,(()=>HttpResponse.c.json(MetadataSidebarRedesignedMocks.ul.response))),http.L.get(MetadataSidebarRedesignedMocks.bM.url,(()=>HttpResponse.c.json(MetadataSidebarRedesignedMocks.bM.response))),http.L.get(MetadataSidebarRedesignedMocks.Uo.url,(()=>HttpResponse.c.json(MetadataSidebarRedesignedMocks.Uo.response))),http.L.get(MetadataSidebarRedesignedMocks.Wm.url,(()=>HttpResponse.c.json(MetadataSidebarRedesignedMocks.Wm.response))),http.L.get(MetadataSidebarRedesignedMocks.JD.url,(()=>HttpResponse.c.json(MetadataSidebarRedesignedMocks.JD.response))),http.L.get(MetadataSidebarRedesignedMocks.eQ.url,(()=>HttpResponse.c.json(MetadataSidebarRedesignedMocks.eQ.response)))],AddingNewMetadataTemplate={play:async({canvasElement})=>{const canvas=(0,external_STORYBOOK_MODULE_TEST_.within)(canvasElement),addTemplateButton=await canvas.findByRole("button",{name:"Add template"});(0,external_STORYBOOK_MODULE_TEST_.expect)(addTemplateButton).toBeInTheDocument(),await external_STORYBOOK_MODULE_TEST_.userEvent.click(addTemplateButton);const customMetadataOption=canvas.getByRole("option",{name:"Virus Scan"});(0,external_STORYBOOK_MODULE_TEST_.expect)(customMetadataOption).toBeInTheDocument(),await external_STORYBOOK_MODULE_TEST_.userEvent.click(customMetadataOption);const templateHeader=await canvas.findByRole("heading",{name:"Virus Scan"});(0,external_STORYBOOK_MODULE_TEST_.expect)(templateHeader).toBeInTheDocument()}},UnsavedChangesModalWhenChoosingDifferentTemplate={args:{fileId:MetadataSidebarRedesignedMocks.Fd,metadataSidebarProps:defaultMetadataSidebarProps},play:async({canvasElement})=>{const canvas=(0,external_STORYBOOK_MODULE_TEST_.within)(canvasElement),addTemplateButton=await canvas.findByRole("button",{name:"Add template"});(0,external_STORYBOOK_MODULE_TEST_.expect)(addTemplateButton).toBeInTheDocument(),await external_STORYBOOK_MODULE_TEST_.userEvent.click(addTemplateButton);const customMetadataOption=canvas.getByRole("option",{name:"Virus Scan"});(0,external_STORYBOOK_MODULE_TEST_.expect)(customMetadataOption).toBeInTheDocument(),await external_STORYBOOK_MODULE_TEST_.userEvent.click(customMetadataOption),await external_STORYBOOK_MODULE_TEST_.userEvent.click(addTemplateButton);const myTemplateOption=canvas.getByRole("option",{name:"My Template"});(0,external_STORYBOOK_MODULE_TEST_.expect)(myTemplateOption).toBeInTheDocument(),await external_STORYBOOK_MODULE_TEST_.userEvent.click(myTemplateOption);const unsavedChangesModal=await external_STORYBOOK_MODULE_TEST_.screen.findByRole("heading",{level:2,name:"Unsaved Changes"},{timeout:5e3});(0,external_STORYBOOK_MODULE_TEST_.expect)(unsavedChangesModal).toBeInTheDocument()}},EmptyStateWithBoxAiEnabled={args:{fileId:MetadataSidebarRedesignedMocks.Fd,metadataSidebarProps:_objectSpread({},defaultMetadataSidebarProps),features:_objectSpread(_objectSpread({},mockFeatures),{},{"metadata.aiSuggestions.enabled":!0,"metadata.betalanguage.enabled":!1})}},EmptyStateWithBoxAiDisabled={args:{fileId:MetadataSidebarRedesignedMocks.Fd,metadataSidebarProps:_objectSpread(_objectSpread({},defaultMetadataSidebarProps),{},{isBoxAiSuggestionsEnabled:!1,isBetaLanguageEnabled:!1})}},MetadataInstanceEditorWithDefinedTemplate={args:{fileId:MetadataSidebarRedesignedMocks.Fd,metadataSidebarProps:defaultMetadataSidebarProps},play:async({canvasElement})=>{const canvas=(0,external_STORYBOOK_MODULE_TEST_.within)(canvasElement),addTemplateButton=await canvas.findByRole("button",{name:"Add template"});await external_STORYBOOK_MODULE_TEST_.userEvent.click(addTemplateButton);const customMetadataOption=canvas.getByRole("option",{name:"My Template"});await external_STORYBOOK_MODULE_TEST_.userEvent.click(customMetadataOption)}},MetadataInstanceEditorWithCustomTemplate={args:{fileId:MetadataSidebarRedesignedMocks.Fd,metadataSidebarProps:defaultMetadataSidebarProps},play:async({canvasElement})=>{const canvas=(0,external_STORYBOOK_MODULE_TEST_.within)(canvasElement),addTemplateButton=await canvas.findByRole("button",{name:"Add template"},{timeout:2e3});await external_STORYBOOK_MODULE_TEST_.userEvent.click(addTemplateButton);const customMetadataOption=canvas.getByRole("option",{name:"Custom Metadata"});await external_STORYBOOK_MODULE_TEST_.userEvent.click(customMetadataOption)}},MetadataInstanceEditorCancelChanges={play:async({canvasElement})=>{const canvas=(0,external_STORYBOOK_MODULE_TEST_.within)(canvasElement),editButton=await canvas.findByRole("button",{name:"Edit My Template"});(0,external_STORYBOOK_MODULE_TEST_.expect)(editButton).toBeInTheDocument();let headlines=await canvas.findAllByRole("heading",{level:4});(0,external_STORYBOOK_MODULE_TEST_.expect)(headlines).toHaveLength(3),(0,external_STORYBOOK_MODULE_TEST_.expect)(headlines.map((heading=>heading.textContent))).toEqual(external_STORYBOOK_MODULE_TEST_.expect.arrayContaining(["My Template","Select Dropdowns","Custom Metadata"])),await external_STORYBOOK_MODULE_TEST_.userEvent.click(editButton),headlines=await canvas.findAllByRole("heading",{level:4}),(0,external_STORYBOOK_MODULE_TEST_.expect)(headlines).toHaveLength(1),(0,external_STORYBOOK_MODULE_TEST_.expect)(headlines.map((heading=>heading.textContent))).toEqual(external_STORYBOOK_MODULE_TEST_.expect.arrayContaining(["My Template"]));const cancelButton=await canvas.findByRole("button",{name:"Cancel"});await external_STORYBOOK_MODULE_TEST_.userEvent.click(cancelButton),headlines=await canvas.findAllByRole("heading",{level:4}),(0,external_STORYBOOK_MODULE_TEST_.expect)(headlines).toHaveLength(3),(0,external_STORYBOOK_MODULE_TEST_.expect)(headlines.map((heading=>heading.textContent))).toEqual(external_STORYBOOK_MODULE_TEST_.expect.arrayContaining(["My Template","Select Dropdowns","Custom Metadata"]))}},DeleteButtonIsDisabledWhenAddingNewMetadataTemplate={play:async({canvasElement})=>{const canvas=(0,external_STORYBOOK_MODULE_TEST_.within)(canvasElement),addTemplateButton=await canvas.findByRole("button",{name:"Add template"});(0,external_STORYBOOK_MODULE_TEST_.expect)(addTemplateButton).toBeInTheDocument(),await external_STORYBOOK_MODULE_TEST_.userEvent.click(addTemplateButton);const customMetadataOption=canvas.getByRole("option",{name:"Virus Scan"});(0,external_STORYBOOK_MODULE_TEST_.expect)(customMetadataOption).toBeInTheDocument(),await external_STORYBOOK_MODULE_TEST_.userEvent.click(customMetadataOption);const deleteButton=await canvas.findByRole("button",{name:"Delete"});(0,external_STORYBOOK_MODULE_TEST_.expect)(deleteButton).toBeDisabled()}},DeleteButtonIsEnabledWhenEditingMetadataTemplateInstance={play:async({canvasElement})=>{const canvas=(0,external_STORYBOOK_MODULE_TEST_.within)(canvasElement),editMetadataInstanceButton=await canvas.findByRole("button",{name:"Edit My Template"});(0,external_STORYBOOK_MODULE_TEST_.expect)(editMetadataInstanceButton).toBeInTheDocument(),await external_STORYBOOK_MODULE_TEST_.userEvent.click(editMetadataInstanceButton);const deleteButton=await canvas.findByRole("button",{name:"Delete"});(0,external_STORYBOOK_MODULE_TEST_.expect)(deleteButton).toBeEnabled()}},MetadataInstanceEditorAddTemplateAgainAfterCancel={args:{fileId:MetadataSidebarRedesignedMocks.Fd,metadataSidebarProps:defaultMetadataSidebarProps},play:async({canvasElement})=>{const canvas=(0,external_STORYBOOK_MODULE_TEST_.within)(canvasElement),addTemplateButton=await canvas.findByRole("button",{name:"Add template"});await external_STORYBOOK_MODULE_TEST_.userEvent.click(addTemplateButton);const templateMetadataOption=canvas.getByRole("option",{name:"My Template"});(0,external_STORYBOOK_MODULE_TEST_.expect)(templateMetadataOption).not.toHaveAttribute("aria-disabled"),await external_STORYBOOK_MODULE_TEST_.userEvent.click(templateMetadataOption),await external_STORYBOOK_MODULE_TEST_.userEvent.click(addTemplateButton);const templateMetadataOptionDisabled=canvas.getByRole("option",{name:"My Template"});(0,external_STORYBOOK_MODULE_TEST_.expect)(templateMetadataOptionDisabled).toHaveAttribute("aria-disabled");const cancelButton=await canvas.findByRole("button",{name:"Cancel"});await external_STORYBOOK_MODULE_TEST_.userEvent.click(cancelButton),await external_STORYBOOK_MODULE_TEST_.userEvent.click(addTemplateButton);const templateMetadataOptionEnabled=canvas.getByRole("option",{name:"My Template"});(0,external_STORYBOOK_MODULE_TEST_.expect)(templateMetadataOptionEnabled).not.toHaveAttribute("aria-disabled")}},SwitchEditingTemplateInstances={args:{fileId:"416047501580",metadataSidebarProps:defaultMetadataSidebarProps},parameters:{msw:{handlers:[...defaultMockHandlers,http.L.get("/2.0/files/416047501580",(()=>HttpResponse.c.json(MetadataSidebarRedesignedMocks.ul.response))),http.L.get("/2.0/files/416047501580/metadata",(()=>HttpResponse.c.json(MetadataSidebarRedesignedMocks.Uo.response)))]}},play:async({canvasElement})=>{const canvas=(0,external_STORYBOOK_MODULE_TEST_.within)(canvasElement),addTemplateButton=await canvas.findByRole("button",{name:"Add template"});await external_STORYBOOK_MODULE_TEST_.userEvent.click(addTemplateButton);const templateMetadataOption=canvas.getByRole("option",{name:"My Template"});await external_STORYBOOK_MODULE_TEST_.userEvent.click(templateMetadataOption);const input=await canvas.findByRole("textbox");await external_STORYBOOK_MODULE_TEST_.userEvent.type(input,"Lorem ipsum dolor."),await external_STORYBOOK_MODULE_TEST_.userEvent.click(addTemplateButton);const templateMetadataOptionA=canvas.getByRole("option",{name:"My Template"}),templateMetadataOptionB=canvas.getByRole("option",{name:"Virus Scan"});(0,external_STORYBOOK_MODULE_TEST_.expect)(templateMetadataOptionA).toHaveAttribute("aria-disabled"),(0,external_STORYBOOK_MODULE_TEST_.expect)(templateMetadataOptionB).not.toHaveAttribute("aria-disabled"),await external_STORYBOOK_MODULE_TEST_.userEvent.click(templateMetadataOptionB);const unsavedChangesModal=await external_STORYBOOK_MODULE_TEST_.screen.findByRole("heading",{level:2,name:"Unsaved Changes"},{timeout:5e3});(0,external_STORYBOOK_MODULE_TEST_.expect)(unsavedChangesModal).toBeInTheDocument();const unsavedChangesModalDiscardButton=await external_STORYBOOK_MODULE_TEST_.screen.findByRole("button",{name:"Discard Changes"});await external_STORYBOOK_MODULE_TEST_.userEvent.click(unsavedChangesModalDiscardButton);const newTemplateHeader=await canvas.findByRole("heading",{name:"Virus Scan"});(0,external_STORYBOOK_MODULE_TEST_.expect)(newTemplateHeader).toBeInTheDocument(),await external_STORYBOOK_MODULE_TEST_.userEvent.click(addTemplateButton);const templateMetadataOptionAAfterSwitch=canvas.getByRole("option",{name:"My Template"}),templateMetadataOptionBAfterSwitch=canvas.getByRole("option",{name:"Virus Scan"});(0,external_STORYBOOK_MODULE_TEST_.expect)(templateMetadataOptionAAfterSwitch).not.toHaveAttribute("aria-disabled"),(0,external_STORYBOOK_MODULE_TEST_.expect)(templateMetadataOptionBAfterSwitch).toHaveAttribute("aria-disabled")}},MetadataInstanceEditorAIEnabled={args:{features:_objectSpread(_objectSpread({},mockFeatures),{},{"metadata.aiSuggestions.enabled":!0,"metadata.betalanguage.enabled":!1})},play:async({canvasElement})=>{const canvas=(0,external_STORYBOOK_MODULE_TEST_.within)(canvasElement),autofillWithBoxAI=await canvas.findAllByRole("button",{name:/Autofill .+ with Box AI/});(0,external_STORYBOOK_MODULE_TEST_.expect)(autofillWithBoxAI).toHaveLength(2);const editButton=await canvas.findByRole("button",{name:"Edit My Template"});await external_STORYBOOK_MODULE_TEST_.userEvent.click(editButton);const autofillButton=await canvas.findByRole("button",{name:"Autofill"});(0,external_STORYBOOK_MODULE_TEST_.expect)(autofillButton).toBeInTheDocument()}},MetadataInstanceEditorAIEnabledAdvancedExtractAgent={args:{features:_objectSpread(_objectSpread({},mockFeatures),{},{"metadata.aiSuggestions.enabled":!0,"metadata.extractAdvancedAgents.enabled":!0})},play:async({canvasElement})=>{const canvas=(0,external_STORYBOOK_MODULE_TEST_.within)(canvasElement),editButton=await canvas.findByRole("button",{name:"Edit My Template"});await external_STORYBOOK_MODULE_TEST_.userEvent.click(editButton);const splitButton=await canvas.findByRole("button",{name:/Autofill/});(0,external_STORYBOOK_MODULE_TEST_.expect)(splitButton).toBeVisible(),await external_STORYBOOK_MODULE_TEST_.userEvent.hover(splitButton);const dropdownButton=await canvas.findByRole("button",{name:"See agent options."});(0,external_STORYBOOK_MODULE_TEST_.expect)(dropdownButton).toBeVisible()}},ShowErrorWhenAIAPIIsUnavailable={args:{features:_objectSpread(_objectSpread({},mockFeatures),{},{"metadata.aiSuggestions.enabled":!0,"metadata.betalanguage.enabled":!1})},parameters:{msw:{handlers:[...defaultMockHandlers,http.L.post(MetadataSidebarRedesignedMocks.b4.url,(()=>new HttpResponse.c("Not Found",{status:404})))]},test:{dangerouslyIgnoreUnhandledErrors:!0}},play:async({canvasElement})=>{const canvas=(0,external_STORYBOOK_MODULE_TEST_.within)(canvasElement),autofillButton=await canvas.findByRole("button",{name:"Autofill My Template with Box AI"});await external_STORYBOOK_MODULE_TEST_.userEvent.click(autofillButton);const errorAlert=await canvas.findByText("We’re sorry, something went wrong.");(0,external_STORYBOOK_MODULE_TEST_.expect)(errorAlert).toBeInTheDocument()}},SuggestionsWhenAIAPIResponses={args:{features:_objectSpread(_objectSpread({},mockFeatures),{},{"metadata.aiSuggestions.enabled":!0,"metadata.betalanguage.enabled":!1})},parameters:{msw:{handlers:[...defaultMockHandlers,http.L.post(MetadataSidebarRedesignedMocks.b4.url,(()=>HttpResponse.c.json(MetadataSidebarRedesignedMocks.b4.response)))]}},play:async({canvasElement})=>{const canvas=(0,external_STORYBOOK_MODULE_TEST_.within)(canvasElement),autofillButton=await canvas.findByRole("button",{name:"Autofill My Template with Box AI"});external_STORYBOOK_MODULE_TEST_.userEvent.click(autofillButton);const suggestion=await canvas.findByText("it works fine");(0,external_STORYBOOK_MODULE_TEST_.expect)(suggestion).toBeInTheDocument();const replaceButton=await canvas.findByRole("button",{name:"Clear and Replace"});(0,external_STORYBOOK_MODULE_TEST_.expect)(replaceButton).toBeInTheDocument(),await external_STORYBOOK_MODULE_TEST_.userEvent.click(replaceButton);const input=canvas.getByLabelText("My Attribute");(0,external_STORYBOOK_MODULE_TEST_.expect)(input).toHaveValue("it works fine")}},SuggestionForNewlyCreatedTemplateInstance={args:{features:_objectSpread(_objectSpread({},mockFeatures),{},{"metadata.aiSuggestions.enabled":!0,"metadata.betalanguage.enabled":!1})},parameters:{msw:{handlers:[...defaultMockHandlers,http.L.post(MetadataSidebarRedesignedMocks.b4.url,(()=>HttpResponse.c.json(MetadataSidebarRedesignedMocks.YI.response)))]}},play:async({canvasElement})=>{const canvas=(0,external_STORYBOOK_MODULE_TEST_.within)(canvasElement),addTemplateButton=await canvas.findByRole("button",{name:"Add template"});(0,external_STORYBOOK_MODULE_TEST_.expect)(addTemplateButton).toBeInTheDocument(),await external_STORYBOOK_MODULE_TEST_.userEvent.click(addTemplateButton);const customMetadataOption=canvas.getByRole("option",{name:"Date Template"});(0,external_STORYBOOK_MODULE_TEST_.expect)(customMetadataOption).toBeInTheDocument(),await external_STORYBOOK_MODULE_TEST_.userEvent.click(customMetadataOption);const templateHeader=await canvas.findByRole("heading",{name:"Date Template"});(0,external_STORYBOOK_MODULE_TEST_.expect)(templateHeader).toBeInTheDocument();const autofillButton=await canvas.findByRole("button",{name:"Autofill"});external_STORYBOOK_MODULE_TEST_.userEvent.click(autofillButton);const suggestion=await canvas.findByText("4/1/2024",{},{timeout:5e3});(0,external_STORYBOOK_MODULE_TEST_.expect)(suggestion).toBeInTheDocument()}},ShowErrorOnDelete={parameters:{msw:{handlers:[...defaultMockHandlers,http.L.delete(MetadataSidebarRedesignedMocks.qx.url,(()=>HttpResponse.c.json(MetadataSidebarRedesignedMocks.qx.response,{status:404})))]}},play:async({canvasElement})=>{const canvas=(0,external_STORYBOOK_MODULE_TEST_.within)(canvasElement),editButton=await canvas.findByRole("button",{name:"Edit My Template"},{timeout:2e3});await external_STORYBOOK_MODULE_TEST_.userEvent.click(editButton);const deleteButton=await canvas.findByRole("button",{name:"Delete"});await external_STORYBOOK_MODULE_TEST_.userEvent.click(deleteButton);const confirmModal=await external_STORYBOOK_MODULE_TEST_.screen.findByRole("dialog",{name:/delete.+/i},{timeout:2e3}),confirmInput=(0,external_STORYBOOK_MODULE_TEST_.within)(confirmModal).getByRole("textbox");await external_STORYBOOK_MODULE_TEST_.userEvent.type(confirmInput,"My Template");const confirmButton=(0,external_STORYBOOK_MODULE_TEST_.within)(confirmModal).getByRole("button",{name:"Confirm"});await external_STORYBOOK_MODULE_TEST_.userEvent.click(confirmButton);const errorAlert=await canvas.findByText("An error has occurred while updating metadata. Please refresh the page and try again.");(0,external_STORYBOOK_MODULE_TEST_.expect)(errorAlert).toBeInTheDocument()}},ViewMultilevelTaxonomy={args:{features:_objectSpread(_objectSpread({},mockFeatures),{},{"metadata.multilevelTaxonomy.enabled":!0})},parameters:{msw:{handlers:[...taxonomyMockHandlers,http.L.get(mockMetadataTemplatesWithMultilevelTaxonomy.url,(()=>HttpResponse.c.json(mockMetadataTemplatesWithMultilevelTaxonomy.response)))]}},play:async({canvasElement})=>{const canvas=(0,external_STORYBOOK_MODULE_TEST_.within)(canvasElement);await(0,external_STORYBOOK_MODULE_TEST_.waitFor)((async()=>{const multilevelOptionButton=canvas.getByRole("button",{name:"London"});(0,external_STORYBOOK_MODULE_TEST_.expect)(multilevelOptionButton).toBeInTheDocument(),await external_STORYBOOK_MODULE_TEST_.userEvent.click(multilevelOptionButton);const multilevelDialog=external_STORYBOOK_MODULE_TEST_.screen.getByRole("dialog");(0,external_STORYBOOK_MODULE_TEST_.expect)(multilevelDialog).toBeInTheDocument()}))}},ViewSinglelevelTaxonomy={parameters:{msw:{handlers:[...taxonomyMockHandlers,http.L.get(mockMetadataTemplatesWithSinglelevelTaxonomy.url,(()=>HttpResponse.c.json(mockMetadataTemplatesWithSinglelevelTaxonomy.response)))]}},play:async({canvasElement})=>{const canvas=(0,external_STORYBOOK_MODULE_TEST_.within)(canvasElement);await(0,external_STORYBOOK_MODULE_TEST_.waitFor)((async()=>{const singlelevelOptionButton=canvas.getByRole("button",{name:"Blue"});(0,external_STORYBOOK_MODULE_TEST_.expect)(singlelevelOptionButton).toBeInTheDocument(),await external_STORYBOOK_MODULE_TEST_.userEvent.click(singlelevelOptionButton);const singlelevelDialog=external_STORYBOOK_MODULE_TEST_.screen.getByRole("dialog");(0,external_STORYBOOK_MODULE_TEST_.expect)(singlelevelDialog).toBeInTheDocument()}))}},EditMultilevelTaxonomy=_objectSpread(_objectSpread({},ViewMultilevelTaxonomy),{},{play:async({canvasElement})=>{const canvas=(0,external_STORYBOOK_MODULE_TEST_.within)(canvasElement),editButton=await(0,external_STORYBOOK_MODULE_TEST_.waitFor)((()=>canvas.getByRole("button",{name:"Edit My Taxonomy"})));await external_STORYBOOK_MODULE_TEST_.userEvent.click(editButton);const multilevelInput=canvas.getByRole("combobox"),optionChip=canvas.getByRole("button",{name:"London"});(0,external_STORYBOOK_MODULE_TEST_.expect)(multilevelInput).toBeInTheDocument(),(0,external_STORYBOOK_MODULE_TEST_.expect)(optionChip).toBeInTheDocument(),await external_STORYBOOK_MODULE_TEST_.userEvent.click(multilevelInput);const listbox=await(0,external_STORYBOOK_MODULE_TEST_.waitFor)((()=>canvas.getByRole("listbox")));(0,external_STORYBOOK_MODULE_TEST_.expect)(listbox).toBeInTheDocument();let expandButtons=await(0,external_STORYBOOK_MODULE_TEST_.waitFor)((()=>canvas.getAllByRole("button",{name:"Expand branch"})));await external_STORYBOOK_MODULE_TEST_.userEvent.click(expandButtons[1]);const hokkaidoOption=await(0,external_STORYBOOK_MODULE_TEST_.waitFor)((()=>canvas.getByText("Hokkaido")));(0,external_STORYBOOK_MODULE_TEST_.expect)(hokkaidoOption).toBeInTheDocument(),expandButtons=await(0,external_STORYBOOK_MODULE_TEST_.waitFor)((()=>external_STORYBOOK_MODULE_TEST_.screen.getAllByRole("button",{name:"Expand branch"}))),await external_STORYBOOK_MODULE_TEST_.userEvent.click(expandButtons[2]);const sapporoOption=await(0,external_STORYBOOK_MODULE_TEST_.waitFor)((()=>canvas.getByRole("treeitem",{name:"Sapporo"})));(0,external_STORYBOOK_MODULE_TEST_.expect)(sapporoOption).toBeInTheDocument(),(0,external_STORYBOOK_MODULE_TEST_.expect)(sapporoOption).toHaveAttribute("aria-selected","false"),await external_STORYBOOK_MODULE_TEST_.userEvent.click(sapporoOption);const sapporoSelection=await(0,external_STORYBOOK_MODULE_TEST_.waitFor)((()=>canvas.getByRole("gridcell",{name:"Sapporo"})));(0,external_STORYBOOK_MODULE_TEST_.expect)(sapporoOption).toBeInTheDocument(),(0,external_STORYBOOK_MODULE_TEST_.expect)(sapporoOption).toHaveAttribute("aria-selected","true"),(0,external_STORYBOOK_MODULE_TEST_.expect)(sapporoSelection).toBeInTheDocument()}}),EditSinglelevelTaxonomy=_objectSpread(_objectSpread({},ViewSinglelevelTaxonomy),{},{play:async({canvasElement})=>{const canvas=(0,external_STORYBOOK_MODULE_TEST_.within)(canvasElement),editButton=await(0,external_STORYBOOK_MODULE_TEST_.waitFor)((()=>canvas.getByRole("button",{name:"Edit My Taxonomy"})));await external_STORYBOOK_MODULE_TEST_.userEvent.click(editButton);const singlelevelInput=canvas.getByRole("combobox"),blueSelection=canvas.getByRole("gridcell",{name:"Blue"});(0,external_STORYBOOK_MODULE_TEST_.expect)(singlelevelInput).toBeInTheDocument(),(0,external_STORYBOOK_MODULE_TEST_.expect)(blueSelection).toBeInTheDocument(),await external_STORYBOOK_MODULE_TEST_.userEvent.click(singlelevelInput);const listbox=await(0,external_STORYBOOK_MODULE_TEST_.waitFor)((()=>canvas.getByRole("listbox")));(0,external_STORYBOOK_MODULE_TEST_.expect)(listbox).toBeInTheDocument();const blueOption=await(0,external_STORYBOOK_MODULE_TEST_.waitFor)((()=>canvas.getByRole("option",{name:"Blue"}))),redOption=await(0,external_STORYBOOK_MODULE_TEST_.waitFor)((()=>canvas.getByRole("option",{name:"Red"}))),greenOption=await(0,external_STORYBOOK_MODULE_TEST_.waitFor)((()=>canvas.getByRole("option",{name:"Green"})));(0,external_STORYBOOK_MODULE_TEST_.expect)(blueOption).toBeInTheDocument(),(0,external_STORYBOOK_MODULE_TEST_.expect)(redOption).toBeInTheDocument(),(0,external_STORYBOOK_MODULE_TEST_.expect)(greenOption).toBeInTheDocument(),(0,external_STORYBOOK_MODULE_TEST_.expect)(blueOption).toHaveAttribute("aria-selected","true"),(0,external_STORYBOOK_MODULE_TEST_.expect)(redOption).toHaveAttribute("aria-selected","false"),(0,external_STORYBOOK_MODULE_TEST_.expect)(greenOption).toHaveAttribute("aria-selected","false"),await external_STORYBOOK_MODULE_TEST_.userEvent.click(redOption);const redSelection=await(0,external_STORYBOOK_MODULE_TEST_.waitFor)((()=>canvas.getByRole("gridcell",{name:"Red"})));(0,external_STORYBOOK_MODULE_TEST_.expect)(redSelection).toBeInTheDocument(),(0,external_STORYBOOK_MODULE_TEST_.expect)(blueSelection).toBeInTheDocument(),(0,external_STORYBOOK_MODULE_TEST_.expect)(blueOption).toBeInTheDocument(),(0,external_STORYBOOK_MODULE_TEST_.expect)(redOption).toBeInTheDocument(),(0,external_STORYBOOK_MODULE_TEST_.expect)(greenOption).toBeInTheDocument(),(0,external_STORYBOOK_MODULE_TEST_.expect)(blueOption).toHaveAttribute("aria-selected","true"),(0,external_STORYBOOK_MODULE_TEST_.expect)(redOption).toHaveAttribute("aria-selected","true"),(0,external_STORYBOOK_MODULE_TEST_.expect)(greenOption).toHaveAttribute("aria-selected","false")}}),MetadataSidebarRedesign_visual_stories={title:"Elements/ContentSidebar/MetadataSidebarRedesign/tests/visual-regression-tests",component:ContentSidebar.A,args:{token,metadataSidebarProps:_objectSpread({},defaultMetadataArgs),hasMetadata:!0,features:mockFeatures,fileId:MetadataSidebarRedesignedMocks.pT,logger:mockLogger},parameters:{msw:{handlers:defaultMockHandlers}}},__namedExportsOrder=["AddTemplateDropdownMenuOn","AddTemplateDropdownMenuOnEmpty","FilterInstancesDropdown","AddingNewMetadataTemplate","UnsavedChangesModalWhenChoosingDifferentTemplate","EmptyStateWithBoxAiEnabled","EmptyStateWithBoxAiDisabled","MetadataInstanceEditorWithDefinedTemplate","MetadataInstanceEditorWithCustomTemplate","MetadataInstanceEditorCancelChanges","DeleteButtonIsDisabledWhenAddingNewMetadataTemplate","DeleteButtonIsEnabledWhenEditingMetadataTemplateInstance","MetadataInstanceEditorAddTemplateAgainAfterCancel","SwitchEditingTemplateInstances","MetadataInstanceEditorAIEnabled","MetadataInstanceEditorAIEnabledAdvancedExtractAgent","ShowErrorWhenAIAPIIsUnavailable","SuggestionsWhenAIAPIResponses","SuggestionForNewlyCreatedTemplateInstance","ShowErrorOnDelete","ViewMultilevelTaxonomy","ViewSinglelevelTaxonomy","EditMultilevelTaxonomy","EditSinglelevelTaxonomy"];AddTemplateDropdownMenuOn.parameters={...AddTemplateDropdownMenuOn.parameters,docs:{...AddTemplateDropdownMenuOn.parameters?.docs,source:{originalSource:"{\n  play: async ({\n    canvasElement\n  }) => {\n    const canvas = within(canvasElement);\n    const addTemplateButton = await canvas.findByRole('button', {\n      name: 'Add template'\n    }, {\n      timeout: 2000\n    });\n    expect(addTemplateButton).toBeInTheDocument();\n    await userEvent.click(addTemplateButton);\n    const customMetadataOption = canvas.getByRole('option', {\n      name: 'Custom Metadata'\n    });\n    expect(customMetadataOption).toBeInTheDocument();\n    expect(customMetadataOption).toHaveAttribute('aria-disabled');\n  }\n}",...AddTemplateDropdownMenuOn.parameters?.docs?.source}}},AddTemplateDropdownMenuOnEmpty.parameters={...AddTemplateDropdownMenuOnEmpty.parameters,docs:{...AddTemplateDropdownMenuOnEmpty.parameters?.docs,source:{originalSource:"{\n  args: {\n    fileId: fileIdWithoutMetadata,\n    metadataSidebarProps: {\n      isBoxAiSuggestionsEnabled: true,\n      isBetaLanguageEnabled: false,\n      isFeatureEnabled: true,\n      onError: fn(),\n      onSuccess: fn()\n    }\n  },\n  play: async ({\n    canvasElement\n  }) => {\n    const canvas = within(canvasElement);\n    const addTemplateButton = await canvas.findByRole('button', {\n      name: 'Add template'\n    }, {\n      timeout: 2000\n    });\n    expect(addTemplateButton).toBeInTheDocument();\n    await userEvent.click(addTemplateButton);\n    const options = canvas.getAllByRole('option');\n    expect(options).toHaveLength(5);\n    options.forEach(option => {\n      expect(option).not.toHaveAttribute('disabled');\n    });\n  }\n}",...AddTemplateDropdownMenuOnEmpty.parameters?.docs?.source}}},FilterInstancesDropdown.parameters={...FilterInstancesDropdown.parameters,docs:{...FilterInstancesDropdown.parameters?.docs,source:{originalSource:"{\n  play: async ({\n    canvasElement\n  }) => {\n    const canvas = within(canvasElement);\n    await waitFor(async () => {\n      const filterInstancesButton = await canvas.findByRole('combobox');\n      expect(filterInstancesButton).toBeInTheDocument();\n      await userEvent.click(filterInstancesButton);\n      const firstOption = canvas.getByRole('option', {\n        name: 'My Template'\n      });\n      expect(firstOption).toBeInTheDocument();\n      const secondOption = canvas.getByRole('option', {\n        name: 'Select Dropdowns'\n      });\n      expect(secondOption).toBeInTheDocument();\n      const thirdOption = canvas.getByRole('option', {\n        name: 'Custom Metadata'\n      });\n      expect(thirdOption).toBeInTheDocument();\n      await userEvent.click(firstOption);\n      const headlines = await canvas.findAllByRole('heading', {\n        level: 4\n      });\n      expect(headlines).toHaveLength(1);\n      expect(headlines[0].textContent).toEqual('My Template');\n    }, {\n      timeout: 2000\n    });\n  }\n}",...FilterInstancesDropdown.parameters?.docs?.source}}},AddingNewMetadataTemplate.parameters={...AddingNewMetadataTemplate.parameters,docs:{...AddingNewMetadataTemplate.parameters?.docs,source:{originalSource:"{\n  play: async ({\n    canvasElement\n  }) => {\n    const canvas = within(canvasElement);\n    const addTemplateButton = await canvas.findByRole('button', {\n      name: 'Add template'\n    });\n    expect(addTemplateButton).toBeInTheDocument();\n    await userEvent.click(addTemplateButton);\n    const customMetadataOption = canvas.getByRole('option', {\n      name: 'Virus Scan'\n    });\n    expect(customMetadataOption).toBeInTheDocument();\n    await userEvent.click(customMetadataOption);\n    const templateHeader = await canvas.findByRole('heading', {\n      name: 'Virus Scan'\n    });\n    expect(templateHeader).toBeInTheDocument();\n  }\n}",...AddingNewMetadataTemplate.parameters?.docs?.source}}},UnsavedChangesModalWhenChoosingDifferentTemplate.parameters={...UnsavedChangesModalWhenChoosingDifferentTemplate.parameters,docs:{...UnsavedChangesModalWhenChoosingDifferentTemplate.parameters?.docs,source:{originalSource:"{\n  args: {\n    fileId: fileIdWithoutMetadata,\n    metadataSidebarProps: defaultMetadataSidebarProps\n  },\n  play: async ({\n    canvasElement\n  }) => {\n    const canvas = within(canvasElement);\n    const addTemplateButton = await canvas.findByRole('button', {\n      name: 'Add template'\n    });\n    expect(addTemplateButton).toBeInTheDocument();\n    await userEvent.click(addTemplateButton);\n    const customMetadataOption = canvas.getByRole('option', {\n      name: 'Virus Scan'\n    });\n    expect(customMetadataOption).toBeInTheDocument();\n    await userEvent.click(customMetadataOption);\n    await userEvent.click(addTemplateButton);\n    const myTemplateOption = canvas.getByRole('option', {\n      name: 'My Template'\n    });\n    expect(myTemplateOption).toBeInTheDocument();\n    await userEvent.click(myTemplateOption);\n    const unsavedChangesModal = await screen.findByRole('heading', {\n      level: 2,\n      name: 'Unsaved Changes'\n    }, {\n      timeout: 5000\n    });\n    expect(unsavedChangesModal).toBeInTheDocument();\n  }\n}",...UnsavedChangesModalWhenChoosingDifferentTemplate.parameters?.docs?.source}}},EmptyStateWithBoxAiEnabled.parameters={...EmptyStateWithBoxAiEnabled.parameters,docs:{...EmptyStateWithBoxAiEnabled.parameters?.docs,source:{originalSource:"{\n  args: {\n    fileId: fileIdWithoutMetadata,\n    metadataSidebarProps: {\n      ...defaultMetadataSidebarProps\n    },\n    features: {\n      ...mockFeatures,\n      'metadata.aiSuggestions.enabled': true,\n      'metadata.betalanguage.enabled': false\n    }\n  }\n}",...EmptyStateWithBoxAiEnabled.parameters?.docs?.source}}},EmptyStateWithBoxAiDisabled.parameters={...EmptyStateWithBoxAiDisabled.parameters,docs:{...EmptyStateWithBoxAiDisabled.parameters?.docs,source:{originalSource:"{\n  args: {\n    fileId: fileIdWithoutMetadata,\n    metadataSidebarProps: {\n      ...defaultMetadataSidebarProps,\n      isBoxAiSuggestionsEnabled: false,\n      isBetaLanguageEnabled: false\n    }\n  }\n}",...EmptyStateWithBoxAiDisabled.parameters?.docs?.source}}},MetadataInstanceEditorWithDefinedTemplate.parameters={...MetadataInstanceEditorWithDefinedTemplate.parameters,docs:{...MetadataInstanceEditorWithDefinedTemplate.parameters?.docs,source:{originalSource:"{\n  args: {\n    fileId: fileIdWithoutMetadata,\n    metadataSidebarProps: defaultMetadataSidebarProps\n  },\n  play: async ({\n    canvasElement\n  }) => {\n    const canvas = within(canvasElement);\n    const addTemplateButton = await canvas.findByRole('button', {\n      name: 'Add template'\n    });\n    await userEvent.click(addTemplateButton);\n    const customMetadataOption = canvas.getByRole('option', {\n      name: 'My Template'\n    });\n    await userEvent.click(customMetadataOption);\n  }\n}",...MetadataInstanceEditorWithDefinedTemplate.parameters?.docs?.source}}},MetadataInstanceEditorWithCustomTemplate.parameters={...MetadataInstanceEditorWithCustomTemplate.parameters,docs:{...MetadataInstanceEditorWithCustomTemplate.parameters?.docs,source:{originalSource:"{\n  args: {\n    fileId: fileIdWithoutMetadata,\n    metadataSidebarProps: defaultMetadataSidebarProps\n  },\n  play: async ({\n    canvasElement\n  }) => {\n    const canvas = within(canvasElement);\n    const addTemplateButton = await canvas.findByRole('button', {\n      name: 'Add template'\n    }, {\n      timeout: 2000\n    });\n    await userEvent.click(addTemplateButton);\n    const customMetadataOption = canvas.getByRole('option', {\n      name: 'Custom Metadata'\n    });\n    await userEvent.click(customMetadataOption);\n  }\n}",...MetadataInstanceEditorWithCustomTemplate.parameters?.docs?.source}}},MetadataInstanceEditorCancelChanges.parameters={...MetadataInstanceEditorCancelChanges.parameters,docs:{...MetadataInstanceEditorCancelChanges.parameters?.docs,source:{originalSource:"{\n  play: async ({\n    canvasElement\n  }) => {\n    const canvas = within(canvasElement);\n\n    // Edit buttons contains also template name\n    const editButton = await canvas.findByRole('button', {\n      name: 'Edit My Template'\n    });\n    expect(editButton).toBeInTheDocument();\n    let headlines = await canvas.findAllByRole('heading', {\n      level: 4\n    });\n    expect(headlines).toHaveLength(3);\n    expect(headlines.map(heading => heading.textContent)).toEqual(expect.arrayContaining(['My Template', 'Select Dropdowns', 'Custom Metadata']));\n\n    // go to edit mode - only edited template is visible\n    await userEvent.click(editButton);\n    headlines = await canvas.findAllByRole('heading', {\n      level: 4\n    });\n    expect(headlines).toHaveLength(1);\n    expect(headlines.map(heading => heading.textContent)).toEqual(expect.arrayContaining(['My Template']));\n\n    // cancel editing - back to list view\n    const cancelButton = await canvas.findByRole('button', {\n      name: 'Cancel'\n    });\n    await userEvent.click(cancelButton);\n    headlines = await canvas.findAllByRole('heading', {\n      level: 4\n    });\n    expect(headlines).toHaveLength(3);\n    expect(headlines.map(heading => heading.textContent)).toEqual(expect.arrayContaining(['My Template', 'Select Dropdowns', 'Custom Metadata']));\n  }\n}",...MetadataInstanceEditorCancelChanges.parameters?.docs?.source}}},DeleteButtonIsDisabledWhenAddingNewMetadataTemplate.parameters={...DeleteButtonIsDisabledWhenAddingNewMetadataTemplate.parameters,docs:{...DeleteButtonIsDisabledWhenAddingNewMetadataTemplate.parameters?.docs,source:{originalSource:"{\n  play: async ({\n    canvasElement\n  }) => {\n    const canvas = within(canvasElement);\n    const addTemplateButton = await canvas.findByRole('button', {\n      name: 'Add template'\n    });\n    expect(addTemplateButton).toBeInTheDocument();\n    await userEvent.click(addTemplateButton);\n    const customMetadataOption = canvas.getByRole('option', {\n      name: 'Virus Scan'\n    });\n    expect(customMetadataOption).toBeInTheDocument();\n    await userEvent.click(customMetadataOption);\n    const deleteButton = await canvas.findByRole('button', {\n      name: 'Delete'\n    });\n    expect(deleteButton).toBeDisabled();\n  }\n}",...DeleteButtonIsDisabledWhenAddingNewMetadataTemplate.parameters?.docs?.source}}},DeleteButtonIsEnabledWhenEditingMetadataTemplateInstance.parameters={...DeleteButtonIsEnabledWhenEditingMetadataTemplateInstance.parameters,docs:{...DeleteButtonIsEnabledWhenEditingMetadataTemplateInstance.parameters?.docs,source:{originalSource:"{\n  play: async ({\n    canvasElement\n  }) => {\n    const canvas = within(canvasElement);\n    const editMetadataInstanceButton = await canvas.findByRole('button', {\n      name: 'Edit My Template'\n    });\n    expect(editMetadataInstanceButton).toBeInTheDocument();\n    await userEvent.click(editMetadataInstanceButton);\n    const deleteButton = await canvas.findByRole('button', {\n      name: 'Delete'\n    });\n    expect(deleteButton).toBeEnabled();\n  }\n}",...DeleteButtonIsEnabledWhenEditingMetadataTemplateInstance.parameters?.docs?.source}}},MetadataInstanceEditorAddTemplateAgainAfterCancel.parameters={...MetadataInstanceEditorAddTemplateAgainAfterCancel.parameters,docs:{...MetadataInstanceEditorAddTemplateAgainAfterCancel.parameters?.docs,source:{originalSource:"{\n  args: {\n    fileId: fileIdWithoutMetadata,\n    metadataSidebarProps: defaultMetadataSidebarProps\n  },\n  play: async ({\n    canvasElement\n  }) => {\n    const canvas = within(canvasElement);\n    const addTemplateButton = await canvas.findByRole('button', {\n      name: 'Add template'\n    });\n    await userEvent.click(addTemplateButton);\n    const templateMetadataOption = canvas.getByRole('option', {\n      name: 'My Template'\n    });\n    expect(templateMetadataOption).not.toHaveAttribute('aria-disabled');\n    await userEvent.click(templateMetadataOption);\n\n    // Check if currently open template is disabled in dropdown\n    await userEvent.click(addTemplateButton);\n    const templateMetadataOptionDisabled = canvas.getByRole('option', {\n      name: 'My Template'\n    });\n    expect(templateMetadataOptionDisabled).toHaveAttribute('aria-disabled');\n\n    // Check if template available again after cancelling\n    const cancelButton = await canvas.findByRole('button', {\n      name: 'Cancel'\n    });\n    await userEvent.click(cancelButton);\n    await userEvent.click(addTemplateButton);\n    const templateMetadataOptionEnabled = canvas.getByRole('option', {\n      name: 'My Template'\n    });\n    expect(templateMetadataOptionEnabled).not.toHaveAttribute('aria-disabled');\n  }\n}",...MetadataInstanceEditorAddTemplateAgainAfterCancel.parameters?.docs?.source}}},SwitchEditingTemplateInstances.parameters={...SwitchEditingTemplateInstances.parameters,docs:{...SwitchEditingTemplateInstances.parameters?.docs,source:{originalSource:"{\n  args: {\n    fileId: '416047501580',\n    metadataSidebarProps: defaultMetadataSidebarProps\n  },\n  parameters: {\n    msw: {\n      handlers: [...defaultMockHandlers, http.get(`/2.0/files/416047501580`, () => {\n        return HttpResponse.json(mockFileRequest.response);\n      }), http.get(`/2.0/files/416047501580/metadata`, () => {\n        return HttpResponse.json(mockMetadataInstances.response);\n      })]\n    }\n  },\n  play: async ({\n    canvasElement\n  }) => {\n    const canvas = within(canvasElement);\n    // open and edit a new template\n    const addTemplateButton = await canvas.findByRole('button', {\n      name: 'Add template'\n    });\n    await userEvent.click(addTemplateButton);\n    const templateMetadataOption = canvas.getByRole('option', {\n      name: 'My Template'\n    });\n    await userEvent.click(templateMetadataOption);\n    const input = await canvas.findByRole('textbox');\n    await userEvent.type(input, 'Lorem ipsum dolor.');\n\n    // open another template while editing the first one (with discarding changes)\n    await userEvent.click(addTemplateButton);\n    const templateMetadataOptionA = canvas.getByRole('option', {\n      name: 'My Template'\n    });\n    const templateMetadataOptionB = canvas.getByRole('option', {\n      name: 'Virus Scan'\n    });\n    expect(templateMetadataOptionA).toHaveAttribute('aria-disabled');\n    expect(templateMetadataOptionB).not.toHaveAttribute('aria-disabled');\n    await userEvent.click(templateMetadataOptionB);\n    const unsavedChangesModal = await screen.findByRole('heading', {\n      level: 2,\n      name: 'Unsaved Changes'\n    }, {\n      timeout: 5000\n    });\n    expect(unsavedChangesModal).toBeInTheDocument();\n    const unsavedChangesModalDiscardButton = await screen.findByRole('button', {\n      name: 'Discard Changes'\n    });\n    await userEvent.click(unsavedChangesModalDiscardButton);\n    const newTemplateHeader = await canvas.findByRole('heading', {\n      name: 'Virus Scan'\n    });\n    expect(newTemplateHeader).toBeInTheDocument();\n\n    // check if template buttons disabled correctly after switching editors\n    await userEvent.click(addTemplateButton);\n    const templateMetadataOptionAAfterSwitch = canvas.getByRole('option', {\n      name: 'My Template'\n    });\n    const templateMetadataOptionBAfterSwitch = canvas.getByRole('option', {\n      name: 'Virus Scan'\n    });\n    expect(templateMetadataOptionAAfterSwitch).not.toHaveAttribute('aria-disabled');\n    expect(templateMetadataOptionBAfterSwitch).toHaveAttribute('aria-disabled');\n  }\n}",...SwitchEditingTemplateInstances.parameters?.docs?.source}}},MetadataInstanceEditorAIEnabled.parameters={...MetadataInstanceEditorAIEnabled.parameters,docs:{...MetadataInstanceEditorAIEnabled.parameters?.docs,source:{originalSource:"{\n  args: {\n    features: {\n      ...mockFeatures,\n      'metadata.aiSuggestions.enabled': true,\n      'metadata.betalanguage.enabled': false\n    }\n  },\n  play: async ({\n    canvasElement\n  }) => {\n    const canvas = within(canvasElement);\n    const autofillWithBoxAI = await canvas.findAllByRole('button', {\n      name: /Autofill .+ with Box AI/\n    });\n    expect(autofillWithBoxAI).toHaveLength(2);\n    const editButton = await canvas.findByRole('button', {\n      name: 'Edit My Template'\n    });\n    await userEvent.click(editButton);\n    const autofillButton = await canvas.findByRole('button', {\n      name: 'Autofill'\n    });\n    expect(autofillButton).toBeInTheDocument();\n  }\n}",...MetadataInstanceEditorAIEnabled.parameters?.docs?.source}}},MetadataInstanceEditorAIEnabledAdvancedExtractAgent.parameters={...MetadataInstanceEditorAIEnabledAdvancedExtractAgent.parameters,docs:{...MetadataInstanceEditorAIEnabledAdvancedExtractAgent.parameters?.docs,source:{originalSource:"{\n  args: {\n    features: {\n      ...mockFeatures,\n      'metadata.aiSuggestions.enabled': true,\n      'metadata.extractAdvancedAgents.enabled': true\n    }\n  },\n  play: async ({\n    canvasElement\n  }) => {\n    const canvas = within(canvasElement);\n    // Edit one instance\n    const editButton = await canvas.findByRole('button', {\n      name: 'Edit My Template'\n    });\n    await userEvent.click(editButton);\n\n    // Find the SplitButton\n    const splitButton = await canvas.findByRole('button', {\n      name: /Autofill/\n    });\n    expect(splitButton).toBeVisible();\n    await userEvent.hover(splitButton);\n    const dropdownButton = await canvas.findByRole('button', {\n      name: 'See agent options.'\n    });\n    expect(dropdownButton).toBeVisible();\n  }\n}",...MetadataInstanceEditorAIEnabledAdvancedExtractAgent.parameters?.docs?.source}}},ShowErrorWhenAIAPIIsUnavailable.parameters={...ShowErrorWhenAIAPIIsUnavailable.parameters,docs:{...ShowErrorWhenAIAPIIsUnavailable.parameters?.docs,source:{originalSource:"{\n  args: {\n    features: {\n      ...mockFeatures,\n      'metadata.aiSuggestions.enabled': true,\n      'metadata.betalanguage.enabled': false\n    }\n  },\n  parameters: {\n    msw: {\n      handlers: [...defaultMockHandlers, http.post(aiSuggestionsForMyAttribute.url, () => {\n        return new HttpResponse('Not Found', {\n          status: 404\n        });\n      })]\n    },\n    test: {\n      dangerouslyIgnoreUnhandledErrors: true\n    }\n  },\n  play: async ({\n    canvasElement\n  }) => {\n    const canvas = within(canvasElement);\n    const autofillButton = await canvas.findByRole('button', {\n      name: 'Autofill My Template with Box AI'\n    });\n    await userEvent.click(autofillButton);\n    const errorAlert = await canvas.findByText('We’re sorry, something went wrong.');\n    expect(errorAlert).toBeInTheDocument();\n  }\n}",...ShowErrorWhenAIAPIIsUnavailable.parameters?.docs?.source}}},SuggestionsWhenAIAPIResponses.parameters={...SuggestionsWhenAIAPIResponses.parameters,docs:{...SuggestionsWhenAIAPIResponses.parameters?.docs,source:{originalSource:"{\n  args: {\n    features: {\n      ...mockFeatures,\n      'metadata.aiSuggestions.enabled': true,\n      'metadata.betalanguage.enabled': false\n    }\n  },\n  parameters: {\n    msw: {\n      handlers: [...defaultMockHandlers, http.post(aiSuggestionsForMyAttribute.url, () => HttpResponse.json(aiSuggestionsForMyAttribute.response))]\n    }\n  },\n  play: async ({\n    canvasElement\n  }) => {\n    const canvas = within(canvasElement);\n    const autofillButton = await canvas.findByRole('button', {\n      name: 'Autofill My Template with Box AI'\n    });\n    userEvent.click(autofillButton);\n    const suggestion = await canvas.findByText('it works fine');\n    expect(suggestion).toBeInTheDocument();\n    const replaceButton = await canvas.findByRole('button', {\n      name: 'Clear and Replace'\n    });\n    expect(replaceButton).toBeInTheDocument();\n    await userEvent.click(replaceButton);\n    const input = canvas.getByLabelText('My Attribute');\n    expect(input).toHaveValue('it works fine');\n  }\n}",...SuggestionsWhenAIAPIResponses.parameters?.docs?.source}}},SuggestionForNewlyCreatedTemplateInstance.parameters={...SuggestionForNewlyCreatedTemplateInstance.parameters,docs:{...SuggestionForNewlyCreatedTemplateInstance.parameters?.docs,source:{originalSource:"{\n  args: {\n    features: {\n      ...mockFeatures,\n      'metadata.aiSuggestions.enabled': true,\n      'metadata.betalanguage.enabled': false\n    }\n  },\n  parameters: {\n    msw: {\n      handlers: [...defaultMockHandlers, http.post(aiSuggestionsForMyAttribute.url, () => HttpResponse.json(aiSuggestionForDateField.response))]\n    }\n  },\n  play: async ({\n    canvasElement\n  }) => {\n    const canvas = within(canvasElement);\n    const addTemplateButton = await canvas.findByRole('button', {\n      name: 'Add template'\n    });\n    expect(addTemplateButton).toBeInTheDocument();\n    await userEvent.click(addTemplateButton);\n    const customMetadataOption = canvas.getByRole('option', {\n      name: 'Date Template'\n    });\n    expect(customMetadataOption).toBeInTheDocument();\n    await userEvent.click(customMetadataOption);\n    const templateHeader = await canvas.findByRole('heading', {\n      name: 'Date Template'\n    });\n    expect(templateHeader).toBeInTheDocument();\n    const autofillButton = await canvas.findByRole('button', {\n      name: 'Autofill'\n    });\n    userEvent.click(autofillButton);\n    const suggestion = await canvas.findByText('4/1/2024', {}, {\n      timeout: 5000\n    });\n    expect(suggestion).toBeInTheDocument();\n  }\n}",...SuggestionForNewlyCreatedTemplateInstance.parameters?.docs?.source}}},ShowErrorOnDelete.parameters={...ShowErrorOnDelete.parameters,docs:{...ShowErrorOnDelete.parameters?.docs,source:{originalSource:"{\n  parameters: {\n    msw: {\n      handlers: [...defaultMockHandlers, http.delete(mockErrorDeleteMyTemplateMetadataRequest.url, () => {\n        return HttpResponse.json(mockErrorDeleteMyTemplateMetadataRequest.response, {\n          status: 404\n        });\n      })]\n    }\n  },\n  play: async ({\n    canvasElement\n  }) => {\n    const canvas = within(canvasElement);\n    const editButton = await canvas.findByRole('button', {\n      name: 'Edit My Template'\n    }, {\n      timeout: 2000\n    });\n    await userEvent.click(editButton);\n    const deleteButton = await canvas.findByRole('button', {\n      name: 'Delete'\n    });\n    await userEvent.click(deleteButton);\n    const confirmModal = await screen.findByRole('dialog', {\n      name: /delete.+/i\n    }, {\n      timeout: 2000\n    });\n    const confirmInput = within(confirmModal).getByRole('textbox');\n    await userEvent.type(confirmInput, 'My Template');\n    const confirmButton = within(confirmModal).getByRole('button', {\n      name: 'Confirm'\n    });\n    await userEvent.click(confirmButton);\n    const errorAlert = await canvas.findByText('An error has occurred while updating metadata. Please refresh the page and try again.');\n    expect(errorAlert).toBeInTheDocument();\n  }\n}",...ShowErrorOnDelete.parameters?.docs?.source}}},ViewMultilevelTaxonomy.parameters={...ViewMultilevelTaxonomy.parameters,docs:{...ViewMultilevelTaxonomy.parameters?.docs,source:{originalSource:"{\n  args: {\n    features: {\n      ...mockFeatures,\n      'metadata.multilevelTaxonomy.enabled': true\n    }\n  },\n  parameters: {\n    msw: {\n      handlers: [...taxonomyMockHandlers, http.get(mockMetadataTemplatesWithMultilevelTaxonomy.url, () => {\n        return HttpResponse.json(mockMetadataTemplatesWithMultilevelTaxonomy.response);\n      })]\n    }\n  },\n  play: async ({\n    canvasElement\n  }) => {\n    const canvas = within(canvasElement);\n    await waitFor(async () => {\n      const multilevelOptionButton = canvas.getByRole('button', {\n        name: 'London'\n      });\n      expect(multilevelOptionButton).toBeInTheDocument();\n      await userEvent.click(multilevelOptionButton);\n      const multilevelDialog = screen.getByRole('dialog');\n      expect(multilevelDialog).toBeInTheDocument();\n    });\n  }\n}",...ViewMultilevelTaxonomy.parameters?.docs?.source}}},ViewSinglelevelTaxonomy.parameters={...ViewSinglelevelTaxonomy.parameters,docs:{...ViewSinglelevelTaxonomy.parameters?.docs,source:{originalSource:"{\n  parameters: {\n    msw: {\n      handlers: [...taxonomyMockHandlers, http.get(mockMetadataTemplatesWithSinglelevelTaxonomy.url, () => {\n        return HttpResponse.json(mockMetadataTemplatesWithSinglelevelTaxonomy.response);\n      })]\n    }\n  },\n  play: async ({\n    canvasElement\n  }) => {\n    const canvas = within(canvasElement);\n    await waitFor(async () => {\n      const singlelevelOptionButton = canvas.getByRole('button', {\n        name: 'Blue'\n      });\n      expect(singlelevelOptionButton).toBeInTheDocument();\n      await userEvent.click(singlelevelOptionButton);\n      const singlelevelDialog = screen.getByRole('dialog');\n      expect(singlelevelDialog).toBeInTheDocument();\n    });\n  }\n}",...ViewSinglelevelTaxonomy.parameters?.docs?.source}}},EditMultilevelTaxonomy.parameters={...EditMultilevelTaxonomy.parameters,docs:{...EditMultilevelTaxonomy.parameters?.docs,source:{originalSource:"{\n  ...ViewMultilevelTaxonomy,\n  play: async ({\n    canvasElement\n  }) => {\n    const canvas = within(canvasElement);\n    const editButton = await waitFor(() => canvas.getByRole('button', {\n      name: 'Edit My Taxonomy'\n    }));\n    await userEvent.click(editButton);\n    const multilevelInput = canvas.getByRole('combobox');\n    const optionChip = canvas.getByRole('button', {\n      name: 'London'\n    });\n    expect(multilevelInput).toBeInTheDocument();\n    expect(optionChip).toBeInTheDocument();\n    await userEvent.click(multilevelInput);\n    const listbox = await waitFor(() => canvas.getByRole('listbox'));\n    expect(listbox).toBeInTheDocument();\n    let expandButtons = await waitFor(() => canvas.getAllByRole('button', {\n      name: 'Expand branch'\n    }));\n    await userEvent.click(expandButtons[1]);\n    const hokkaidoOption = await waitFor(() => canvas.getByText('Hokkaido'));\n    expect(hokkaidoOption).toBeInTheDocument();\n    expandButtons = await waitFor(() => screen.getAllByRole('button', {\n      name: 'Expand branch'\n    }));\n    await userEvent.click(expandButtons[2]);\n    const sapporoOption = await waitFor(() => canvas.getByRole('treeitem', {\n      name: 'Sapporo'\n    }));\n    expect(sapporoOption).toBeInTheDocument();\n    expect(sapporoOption).toHaveAttribute('aria-selected', 'false');\n    await userEvent.click(sapporoOption);\n    const sapporoSelection = await waitFor(() => canvas.getByRole('gridcell', {\n      name: 'Sapporo'\n    }));\n    expect(sapporoOption).toBeInTheDocument();\n    expect(sapporoOption).toHaveAttribute('aria-selected', 'true');\n    expect(sapporoSelection).toBeInTheDocument();\n  }\n}",...EditMultilevelTaxonomy.parameters?.docs?.source}}},EditSinglelevelTaxonomy.parameters={...EditSinglelevelTaxonomy.parameters,docs:{...EditSinglelevelTaxonomy.parameters?.docs,source:{originalSource:"{\n  ...ViewSinglelevelTaxonomy,\n  play: async ({\n    canvasElement\n  }) => {\n    const canvas = within(canvasElement);\n    const editButton = await waitFor(() => canvas.getByRole('button', {\n      name: 'Edit My Taxonomy'\n    }));\n    await userEvent.click(editButton);\n    const singlelevelInput = canvas.getByRole('combobox');\n    const blueSelection = canvas.getByRole('gridcell', {\n      name: 'Blue'\n    });\n    expect(singlelevelInput).toBeInTheDocument();\n    expect(blueSelection).toBeInTheDocument();\n    await userEvent.click(singlelevelInput);\n    const listbox = await waitFor(() => canvas.getByRole('listbox'));\n    expect(listbox).toBeInTheDocument();\n    const blueOption = await waitFor(() => canvas.getByRole('option', {\n      name: 'Blue'\n    }));\n    const redOption = await waitFor(() => canvas.getByRole('option', {\n      name: 'Red'\n    }));\n    const greenOption = await waitFor(() => canvas.getByRole('option', {\n      name: 'Green'\n    }));\n    expect(blueOption).toBeInTheDocument();\n    expect(redOption).toBeInTheDocument();\n    expect(greenOption).toBeInTheDocument();\n    expect(blueOption).toHaveAttribute('aria-selected', 'true');\n    expect(redOption).toHaveAttribute('aria-selected', 'false');\n    expect(greenOption).toHaveAttribute('aria-selected', 'false');\n    await userEvent.click(redOption);\n    const redSelection = await waitFor(() => canvas.getByRole('gridcell', {\n      name: 'Red'\n    }));\n    expect(redSelection).toBeInTheDocument();\n    expect(blueSelection).toBeInTheDocument();\n    expect(blueOption).toBeInTheDocument();\n    expect(redOption).toBeInTheDocument();\n    expect(greenOption).toBeInTheDocument();\n    expect(blueOption).toHaveAttribute('aria-selected', 'true');\n    expect(redOption).toHaveAttribute('aria-selected', 'true');\n    expect(greenOption).toHaveAttribute('aria-selected', 'false');\n  }\n}",...EditSinglelevelTaxonomy.parameters?.docs?.source}}}},"./src/elements/common/__mocks__/mockRequests.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{Cv:()=>mockEventRequest,X3:()=>mockUserRequest,ul:()=>mockFileRequest});const apiV2Path=`${__webpack_require__("./src/constants.js").f9u}/2.0`,mockEventRequest={url:`${apiV2Path}/events`,response:{}},mockUserRequest={url:`${apiV2Path}/users/me`,response:{type:"user",id:"7504104663",name:"PreviewTestApp",login:"AutomationUser_759881_KEmZdXHHrF@boxdevedition.com",created_at:"2019-03-04T11:04:35-08:00",modified_at:"2024-09-10T21:44:30-07:00",language:"en",timezone:"America/Los_Angeles",space_amount:10737418240,space_used:23802100,max_upload_size:53687091200,status:"active",job_title:"",phone:"",address:"",notification_email:null}},mockFileRequest={url:`${apiV2Path}/files/${__webpack_require__.g.FILE_ID}`,response:{type:"file",id:"415542803939",etag:"3",permissions:{can_download:!0,can_preview:!0,can_upload:!1,can_comment:!0,can_rename:!1,can_delete:!1,can_share:!1,can_set_share_access:!1,can_invite_collaborator:!1,can_annotate:!1,can_view_annotations_all:!0,can_view_annotations_self:!0,can_create_annotations:!0,can_view_annotations:!0},shared_link:null,sha1:"9650d7a6213181771fd38e761e2c2a330848a5fc",file_version:{type:"file_version",id:"780895440222",sha1:"9650d7a6213181771fd38e761e2c2a330848a5fc"},name:"Document (PDF).pdf",size:792687,extension:"pdf",watermark_info:{is_watermarked:!1},is_download_available:!0}}},"./src/elements/content-sidebar/stories/__mocks__/MetadataSidebarRedesignedMocks.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{Fd:()=>fileIdWithoutMetadata,JD:()=>mockEmptyMetadataInstances,Uo:()=>mockMetadataInstances,Wm:()=>mockGlobalMetadataTemplates,YI:()=>aiSuggestionForDateField,b4:()=>aiSuggestionsForMyAttribute,bM:()=>mockFileRequestWithoutMetadata,eQ:()=>mockEnterpriseMetadataTemplates,pT:()=>fileIdWithMetadata,qx:()=>mockErrorDeleteMyTemplateMetadataRequest,ul:()=>mockFileRequest});var _constants__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./src/constants.js");const fileIdWithMetadata="415542803939",fileIdWithoutMetadata="416047501580",apiV2Path=`${_constants__WEBPACK_IMPORTED_MODULE_0__.f9u}/2.0`,mockFileRequest={url:`${apiV2Path}/files/${fileIdWithMetadata}`,response:{type:"file",id:fileIdWithMetadata,etag:"3",is_externally_owned:!1,extension:"pdf",permissions:{can_download:!0,can_preview:!0,can_upload:!0,can_comment:!0,can_rename:!1,can_delete:!1,can_share:!1,can_set_share_access:!1,can_invite_collaborator:!1,can_annotate:!1,can_view_annotations_all:!0,can_view_annotations_self:!0,can_create_annotations:!0,can_view_annotations:!0}}},mockFileRequestWithoutMetadata={url:`${apiV2Path}/files/${fileIdWithoutMetadata}`,response:{type:"file",id:fileIdWithoutMetadata,etag:"3",is_externally_owned:!1,permissions:{can_download:!0,can_preview:!0,can_upload:!1,can_comment:!0,can_rename:!1,can_delete:!1,can_share:!1,can_set_share_access:!1,can_invite_collaborator:!1,can_annotate:!1,can_view_annotations_all:!0,can_view_annotations_self:!0,can_create_annotations:!0,can_view_annotations:!0}}},mockGlobalMetadataTemplates={url:`${apiV2Path}/metadata_templates/global`,response:{entries:[]}},mockEmptyMetadataInstances={url:`${apiV2Path}/files/${fileIdWithoutMetadata}/metadata`,response:{entries:[{id:"2cb618ed-f31e-4172-b354-534524246653",$version:1,$type:"Secrets-453ffc2f-bf5a-464c-a004-432342",$parent:"file_415542803939",$typeVersion:1,$template:"secrets",$scope:"enterprise_173733877",myAttribute:"Secrets",$canEdit:!0}]}},mockMetadataInstances={url:`${apiV2Path}/files/${fileIdWithMetadata}/metadata`,response:{entries:[{$id:"776397f2-5d56-4a33-80c1-569614702899",$version:1,$type:"myTemplate-453ffc2f-bf5a-464c-a004-476a4eac20fd",$parent:"file_415542803939",$typeVersion:1,$template:"myTemplate",$scope:"enterprise_173733877",$templateKey:"myTemplate",myAttribute:"My Value",$canEdit:!0},{$id:"8efaaafc-6bbf-4d8a-bb94-6e0ed158d2a8",$version:0,$type:"selectDropdowns-0549abd6-5b7b-48ed-bfa8-34528d33d5b9",$parent:"file_415542803939",$typeVersion:2,$template:"selectDropdowns",$scope:"enterprise_173733877",$canEdit:!0},{$id:"af8eb470-5336-4886-b488-9480526ffa06",$version:1,$type:"properties",$parent:"file_415542803939",$typeVersion:6,$template:"properties",$scope:"global",Test:"Value",Key:"Value",$canEdit:!0}],limit:100}},mockEnterpriseMetadataTemplates={url:`${apiV2Path}/metadata_templates/enterprise`,response:{limit:1e3,entries:[{id:"2f9c5b2b-01a2-4ae6-9197-1ff745effef0",type:"metadata_template",templateKey:"myTemplate",scope:"enterprise_173733877",displayName:"My Template",hidden:!1,copyInstanceOnItemCopy:!1,fields:[{id:"4fc86fb1-43cd-4aa2-a585-5e94ec445d90",type:"string",key:"myAttribute",displayName:"My Attribute",hidden:!1,description:"My Value"}]},{id:"2cb618ed-f31e-4172-b354-6553b425e27c",type:"metadata_template",templateKey:"secrets",scope:"enterprise_173733877",displayName:"Secrets",hidden:!0,copyInstanceOnItemCopy:!1,fields:[{id:"5b4d1801-dee1-4cd5-90b6-5d8b398e5da3",type:"float",key:"secretField",displayName:"Secret Field",hidden:!1,description:"secret value"}]},{id:"90ab141e-285b-43cb-8dc7-a0c32ee19342",type:"metadata_template",templateKey:"securityClassification-6VMVochwUWo",scope:"enterprise_173733877",displayName:"Classification",hidden:!1,copyInstanceOnItemCopy:!1,fields:[{id:"94ce0935-915a-4dbd-87b2-557cac4fb0cb",type:"enum",key:"Box__Security__Classification__Key",displayName:"Classification",hidden:!1,options:[{id:"bab3be2f-050d-4036-ad04-8b776c834cbb",key:"Public",staticConfig:{classification:{classificationDefinition:"Publicly Accessible Information"}}},{id:"bf183996-6671-4f29-a14c-14c995ab8939",key:"Private",staticConfig:{classification:{classificationDefinition:"Contains Sensitive Information"}}}]}]},{id:"bc967b4c-5ec5-4230-a9bb-f1a4b841abf3",type:"metadata_template",templateKey:"selectDropdowns",scope:"enterprise_173733877",displayName:"Select Dropdowns",hidden:!1,copyInstanceOnItemCopy:!1,fields:[{id:"3f17ef73-be16-409f-b574-ba1247f7ce27",type:"enum",key:"breakfastCereal",displayName:"Breakfast Cereal",hidden:!1,options:[{id:"226269a5-7d36-4fb1-b0bd-59ae06dcee19",key:"Froot Loops"},{id:"207da8a8-bb55-49c6-8333-a2dc8c79393a",key:"Trix"},{id:"24a86a4e-bc5b-4416-81bc-276400adb0e6",key:"Frosted Flakes"},{id:"414e0c29-b004-46a7-b3f1-79d5b16f30d9",key:"Cheerios"}]},{id:"d5401569-dd35-427d-b493-016bb87f8702",type:"string",key:"someAttribute1",displayName:"Some Attribute #1",hidden:!1},{id:"ef6f0580-aded-4463-897a-eddf63125e23",type:"string",key:"someAttribute2",displayName:"Some Attribute #2",hidden:!1},{id:"0192363e-2fbd-4899-9355-a38413eb6334",type:"string",key:"someAttribute3",displayName:"Some Attribute #3",hidden:!1},{id:"052afb34-4eba-41ee-b7df-619bd71d6f35",type:"string",key:"someAttribute4",displayName:"Some Attribute #4",hidden:!1},{id:"cb0e30c3-ab19-4fd9-95fc-073aae682af5",type:"string",key:"someAttribute5",displayName:"Some Attribute #5",hidden:!1},{id:"77ea2b1e-27b3-42e8-a794-82a183819455",type:"string",key:"someAttribute6",displayName:"Some Attribute #6",hidden:!1}]},{id:"dc864980-9e7f-45ca-9c8a-88750001da7a",type:"metadata_template",templateKey:"virus_scan_c3Yf7Q56",scope:"enterprise_173733877",displayName:"Virus Scan",hidden:!1,copyInstanceOnItemCopy:!1,fields:[{id:"ffbca749-771b-4399-8c93-7d2610b5fbd3",type:"enum",key:"scan_result",displayName:"Scan result",hidden:!1,options:[{id:"b2876cf5-921f-495d-84a5-7db4ae3890cb",key:"Clean"},{id:"429c03d4-19f4-441a-858d-6d8a9a3c0056",key:"Malicious"},{id:"f65c8ffb-2109-4cfb-aaf1-bb474b15f9fb",key:"Not scanned"},{id:"45c8a35b-657f-40cb-9387-d1ec90d8176d",key:"Suspicious"},{id:"ff6da597-a484-4352-b068-89cc7e218152",key:"Unknown"}]}]},{id:"dc864980-9e7f-45ca-9c8a-454367642fsdf3",type:"metadata_template",templateKey:"date_template",scope:"enterprise_173733877",displayName:"Date Template",hidden:!1,copyInstanceOnItemCopy:!1,fields:[{id:"ffbca749-771b-4399-8c93-4534fsdgs3423",type:"date",key:"dateField",displayName:"Date Field",hidden:!1}]}],next_marker:null,prev_marker:null}},aiSuggestionsForMyAttribute={url:`${apiV2Path}/ai/extract_structured`,response:{myAttribute:"it works fine"}},aiSuggestionForDateField={url:`${apiV2Path}/ai/extract_structured`,response:{dateField:"2024-04-01T00:00:00Z"}},mockErrorDeleteMyTemplateMetadataRequest={url:"https://api.box.com/2.0/files/415542803939/metadata/enterprise_173733877/myTemplate",response:{message:"Instance of 'properties' not found for 'file_416047501580'",code:"instance_not_found",request_id:"fasf6as5fasfas7a"}}}}]);