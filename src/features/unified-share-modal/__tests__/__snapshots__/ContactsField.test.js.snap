// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`features/unified-share-modal/ContactsField filterContacts() Should return contacts in the correct format 1`] = `
Array [
  Object {
    "email": "y@example.com",
    "id": "23456",
    "isExternalUser": false,
    "text": "Y User",
    "type": "user",
    "value": "y@example.com",
  },
  Object {
    "email": "z@example.com",
    "id": "34567",
    "isExternalUser": true,
    "text": "Z User",
    "type": "user",
    "value": "z@example.com",
  },
  Object {
    "email": "w@example.com",
    "id": "9875",
    "isExternalUser": false,
    "text": "W User",
    "type": "user",
    "value": "w@example.com",
  },
  Object {
    "email": "x@example.com",
    "id": "12345",
    "isExternalUser": false,
    "text": "X User",
    "type": "group",
    "value": "x@example.com",
  },
]
`;

exports[`features/unified-share-modal/ContactsField render should have scrollable dropdown if contacts > 5 1`] = `
<PillSelectorDropdown
  allowCustomPills={true}
  allowInvalidPills={true}
  className="scrollable"
  disabled={false}
  error=""
  inputProps={
    Object {
      "autoFocus": true,
      "onChange": [Function],
    }
  }
  label={
    <FormattedMessage
      defaultMessage="Invite People"
      id="boxui.unifiedShare.inviteFieldLabel"
    />
  }
  onBlur={[Function]}
  onInput={[Function]}
  onPillCreate={[Function]}
  onRemove={[MockFunction]}
  onSelect={[MockFunction]}
  parseItems={[Function]}
  placeholder=""
  selectedOptions={Array []}
  selectorOptions={
    Array [
      Object {
        "email": "w@example.com",
        "id": "9875",
        "isExternalUser": false,
        "text": "W User",
        "type": "user",
        "value": "w@example.com",
      },
      Object {
        "email": "x@example.com",
        "id": "12345",
        "isExternalUser": false,
        "text": "X User",
        "type": "group",
        "value": "x@example.com",
      },
      Object {
        "email": "y@example.com",
        "id": "23456",
        "isExternalUser": true,
        "text": "Y User",
        "type": "user",
        "value": "y@example.com",
      },
      Object {
        "email": "z@example.com",
        "id": "34567",
        "isExternalUser": false,
        "text": "Z User",
        "type": "user",
        "value": "z@example.com",
      },
      Object {
        "email": "a@example.com",
        "id": "12",
        "isExternalUser": true,
        "text": "a b",
        "type": "user",
        "value": "a@example.com",
      },
      Object {
        "email": "b@example.com",
        "id": "13",
        "isExternalUser": false,
        "text": "a b",
        "type": "user",
        "value": "b@example.com",
      },
      Object {
        "email": "c@example.com",
        "id": "14",
        "isExternalUser": true,
        "text": "a c",
        "type": "user",
        "value": "c@example.com",
      },
      Object {
        "email": "d@example.com",
        "id": "14",
        "isExternalUser": false,
        "text": "a d",
        "type": "user",
        "value": "d@example.com",
      },
      Object {
        "email": "e@example.com",
        "id": "14",
        "isExternalUser": true,
        "text": "a e",
        "type": "user",
        "value": "e@example.com",
      },
    ]
  }
  shouldClearUnmatchedInput={false}
  shouldSetActiveItemOnOpen={false}
  showRoundedPills={true}
  validateForError={[MockFunction]}
  validator={[MockFunction]}
>
  <ContactDatalistItem
    id="9875"
    isExternal={false}
    key="9875"
    name="W User"
    showAvatar={false}
    subtitle="w@example.com"
    title="W User"
  />
  <ContactDatalistItem
    id="12345"
    isExternal={false}
    key="12345"
    name="X User"
    showAvatar={false}
    subtitle="x@example.com"
    title="X User"
  />
  <ContactDatalistItem
    id="23456"
    isExternal={true}
    key="23456"
    name="Y User"
    showAvatar={false}
    subtitle="y@example.com"
    title="Y User"
  />
  <ContactDatalistItem
    id="34567"
    isExternal={false}
    key="34567"
    name="Z User"
    showAvatar={false}
    subtitle="z@example.com"
    title="Z User"
  />
  <ContactDatalistItem
    id="12"
    isExternal={true}
    key="12"
    name="a b"
    showAvatar={false}
    subtitle="a@example.com"
    title="a b"
  />
  <ContactDatalistItem
    id="13"
    isExternal={false}
    key="13"
    name="a b"
    showAvatar={false}
    subtitle="b@example.com"
    title="a b"
  />
  <ContactDatalistItem
    id="14"
    isExternal={true}
    key="14"
    name="a c"
    showAvatar={false}
    subtitle="c@example.com"
    title="a c"
  />
  <ContactDatalistItem
    id="14"
    isExternal={false}
    key="14"
    name="a d"
    showAvatar={false}
    subtitle="d@example.com"
    title="a d"
  />
  <ContactDatalistItem
    id="14"
    isExternal={true}
    key="14"
    name="a e"
    showAvatar={false}
    subtitle="e@example.com"
    title="a e"
  />
</PillSelectorDropdown>
`;

exports[`features/unified-share-modal/ContactsField render should render default component 1`] = `
<PillSelectorDropdown
  allowCustomPills={true}
  allowInvalidPills={true}
  className=""
  disabled={false}
  error=""
  inputProps={
    Object {
      "autoFocus": true,
      "onChange": [Function],
    }
  }
  label={
    <FormattedMessage
      defaultMessage="Invite People"
      id="boxui.unifiedShare.inviteFieldLabel"
    />
  }
  onBlur={[Function]}
  onInput={[Function]}
  onPillCreate={[Function]}
  onRemove={[MockFunction]}
  onSelect={[MockFunction]}
  parseItems={[Function]}
  placeholder=""
  selectedOptions={
    Array [
      Object {
        "email": "x@example.com",
        "id": "12345",
        "isExternalUser": false,
        "text": "X User",
        "type": "group",
        "value": "x@example.com",
      },
      Object {
        "email": "y@example.com",
        "id": "23456",
        "isExternalUser": true,
        "text": "Y User",
        "type": "user",
        "value": "y@example.com",
      },
      Object {
        "email": "z@example.com",
        "id": "34567",
        "isExternalUser": false,
        "text": "Z User",
        "type": "user",
        "value": "z@example.com",
      },
    ]
  }
  selectorOptions={Array []}
  shouldClearUnmatchedInput={false}
  shouldSetActiveItemOnOpen={false}
  showRoundedPills={true}
  validateForError={[MockFunction]}
  validator={[MockFunction]}
/>
`;
