// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`features/metadata-instance-editor/fields/Field should correctly not render a text field 1`] = `""`;

exports[`features/metadata-instance-editor/fields/Field should correctly render a date field 1`] = `
<DateField
  dataValue="value"
  onChange={[MockFunction]}
  onRemove={[MockFunction]}
/>
`;

exports[`features/metadata-instance-editor/fields/Field should correctly render a float field 1`] = `
<FloatField
  dataValue="value"
  onChange={[MockFunction]}
  onRemove={[MockFunction]}
  type="float"
/>
`;

exports[`features/metadata-instance-editor/fields/Field should correctly render a multi-select field 1`] = `
<MultiSelectField
  dataValue={
    Array [
      "value",
    ]
  }
  onChange={[MockFunction]}
  onRemove={[MockFunction]}
/>
`;

exports[`features/metadata-instance-editor/fields/Field should correctly render a read only field when not editable 1`] = `
<ReadOnlyField
  dataValue="value"
/>
`;

exports[`features/metadata-instance-editor/fields/Field should correctly render a text field 1`] = `
<TextField
  dataValue="value"
  onChange={[MockFunction]}
  onRemove={[MockFunction]}
/>
`;

exports[`features/metadata-instance-editor/fields/Field should correctly render an enum field 1`] = `
<EnumField
  dataValue="value"
  onChange={[MockFunction]}
  onRemove={[MockFunction]}
/>
`;

exports[`features/metadata-instance-editor/fields/Field should correctly render an inline error for an invalid field type 1`] = `
<InlineError
  title="badbadbad"
>
  <FormattedMessage
    defaultMessage="Invalid metadata field type!"
    id="boxui.metadataInstanceEditor.invalidMetadataFieldType"
  />
</InlineError>
`;

exports[`features/metadata-instance-editor/fields/Field should correctly render an integer field 1`] = `
<IntegerField
  dataValue="value"
  onChange={[MockFunction]}
  onRemove={[MockFunction]}
  type="integer"
/>
`;
