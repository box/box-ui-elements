// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`components/ContentSidebar/Skills/Faces/Faces should correctly render edit button when editable 1`] = `
<div
  className="be-faces"
>
  <PlainButton
    className="be-face-edit"
    data-resin-target="skill-faceedit"
    onClick={[Function]}
    type="button"
  >
    <IconEdit />
  </PlainButton>
  <Face
    face={
      Object {
        "text": "foo",
      }
    }
    isEditing={false}
    key="0"
    onDelete={[Function]}
    onSelect={[Function]}
  />
  <Face
    face={
      Object {
        "text": "bar",
      }
    }
    isEditing={false}
    key="1"
    onDelete={[Function]}
    onSelect={[Function]}
  />
</div>
`;

exports[`components/ContentSidebar/Skills/Faces/Faces should correctly render error when no faces 1`] = `
<div
  className="be-faces"
>
  <FormattedMessage
    defaultMessage="Weâ€™re sorry, no skills information was found."
    id="be.skillNoInfoFoundError"
  />
</div>
`;

exports[`components/ContentSidebar/Skills/Faces/Faces should correctly render faces when not editable 1`] = `
<div
  className="be-faces"
>
  <Face
    face={
      Object {
        "text": "foo",
      }
    }
    isEditing={false}
    key="0"
    onDelete={[Function]}
    onSelect={[Function]}
  />
  <Face
    face={
      Object {
        "text": "bar",
      }
    }
    isEditing={false}
    key="1"
    onDelete={[Function]}
    onSelect={[Function]}
  />
</div>
`;

exports[`components/ContentSidebar/Skills/Faces/Faces should correctly render faces without removed faces 1`] = `
<div
  className="be-faces"
>
  <Face
    face={
      Object {
        "text": "foo",
      }
    }
    isEditing={false}
    key="0"
    onDelete={[Function]}
    onSelect={[Function]}
  />
</div>
`;

exports[`components/ContentSidebar/Skills/Faces/Faces should correctly render save and cancel button when editable and editing 1`] = `
<div
  className="be-faces be-faces-is-editing"
>
  <PlainButton
    className="be-face-edit"
    data-resin-target="skill-faceedit"
    onClick={[Function]}
    type="button"
  >
    <IconEdit />
  </PlainButton>
  <Face
    face={
      Object {
        "text": "foo",
      }
    }
    isEditing={true}
    key="0"
    onDelete={[Function]}
    onSelect={[Function]}
  />
  <Face
    face={
      Object {
        "text": "bar",
      }
    }
    isEditing={true}
    key="1"
    onDelete={[Function]}
    onSelect={[Function]}
  />
  <div
    className="be-faces-buttons"
  >
    <Button
      data-resin-target="skill-faceeditcancel"
      onClick={[Function]}
      type="button"
    >
      <FormattedMessage
        defaultMessage="Cancel"
        id="be.cancel"
      />
    </Button>
    <PrimaryButton
      data-resin-target="skill-faceeditsave"
      onClick={[Function]}
      type="button"
    >
      <FormattedMessage
        defaultMessage="Save"
        id="be.save"
      />
    </PrimaryButton>
  </div>
</div>
`;

exports[`components/ContentSidebar/Skills/Faces/Faces should correctly render time line when face is selected 1`] = `
<div
  className="be-faces"
>
  <Face
    face={
      Object {
        "appears": Array [
          Object {
            "start": 1,
          },
        ],
        "text": "foo",
      }
    }
    isEditing={false}
    key="0"
    onDelete={[Function]}
    onSelect={[Function]}
    selected={
      Object {
        "appears": Array [
          Object {
            "start": 1,
          },
        ],
        "text": "bar",
      }
    }
  />
  <Face
    face={
      Object {
        "appears": Array [
          Object {
            "start": 1,
          },
        ],
        "text": "bar",
      }
    }
    isEditing={false}
    key="1"
    onDelete={[Function]}
    onSelect={[Function]}
    selected={
      Object {
        "appears": Array [
          Object {
            "start": 1,
          },
        ],
        "text": "bar",
      }
    }
  />
  <Timeline
    duration={100}
    interactionTarget="skill-facetimeslice"
    timeslices={
      Array [
        Object {
          "start": 1,
        },
      ]
    }
  />
</div>
`;

exports[`components/ContentSidebar/Skills/Faces/Faces should correctly render when isLoading is true 1`] = `
<div
  className="be-faces"
>
  <Face
    face={
      Object {
        "text": "foo",
      }
    }
    isEditing={false}
    key="0"
    onDelete={[Function]}
    onSelect={[Function]}
  />
  <Face
    face={
      Object {
        "text": "bar",
      }
    }
    isEditing={false}
    key="1"
    onDelete={[Function]}
    onSelect={[Function]}
  />
  <SkillsBusyIndicator />
</div>
`;
