/**
 * Flowtype definitions for numAbbr.ts
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.20.1
 */



import IntlMessageFormat from 'intl-messageformat';
import data, {
            NumbersData
            } from 'box-locale-data';
import isNaN from 'lodash/isNaN';
declare var : data
;
declare export  var Lengths: {|
  +short: "short",// "short"
+long: "long",// "long"

|};
export interface NumAbbrOptions {
length?: $Values<
                typeof 
                Lengths>,
locale?: string,
numbersData?: NumbersData,
} declare function numAbbrWithLocale(
input: number,
options: NumAbbrOptions,
numbersData?: NumbersData,
locale?: string): string

/**
 * Gets the number in abbreviated form in a locale-sensitive manner. This function
 * scales the number down to the smallest it can be, taking only up to 4 significant
 * digits, and rounding the rest. ie. 12345678 becomes "12M" in English.
 * 
 * The abbreviation words/letters can have the length "short" or "long", specified
 * with the "length" property in the options. If "short",
 * then this function uses an abbreviation of the bucket such as "12M". If "long",
 * then the name of the bucket is written out in full, such as "12 million".
 * 
 * For locales that have complex plurals, such as Russian or Polish, this function
 * returns the correctly pluralized suffix/prefix to go along with the scaled number.
 */
declare function numAbbr(input: mixed, options: NumAbbrOptions): string | string[]
declare export default typeof numAbbr
