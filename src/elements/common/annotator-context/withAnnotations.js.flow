/**
 * Flowtype definitions for withAnnotations.tsx
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.10.0
 */

import * as React from "react";
import getProp from "lodash/get";
import { generatePath, match as matchType, matchPath } from "react-router-dom";
import { Location } from "history";
import AnnotatorContext from "./AnnotatorContext";
import {
    Action,
    Annotator,
    AnnotationActionEvent,
    AnnotatorState,
    GetMatchPath,
    MatchParams,
    Status
} from "./types";
export type ActiveChangeEvent = {
    annotationId: string | null,
    fileVersionId: string,
    origin?: string,
    ...
};
export type ActiveChangeEventHandler = (event: ActiveChangeEvent) => void;
export type ComponentWithAnnotations = {
    emitActiveChangeEvent: (id: string | null) => void,
    emitRemoveEvent: (id: string) => void,
    getAction: (eventData: AnnotationActionEvent) => Action,
    getAnnotationsPath: (
        fileVersionId?: string,
        annotationId?: string | null
    ) => string,
    getMatchPath: GetMatchPath,
    handleActiveChange: ActiveChangeEventHandler,
    handleAnnotationChangeEvent: (id: string | null) => void,
    handleAnnotationCreate: (eventData: AnnotationActionEvent) => void,
    handleAnnotationFetchError: (x: {
        error: Error,
        ...
    }) => void,
    handleAnnotator: (annotator: Annotator) => void,
    handlePreviewDestroy: (shouldReset?: boolean) => void,
    publishActiveAnnotationChangeInSidebar: (id: string | null) => void,
    publishAnnotationDelete: (
        id: string,
        action: typeof Action.DELETE_START | typeof Action.DELETE_END,
        origin: string
    ) => void,
    publishAnnotationDeleteEnd: (id: string, origin?: string) => void,
    publishAnnotationDeleteStart: (id: string, origin?: string) => void,
    publishAnnotationUpdate: (
        annotation: Object,
        action: Action,
        origin: string
    ) => void,
    publishAnnotationUpdateEnd: (annotation: Object, origin?: string) => void,
    publishAnnotationUpdateStart: (annotation: Object, origin?: string) => void,
    ...
};
export type WithAnnotationsProps = {
    location?: Location,
    onAnnotator: (annotator: Annotator) => void,
    onError?: (
        error: Error,
        code: string,
        contextInfo?: { [key: string]: mixed, ... }
    ) => void,
    onPreviewDestroy: (shouldReset?: boolean) => void,
    ...
};
export type WithAnnotationsComponent<P> = React.ComponentClass<
    P & WithAnnotationsProps
    >;
declare var ANNOTATIONS_PATH: any; // "/:sidebar/annotations/:fileVersionId/:annotationId?"
declare var defaultState: AnnotatorState;
declare export default function withAnnotations<P: { [key: string]: any }>(
    WrappedComponent: React.ComponentType<P>
): WithAnnotationsComponent<P>;
