// @flow
import * as React from 'react';
import type { Node } from 'react';
import { useIntl } from 'react-intl';
import { Archive, FolderArchive } from '@box/blueprint-web-assets/icons/Content';
import FileIcon from '../../../icons/file-icon/FileIcon';
import FolderIcon from '../../../icons/folder-icon/FolderIcon';
import BookmarkIcon from '../../../icons/bookmark-icon/BookmarkIcon';
import messages from '../messages';
import {
    ITEM_TYPE_FILE,
    ITEM_TYPE_FOLDER,
    ITEM_TYPE_WEBLINK,
} from '../../../common/constants';

import './IconCell.scss';

type Props = {|
    rowData: {|
        type: string,
        extension?: string,
        has_collaborations?: boolean,
        is_externally_owned?: boolean,
        archive_type?: string,
    |},
    dimension?: number,
|};

const IconCell = ({ rowData, dimension }: Props): Node => {
    const { formatMessage } = useIntl();
    const { type, extension, has_collaborations, is_externally_owned, archive_type } = rowData;

    switch (type) {
        case ITEM_TYPE_FILE:
            return (
                <FileIcon
                    aria-label={formatMessage(messages.file)}
                    dimension={dimension}
                    extension={extension}
                    title={formatMessage(messages.file)}
                />
            );
        case ITEM_TYPE_WEBLINK:
            return (
                <BookmarkIcon
                    aria-label={formatMessage(messages.bookmark)}
                    className="icon-bookmark"
                    height={dimension}
                    title={formatMessage(messages.bookmark)}
                    width={dimension}
                />
            );
        case ITEM_TYPE_FOLDER: {
            if (archive_type === 'folder_archive') {
                return (
                    <FolderArchive
                        width={dimension}
                        height={dimension}
                        role="img"
                        aria-label={formatMessage(messages.archivedFolder)}
                    />
                );
            }

            if (archive_type === 'archive') {
                return (
                    <Archive
                        width={dimension}
                        height={dimension}
                        role="img"
                        aria-label={formatMessage(messages.archive)}
                    />
                );
            }

            let title: string = formatMessage(
                is_externally_owned
                    ? messages.externalFolder
                    : has_collaborations
                    ? messages.collaboratedFolder
                    : messages.personalFolder,
            );

            return (
                <FolderIcon
                    dimension={dimension}
                    role="img"
                    title={title}
                    aria-label={title}
                    isExternal={is_externally_owned}
                    isCollab={has_collaborations}
                />
            );
        }
        default:
            return <FileIcon dimension={dimension} title={formatMessage(messages.file)} />;
    }
};

export default IconCell;
