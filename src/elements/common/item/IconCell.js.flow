import * as React from 'react';
import { injectIntl } from 'react-intl';
import { Archive, FolderArchive } from '@box/blueprint-web-assets/icons/Content';
import FileIcon from '../../../icons/file-icon/FileIcon';
import FolderIcon from '../../../icons/folder-icon/FolderIcon';
import BookmarkIcon from '../../../icons/bookmark-icon/BookmarkIcon';
import PersonalIcon from '../../../icons/folder-icon/PersonalIcon';
import ExternalIcon from '../../../icons/folder-icon/ExternalIcon';
import messages from '../messages';
import {
    TYPE_FILE,
    TYPE_FOLDER,
    TYPE_WEBLINK,
} from '../../../common/constants';

import './IconCell.scss';

type Props = {
    intl: Object,
    rowData: {
        type: string,
        extension?: string,
        has_collaborations?: boolean,
        is_externally_owned?: boolean,
        archive_type?: string,
    },
    dimension?: number,
};

const IconCell = ({ intl, rowData, dimension }: Props) => {
    const { type, extension, has_collaborations, is_externally_owned, archive_type } = rowData;
    const { formatMessage } = intl;

    switch (type) {
        case TYPE_FILE:
            return (
                <FileIcon
                    aria-label={formatMessage(messages.file)}
                    dimension={dimension}
                    extension={extension}
                />
            );
        case TYPE_WEBLINK:
            return (
                <BookmarkIcon
                    aria-label={formatMessage(messages.bookmark)}
                    dimension={dimension}
                />
            );
        case TYPE_FOLDER:
            if (archive_type) {
                return (
                    <Archive
                        aria-label={formatMessage(messages.archive)}
                        dimension={dimension}
                    />
                );
            }

            if (is_externally_owned) {
                return (
                    <ExternalIcon
                        aria-label={formatMessage(messages.externalFolder)}
                        dimension={dimension}
                    />
                );
            }

            if (has_collaborations) {
                return (
                    <FolderIcon
                        aria-label={formatMessage(messages.collaboratedFolder)}
                        dimension={dimension}
                    />
                );
            }

            return (
                <PersonalIcon
                    aria-label={formatMessage(messages.personalFolder)}
                    dimension={dimension}
                />
            );
        default:
            return <FileIcon dimension={dimension} />;
    }
};

export { IconCell as IconCellBase };
export default injectIntl(IconCell);
