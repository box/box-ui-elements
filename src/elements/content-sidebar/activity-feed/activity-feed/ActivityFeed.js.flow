/**
 * Flowtype definitions for ActivityFeed
 * Generated by Flowgen from a Typescript Definition
 */

import * as React from 'react';
import type {
    Annotation,
    AnnotationPermission,
    BoxCommentPermission,
    Comment,
    CommentFeedItemType,
    FeedItemStatus,
    FeedItems,
    FocusableFeedItemType,
    Task,
} from '../../../../common/types/feed';
import type { SelectorItems, User, GroupMini, BoxItem } from '../../../../common/types/core';
import type { Errors, GetAvatarUrlCallback, GetProfileUrlCallback } from '../../../common/flowTypes';
import type { Translations } from '../../flowTypes';
import type { OnAnnotationEdit, OnAnnotationStatusChange } from '../comment/types';

declare export type ActivityFeedProps = {
    activeFeedEntryId?: string,
    activeFeedEntryType?: FocusableFeedItemType,
    activityFeedError: ?Errors,
    approverSelectorContacts?: SelectorItems<>,
    contactsLoaded?: boolean,
    currentUser?: User,
    currentUserError?: Errors,
    feedItems?: FeedItems,
    file: BoxItem,
    getApproverWithQuery?: Function,
    getAvatarUrl: GetAvatarUrlCallback,
    getMentionWithQuery?: Function,
    getUserProfileUrl?: GetProfileUrlCallback,
    hasNewThreadedReplies?: boolean,
    hasReplies?: boolean,
    hasVersions?: boolean,
    isDisabled?: boolean,
    mentionSelectorContacts?: SelectorItems<>,
    onAnnotationDelete?: ({ id: string, permissions: AnnotationPermission }) => void,
    onAnnotationEdit?: OnAnnotationEdit,
    onAnnotationSelect?: (annotation: Annotation) => void,
    onAnnotationStatusChange?: OnAnnotationStatusChange,
    onAppActivityDelete?: Function,
    onCommentCreate?: Function,
    onCommentDelete?: Function,
    onCommentUpdate?: Function,
    onHideReplies?: (id: string, replies: Array<Comment>) => void,
    onReplyCreate?: (parentId: string, parentType: CommentFeedItemType, text: string) => void,
    onReplyDelete?: ({ id: string, parentId: string, permissions: BoxCommentPermission }) => void,
    onReplyUpdate?: (
        id: string,
        parentId: string,
        text: string,
        permissions: BoxCommentPermission,
        onSuccess: ?Function,
        onError: ?Function,
    ) => void,
    onShowReplies?: (id: string, type: CommentFeedItemType) => void,
    onTaskAssignmentUpdate?: Function,
    onTaskCreate?: Function,
    onTaskDelete?: Function,
    onTaskModalClose?: Function,
    onTaskUpdate?: Function,
    onTaskView?: Function,
    onVersionHistoryClick?: Function,
    shouldUseUAA?: boolean,
    translations?: Translations,
};

declare export default React.ComponentType<ActivityFeedProps>;
