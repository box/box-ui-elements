{"version":3,"file":"TextInput.js","names":["React","classNames","uniqueId","IconVerified","Label","LoadingIndicator","Tooltip","TextInput","_ref","className","description","error","errorPosition","hideLabel","hideOptionalLabel","icon","inputRef","isLoading","isRequired","isValid","label","labelTooltip","tooltipTetherClassName","rest","_objectWithoutProperties","_excluded","hasError","classes","descriptionID","useRef","current","ariaAttrs","undefined","createElement","showOptionalText","text","tooltip","id","isShown","position","tetherElementClassName","theme","_extends","ref","required","displayName"],"sources":["../../../src/components/text-input/TextInput.js"],"sourcesContent":["// @flow\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport uniqueId from 'lodash/uniqueId';\n\nimport IconVerified from '../../icons/general/IconVerified';\n\nimport Label from '../label';\nimport LoadingIndicator from '../loading-indicator';\nimport Tooltip from '../tooltip';\nimport type { Position } from '../tooltip';\n\nimport './TextInput.scss';\n\ntype Props = {\n    /** Add a class to the component */\n    className?: string,\n    description?: React.Node,\n    error?: React.Node,\n    /** Renders error tooltip at the specified position (positions are those from Tooltip) */\n    errorPosition?: Position,\n    /** Hides the label */\n    hideLabel?: boolean,\n    /** Hides (optional) text from the label */\n    hideOptionalLabel?: boolean,\n    /** Icon to display in the input field */\n    icon?: React.Node,\n    inputRef?: Function, // @TODO: eventually rename to innerRef for consistancy across all form elements\n    /** Renders a loading indicator within the component when true */\n    isLoading?: boolean,\n    /** Makes the input value required */\n    isRequired?: boolean,\n    /** Renders a green verified checkmark within the component when true */\n    isValid?: boolean,\n    /** Label displayed for the text input */\n    label: React.Node,\n    labelTooltip?: React.Node,\n    /** A CSS class for the tooltip's tether element component */\n    tooltipTetherClassName?: string,\n};\n\nconst TextInput = ({\n    className = '',\n    description,\n    error,\n    errorPosition,\n    hideLabel,\n    hideOptionalLabel,\n    icon,\n    inputRef,\n    isLoading,\n    isRequired,\n    isValid,\n    label,\n    labelTooltip,\n    tooltipTetherClassName,\n    ...rest\n}: Props) => {\n    const hasError = !!error;\n    const classes = classNames(className, 'text-input-container', {\n        'show-error': hasError,\n    });\n\n    const descriptionID = React.useRef(uniqueId('description')).current;\n\n    const ariaAttrs = {\n        'aria-invalid': hasError,\n        'aria-required': isRequired,\n        'aria-describedby': description ? descriptionID : undefined,\n    };\n\n    return (\n        <div className={classes}>\n            <Label\n                hideLabel={hideLabel}\n                showOptionalText={!hideOptionalLabel && !isRequired}\n                text={label}\n                tooltip={labelTooltip}\n            >\n                {!!description && (\n                    <div id={descriptionID} className=\"text-input-description\">\n                        {description}\n                    </div>\n                )}\n                <Tooltip\n                    isShown={hasError}\n                    position={errorPosition || 'middle-right'}\n                    tetherElementClassName={tooltipTetherClassName}\n                    text={error || ''}\n                    theme=\"error\"\n                >\n                    <input ref={inputRef} required={isRequired} {...ariaAttrs} {...rest} />\n                </Tooltip>\n                {isLoading && !isValid && <LoadingIndicator className=\"text-input-loading\" />}\n                {isValid && !isLoading && <IconVerified className=\"text-input-verified\" />}\n                {!isLoading && !isValid && icon ? icon : null}\n            </Label>\n        </div>\n    );\n};\n\nTextInput.displayName = 'TextInput';\n\nexport type TextInputProps = Props;\nexport default TextInput;\n"],"mappings":";;;;AACA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,OAAOC,UAAU,MAAM,YAAY;AACnC,OAAOC,QAAQ,MAAM,iBAAiB;AAEtC,OAAOC,YAAY,MAAM,kCAAkC;AAE3D,OAAOC,KAAK,MAAM,UAAU;AAC5B,OAAOC,gBAAgB,MAAM,sBAAsB;AACnD,OAAOC,OAAO,MAAM,YAAY;AAGhC,OAAO,kBAAkB;AA6BzB,MAAMC,SAAS,GAAGC,IAAA,IAgBL;EAAA,IAhBM;MACfC,SAAS,GAAG,EAAE;MACdC,WAAW;MACXC,KAAK;MACLC,aAAa;MACbC,SAAS;MACTC,iBAAiB;MACjBC,IAAI;MACJC,QAAQ;MACRC,SAAS;MACTC,UAAU;MACVC,OAAO;MACPC,KAAK;MACLC,YAAY;MACZC;IAEG,CAAC,GAAAd,IAAA;IADDe,IAAI,GAAAC,wBAAA,CAAAhB,IAAA,EAAAiB,SAAA;EAEP,MAAMC,QAAQ,GAAG,CAAC,CAACf,KAAK;EACxB,MAAMgB,OAAO,GAAG1B,UAAU,CAACQ,SAAS,EAAE,sBAAsB,EAAE;IAC1D,YAAY,EAAEiB;EAClB,CAAC,CAAC;EAEF,MAAME,aAAa,GAAG5B,KAAK,CAAC6B,MAAM,CAAC3B,QAAQ,CAAC,aAAa,CAAC,CAAC,CAAC4B,OAAO;EAEnE,MAAMC,SAAS,GAAG;IACd,cAAc,EAAEL,QAAQ;IACxB,eAAe,EAAER,UAAU;IAC3B,kBAAkB,EAAER,WAAW,GAAGkB,aAAa,GAAGI;EACtD,CAAC;EAED,oBACIhC,KAAA,CAAAiC,aAAA;IAAKxB,SAAS,EAAEkB;EAAQ,gBACpB3B,KAAA,CAAAiC,aAAA,CAAC7B,KAAK;IACFS,SAAS,EAAEA,SAAU;IACrBqB,gBAAgB,EAAE,CAACpB,iBAAiB,IAAI,CAACI,UAAW;IACpDiB,IAAI,EAAEf,KAAM;IACZgB,OAAO,EAAEf;EAAa,GAErB,CAAC,CAACX,WAAW,iBACVV,KAAA,CAAAiC,aAAA;IAAKI,EAAE,EAAET,aAAc;IAACnB,SAAS,EAAC;EAAwB,GACrDC,WACA,CACR,eACDV,KAAA,CAAAiC,aAAA,CAAC3B,OAAO;IACJgC,OAAO,EAAEZ,QAAS;IAClBa,QAAQ,EAAE3B,aAAa,IAAI,cAAe;IAC1C4B,sBAAsB,EAAElB,sBAAuB;IAC/Ca,IAAI,EAAExB,KAAK,IAAI,EAAG;IAClB8B,KAAK,EAAC;EAAO,gBAEbzC,KAAA,CAAAiC,aAAA,UAAAS,QAAA;IAAOC,GAAG,EAAE3B,QAAS;IAAC4B,QAAQ,EAAE1B;EAAW,GAAKa,SAAS,EAAMR,IAAI,CAAG,CACjE,CAAC,EACTN,SAAS,IAAI,CAACE,OAAO,iBAAInB,KAAA,CAAAiC,aAAA,CAAC5B,gBAAgB;IAACI,SAAS,EAAC;EAAoB,CAAE,CAAC,EAC5EU,OAAO,IAAI,CAACF,SAAS,iBAAIjB,KAAA,CAAAiC,aAAA,CAAC9B,YAAY;IAACM,SAAS,EAAC;EAAqB,CAAE,CAAC,EACzE,CAACQ,SAAS,IAAI,CAACE,OAAO,IAAIJ,IAAI,GAAGA,IAAI,GAAG,IACtC,CACN,CAAC;AAEd,CAAC;AAEDR,SAAS,CAACsC,WAAW,GAAG,WAAW;AAGnC,eAAetC,SAAS","ignoreList":[]}