{"version":3,"file":"Toggle.js","names":["React","classNames","Toggle","forwardRef","_ref","ref","className","dataTargetId","description","isDisabled","isOn","isToggleRightAligned","label","name","onBlur","onChange","onFocus","onMouseEnter","onMouseLeave","rest","_objectWithoutProperties","_excluded","classes","toggleElements","createElement","key","reverse","_extends","checked","disabled","role","type","displayName"],"sources":["../../../src/components/toggle/Toggle.js"],"sourcesContent":["// @flow\nimport * as React from 'react';\nimport classNames from 'classnames';\n\nimport './Toggle.scss';\n\ntype Props = {\n    className?: string,\n    /** Optional attribute used for targeting */\n    'data-target-id'?: string,\n    /** Description of the input */\n    description?: React.Node,\n    isDisabled?: boolean, // @TODO: eventually call this `disabled`\n    /** Toggle state */\n    isOn?: boolean, // @TODO: eventually call this `checked`\n    /** If set to true, the toggle will be aligned to the right */\n    isToggleRightAligned?: boolean,\n    /** Label displayed for the input */\n    label: React.Node,\n    /** Name of the input */\n    name?: string,\n    /** blur callback function called with event as the argument */\n    onBlur?: (e: SyntheticInputEvent<HTMLInputElement>) => any,\n    /** change callback function called with event as the argument */\n    onChange?: (e: SyntheticInputEvent<HTMLInputElement>) => any,\n    /** focus callback function called with event as the argument */\n    onFocus?: (e: SyntheticInputEvent<HTMLInputElement>) => any,\n    /** mouse enter callback function called with event as the argument */\n    onMouseEnter?: (e: SyntheticInputEvent<HTMLDivElement>) => any,\n    /** mouse leave callback function called with event as the argument */\n    onMouseLeave?: (e: SyntheticInputEvent<HTMLDivElement>) => any,\n    /** optional value for the toggles checkbox */\n    value?: any,\n};\n\nconst Toggle = React.forwardRef<Props, HTMLInputElement>(\n    (\n        {\n            className = '',\n            'data-target-id': dataTargetId,\n            description,\n            isDisabled,\n            isOn,\n            isToggleRightAligned = false,\n            label,\n            name,\n            onBlur,\n            onChange,\n            onFocus,\n            onMouseEnter,\n            onMouseLeave,\n            ...rest\n        }: Props,\n        ref,\n    ) => {\n        const classes = classNames('toggle-container', className, {\n            'is-toggle-right-aligned': isToggleRightAligned,\n        });\n\n        const toggleElements = [\n            <div key=\"toggle-simple-switch\" className=\"toggle-simple-switch\" />,\n            <div key=\"toggle-simple-label\" className=\"toggle-simple-label\">\n                {label}\n            </div>,\n        ];\n        if (isToggleRightAligned) {\n            toggleElements.reverse();\n        }\n\n        return (\n            <div className={classes} onMouseEnter={onMouseEnter} onMouseLeave={onMouseLeave}>\n                {/* eslint-disable-next-line jsx-a11y/label-has-for */}\n                <label className=\"toggle-simple\" data-target-id={dataTargetId}>\n                    <input\n                        checked={isOn}\n                        className=\"toggle-simple-input\"\n                        disabled={isDisabled}\n                        name={name}\n                        onBlur={onBlur}\n                        onChange={onChange}\n                        onFocus={onFocus}\n                        ref={ref}\n                        role=\"switch\"\n                        type=\"checkbox\"\n                        {...rest}\n                    />\n                    {toggleElements}\n                </label>\n                {description ? <div className=\"toggle-simple-description\">{description}</div> : null}\n            </div>\n        );\n    },\n);\nToggle.displayName = 'Toggle';\n\nexport type ToggleProps = Props;\nexport default Toggle;\n"],"mappings":";;;;AACA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,OAAOC,UAAU,MAAM,YAAY;AAEnC,OAAO,eAAe;AA+BtB,MAAMC,MAAM,gBAAGF,KAAK,CAACG,UAAU,CAC3B,CAAAC,IAAA,EAiBIC,GAAG,KACF;EAAA,IAjBD;MACIC,SAAS,GAAG,EAAE;MACd,gBAAgB,EAAEC,YAAY;MAC9BC,WAAW;MACXC,UAAU;MACVC,IAAI;MACJC,oBAAoB,GAAG,KAAK;MAC5BC,KAAK;MACLC,IAAI;MACJC,MAAM;MACNC,QAAQ;MACRC,OAAO;MACPC,YAAY;MACZC;IAEG,CAAC,GAAAd,IAAA;IADDe,IAAI,GAAAC,wBAAA,CAAAhB,IAAA,EAAAiB,SAAA;EAIX,MAAMC,OAAO,GAAGrB,UAAU,CAAC,kBAAkB,EAAEK,SAAS,EAAE;IACtD,yBAAyB,EAAEK;EAC/B,CAAC,CAAC;EAEF,MAAMY,cAAc,GAAG,cACnBvB,KAAA,CAAAwB,aAAA;IAAKC,GAAG,EAAC,sBAAsB;IAACnB,SAAS,EAAC;EAAsB,CAAE,CAAC,eACnEN,KAAA,CAAAwB,aAAA;IAAKC,GAAG,EAAC,qBAAqB;IAACnB,SAAS,EAAC;EAAqB,GACzDM,KACA,CAAC,CACT;EACD,IAAID,oBAAoB,EAAE;IACtBY,cAAc,CAACG,OAAO,CAAC,CAAC;EAC5B;EAEA,oBACI1B,KAAA,CAAAwB,aAAA;IAAKlB,SAAS,EAAEgB,OAAQ;IAACL,YAAY,EAAEA,YAAa;IAACC,YAAY,EAAEA;EAAa,gBAE5ElB,KAAA,CAAAwB,aAAA;IAAOlB,SAAS,EAAC,eAAe;IAAC,kBAAgBC;EAAa,gBAC1DP,KAAA,CAAAwB,aAAA,UAAAG,QAAA;IACIC,OAAO,EAAElB,IAAK;IACdJ,SAAS,EAAC,qBAAqB;IAC/BuB,QAAQ,EAAEpB,UAAW;IACrBI,IAAI,EAAEA,IAAK;IACXC,MAAM,EAAEA,MAAO;IACfC,QAAQ,EAAEA,QAAS;IACnBC,OAAO,EAAEA,OAAQ;IACjBX,GAAG,EAAEA,GAAI;IACTyB,IAAI,EAAC,QAAQ;IACbC,IAAI,EAAC;EAAU,GACXZ,IAAI,CACX,CAAC,EACDI,cACE,CAAC,EACPf,WAAW,gBAAGR,KAAA,CAAAwB,aAAA;IAAKlB,SAAS,EAAC;EAA2B,GAAEE,WAAiB,CAAC,GAAG,IAC/E,CAAC;AAEd,CACJ,CAAC;AACDN,MAAM,CAAC8B,WAAW,GAAG,QAAQ;AAG7B,eAAe9B,MAAM","ignoreList":[]}