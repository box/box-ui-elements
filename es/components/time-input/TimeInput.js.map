{"version":3,"file":"TimeInput.js","names":["React","classnames","debounce","defineMessages","injectIntl","FormattedMessage","TooltipPosition","parseTimeFromString","TextInput","ClockBadge16","DEFAULT_FORMAT_DEBOUNCE","messages","invalidTimeError","emptyTimeError","TimeInput","className","errorTooltipPosition","MIDDLE_RIGHT","hideLabel","initialDate","innerRef","intl","isRequired","label","onBlur","onChange","onError","displayTime","setDisplayTime","useState","formatTime","error","setError","undefined","formatDisplayTime","latestValue","hours","parsedHours","minutes","parsedMinutes","date","Date","setHours","setMinutes","newDisplayTime","e","errorMessage","updatedError","createElement","debouncedFormatDisplayTime","useCallback","handleChange","event","target","value","updatedValue","handleBlur","icon","inputRef","position","type","TimeInputComponent"],"sources":["../../../src/components/time-input/TimeInput.tsx"],"sourcesContent":["import * as React from 'react';\nimport classnames from 'classnames';\nimport debounce from 'lodash/debounce';\nimport { defineMessages, injectIntl, FormattedMessage, WrappedComponentProps } from 'react-intl';\nimport { TooltipPosition } from '../tooltip';\nimport { parseTimeFromString } from './TimeInputUtils';\n// @ts-ignore flow import\nimport TextInput from '../text-input';\nimport ClockBadge16 from '../../icon/line/ClockBadge16';\n// @ts-ignore flow import\nimport { DEFAULT_FORMAT_DEBOUNCE } from '../../constants';\n\nimport './TimeInput.scss';\n\nconst messages = defineMessages({\n    invalidTimeError: {\n        defaultMessage: 'Invalid time format. Enter a time in the format HH:MM A.',\n        description: 'Error message for invalid time formats. \"HH:MM A\" should be localized.',\n        id: 'boxui.timeInput.invalidTimeError',\n    },\n    emptyTimeError: {\n        defaultMessage: 'Required field. Enter a time in the format HH:MM A.',\n        description: 'Error message for empty time formats. \"HH:MM A\" should be localized.',\n        id: 'boxui.timeInput.emptyTimeError',\n    },\n});\n\ntype TimeInputEventHandler = ({\n    displayTime,\n    hours,\n    minutes,\n}: {\n    displayTime: string;\n    hours: number;\n    minutes: number;\n}) => void;\nexport interface TimeInputProps extends WrappedComponentProps {\n    /** className - CSS class for the component */\n    className?: string;\n    /** errorTooltipPosition - Position for the error tooltip */\n    errorTooltipPosition?: TooltipPosition;\n    /** hideLabel - Whether the label should be hidden */\n    hideLabel?: boolean;\n    /** label - Label for the time input */\n    label?: React.ReactNode;\n    /** initialDate - Date object for initializing the time input */\n    initialDate?: Date;\n    /** innerRef - Ref for the time input */\n    innerRef?: React.Ref<HTMLInputElement>;\n    /** isRequired - Whether the time input is required */\n    isRequired?: boolean;\n    /**\n     * onBlur - Function to call when the user blurs out of the time input\n     * The parsed display time, along with the hours and minutes in 24-hour format, will be passed to the handler.\n     */\n    onBlur?: TimeInputEventHandler;\n    /**\n     * onChange - Function to call when the user changes the value of the time input\n     * The parsed display time, along with the hours and minutes in 24-hour format, will be passed to the handler.\n     */\n    onChange?: TimeInputEventHandler;\n    onError?: (error: React.ReactNode) => void;\n}\n\nconst TimeInput = ({\n    className,\n    errorTooltipPosition = TooltipPosition.MIDDLE_RIGHT,\n    hideLabel = true,\n    initialDate,\n    innerRef,\n    intl,\n    isRequired = true,\n    label,\n    onBlur,\n    onChange,\n    onError,\n}: TimeInputProps) => {\n    const [displayTime, setDisplayTime] = React.useState<string>(initialDate ? intl.formatTime(initialDate) : '');\n    const [error, setError] = React.useState<React.ReactElement | undefined>(undefined);\n\n    /**\n     * Handle blur events.\n     * Parse and reformat the current display time (as entered by the user).\n     * @param latestValue - string\n     * @returns\n     */\n    const formatDisplayTime = (latestValue: string = displayTime) => {\n        try {\n            const { hours: parsedHours, minutes: parsedMinutes } = parseTimeFromString(latestValue, isRequired);\n            const date = new Date();\n            date.setHours(parsedHours);\n            date.setMinutes(parsedMinutes);\n            const newDisplayTime = intl.formatTime(date);\n            setDisplayTime(newDisplayTime);\n            if (onBlur) onBlur({ displayTime: newDisplayTime, hours: parsedHours, minutes: parsedMinutes });\n            if (onChange) onChange({ displayTime: newDisplayTime, hours: parsedHours, minutes: parsedMinutes });\n        } catch (e) {\n            const errorMessage = latestValue ? messages.invalidTimeError : messages.emptyTimeError;\n            const updatedError = <FormattedMessage {...errorMessage} />;\n            setError(updatedError);\n            if (onError) onError(updatedError);\n        }\n    };\n\n    /**\n     * Debounce formatDisplayTime() for use in handleChange().\n     * useCallback() memoizes the debounced function, so that the debounced function\n     * is not recreated on every re-render triggered by handleChange().\n     */\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    const debouncedFormatDisplayTime = React.useCallback(\n        debounce((latestValue: string) => formatDisplayTime(latestValue), DEFAULT_FORMAT_DEBOUNCE),\n        [],\n    );\n\n    /**\n     * Handle change events.\n     * Clear errors, update the value of the display time to match what the user typed,\n     * and call the debounced version of formatDisplayTime().\n     * @param event - ChangeEvent\n     */\n    const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const {\n            target: { value: updatedValue },\n        } = event;\n        setDisplayTime(updatedValue);\n        if (error) setError(undefined);\n        debouncedFormatDisplayTime(updatedValue);\n    };\n\n    /**\n     * Handle blur events.\n     */\n    const handleBlur = () => {\n        formatDisplayTime(displayTime);\n    };\n\n    return (\n        <TextInput\n            className={classnames('bdl-TimeInput', className)}\n            error={error}\n            hideLabel={hideLabel}\n            icon={<ClockBadge16 className=\"bdl-TimeInput-icon\" />}\n            inputRef={innerRef}\n            isRequired={isRequired}\n            label={label}\n            onBlur={handleBlur}\n            onChange={handleChange}\n            position={errorTooltipPosition}\n            type=\"text\"\n            value={displayTime}\n        />\n    );\n};\n\nexport { TimeInput as TimeInputComponent };\nexport default injectIntl(TimeInput);\n"],"mappings":"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","ignoreList":[]}