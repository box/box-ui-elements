{"version":3,"file":"TimeInputUtils.js","names":["VALID_TIME_REGEX","AM_REGEX","PM_REGEX","NUMBER_REGEX","TWELVE_HOURS","SIXTY_MINUTES","DEFAULT_PARSED_TIME","hours","minutes","VALID_NUMBER_COUNT","isValidTime","input","test","parseTimeFromString","isRequired","SyntaxError","timeArray","match","length","hasAMNotation","hasPMNotation","numericMinutes","parseInt","numericHours"],"sources":["../../../src/components/time-input/TimeInputUtils.ts"],"sourcesContent":["const VALID_TIME_REGEX = /[\\u4e0a\\u4e0b\\uc624]?[\\u5348\\ud6c4\\uc804]?[0-9]{1,2}.?.?.?[0-9]{0,2}\\s?[AaPp\\u03C0\\u03BC]?\\.?\\s?[Mm\\u03BC]?/;\nconst AM_REGEX = /[Aa\\u4e0a\\u03C0\\uc624]\\.?\\s?[Mm\\u5348\\ud6c4\\u03BC\\uc804]/;\nconst PM_REGEX = /[Pp\\u4e0b\\uc624\\u03BC]\\.?\\s?[Mm\\u5348\\ud6c4\\u03BC]/;\nconst NUMBER_REGEX = /[0-9]{1,2}/g;\nconst TWELVE_HOURS = 12;\nconst SIXTY_MINUTES = 60;\nconst DEFAULT_PARSED_TIME = { hours: 0, minutes: 0 };\nconst VALID_NUMBER_COUNT = 2;\n\n/**\n * Check that the input string is in a valid time format\n * @param input - input string to test\n * @returns\n */\nexport const isValidTime = (input?: string): boolean => {\n    return !!input && VALID_TIME_REGEX.test(input);\n};\n\n/**\n * Parse an input string and convert it into an object containing numerical hours and minutes.\n * @param input - input string to be converted\n * @param isRequired - whether the input is required\n * @returns\n */\nexport const parseTimeFromString = (input?: string, isRequired?: boolean): { hours: number; minutes: number } => {\n    // Return the default time (midnight) if the input is empty, but not required\n    if (!input && !isRequired) return DEFAULT_PARSED_TIME;\n\n    // Throw an error if the input is empty and required, or if the input fails the initial regex\n    if (!input || !isValidTime(input)) {\n        throw new SyntaxError();\n    }\n\n    // Throw an error if the input contains more than four numbers\n    const timeArray = input.match(NUMBER_REGEX);\n    if (!timeArray || !timeArray.length) return DEFAULT_PARSED_TIME;\n    if (timeArray.length > VALID_NUMBER_COUNT) {\n        throw new SyntaxError();\n    }\n\n    // If there are three numbers total, the regex match will split them\n    // unevenly, loading two numbers for the hours value and one for the\n    // minutes value. For instance, \"305\" would be split into [\"30\", \"5\"].\n    // This should be [\"3\", \"05\"] instead, so we will move the second\n    // number in the hours value to the beginning of the minutes value.\n    const hasAMNotation = AM_REGEX.test(input);\n    const hasPMNotation = PM_REGEX.test(input);\n    let [hours, minutes] = timeArray;\n    if (hours && minutes && hours.length === 2 && minutes.length === 1) {\n        minutes = hours[1] + minutes;\n        hours = hours[0];\n    }\n\n    // Convert the minutes value into an integer\n    const numericMinutes = minutes ? parseInt(minutes, 10) : 0;\n\n    // Set the hours to \"0\" if the input translates to midnight\n    // Convert the hours to 24-hour format if this is a PM time\n    let numericHours = parseInt(hours, 10);\n    if (hasAMNotation && numericHours === TWELVE_HOURS) {\n        numericHours = 0;\n    } else if (hasPMNotation && numericHours < TWELVE_HOURS) {\n        numericHours += TWELVE_HOURS;\n    }\n\n    // Throw an error if the hours or minutes are out of range\n    if (numericHours > TWELVE_HOURS * 2 || numericMinutes >= SIXTY_MINUTES) {\n        throw new SyntaxError();\n    }\n\n    return {\n        hours: numericHours,\n        minutes: numericMinutes,\n    };\n};\n"],"mappings":"AAAA,MAAMA,gBAAgB,GAAG,6GAA6G;AACtI,MAAMC,QAAQ,GAAG,0DAA0D;AAC3E,MAAMC,QAAQ,GAAG,oDAAoD;AACrE,MAAMC,YAAY,GAAG,aAAa;AAClC,MAAMC,YAAY,GAAG,EAAE;AACvB,MAAMC,aAAa,GAAG,EAAE;AACxB,MAAMC,mBAAmB,GAAG;EAAEC,KAAK,EAAE,CAAC;EAAEC,OAAO,EAAE;AAAE,CAAC;AACpD,MAAMC,kBAAkB,GAAG,CAAC;;AAE5B;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,WAAW,GAAIC,KAAc,IAAc;EACpD,OAAO,CAAC,CAACA,KAAK,IAAIX,gBAAgB,CAACY,IAAI,CAACD,KAAK,CAAC;AAClD,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAME,mBAAmB,GAAGA,CAACF,KAAc,EAAEG,UAAoB,KAAyC;EAC7G;EACA,IAAI,CAACH,KAAK,IAAI,CAACG,UAAU,EAAE,OAAOR,mBAAmB;;EAErD;EACA,IAAI,CAACK,KAAK,IAAI,CAACD,WAAW,CAACC,KAAK,CAAC,EAAE;IAC/B,MAAM,IAAII,WAAW,CAAC,CAAC;EAC3B;;EAEA;EACA,MAAMC,SAAS,GAAGL,KAAK,CAACM,KAAK,CAACd,YAAY,CAAC;EAC3C,IAAI,CAACa,SAAS,IAAI,CAACA,SAAS,CAACE,MAAM,EAAE,OAAOZ,mBAAmB;EAC/D,IAAIU,SAAS,CAACE,MAAM,GAAGT,kBAAkB,EAAE;IACvC,MAAM,IAAIM,WAAW,CAAC,CAAC;EAC3B;;EAEA;EACA;EACA;EACA;EACA;EACA,MAAMI,aAAa,GAAGlB,QAAQ,CAACW,IAAI,CAACD,KAAK,CAAC;EAC1C,MAAMS,aAAa,GAAGlB,QAAQ,CAACU,IAAI,CAACD,KAAK,CAAC;EAC1C,IAAI,CAACJ,KAAK,EAAEC,OAAO,CAAC,GAAGQ,SAAS;EAChC,IAAIT,KAAK,IAAIC,OAAO,IAAID,KAAK,CAACW,MAAM,KAAK,CAAC,IAAIV,OAAO,CAACU,MAAM,KAAK,CAAC,EAAE;IAChEV,OAAO,GAAGD,KAAK,CAAC,CAAC,CAAC,GAAGC,OAAO;IAC5BD,KAAK,GAAGA,KAAK,CAAC,CAAC,CAAC;EACpB;;EAEA;EACA,MAAMc,cAAc,GAAGb,OAAO,GAAGc,QAAQ,CAACd,OAAO,EAAE,EAAE,CAAC,GAAG,CAAC;;EAE1D;EACA;EACA,IAAIe,YAAY,GAAGD,QAAQ,CAACf,KAAK,EAAE,EAAE,CAAC;EACtC,IAAIY,aAAa,IAAII,YAAY,KAAKnB,YAAY,EAAE;IAChDmB,YAAY,GAAG,CAAC;EACpB,CAAC,MAAM,IAAIH,aAAa,IAAIG,YAAY,GAAGnB,YAAY,EAAE;IACrDmB,YAAY,IAAInB,YAAY;EAChC;;EAEA;EACA,IAAImB,YAAY,GAAGnB,YAAY,GAAG,CAAC,IAAIiB,cAAc,IAAIhB,aAAa,EAAE;IACpE,MAAM,IAAIU,WAAW,CAAC,CAAC;EAC3B;EAEA,OAAO;IACHR,KAAK,EAAEgB,YAAY;IACnBf,OAAO,EAAEa;EACb,CAAC;AACL,CAAC","ignoreList":[]}