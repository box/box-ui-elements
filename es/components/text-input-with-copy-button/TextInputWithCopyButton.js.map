{"version":3,"file":"TextInputWithCopyButton.js","names":["React","classNames","omit","FormattedMessage","messages","TextInput","Button","DEFAULT_SUCCESS_STATE_DURATION","defaultCopyText","createElement","copy","defaultCopiedText","copied","TextInputWithCopyButton","PureComponent","constructor","props","_defineProperty","document","execCommand","setState","copySuccess","buttonText","buttonDefaultText","performAutofocus","copySelectedText","animateCopyButton","event","copyInputRef","onFocus","disabled","onCopySuccess","preventDefault","select","scrollLeft","isCopyCommandSupported","_extends","isDisabled","onClick","handleCopyButtonClick","type","buttonProps","state","queryCommandSupported","hasFocused","componentDidMount","autofocus","value","componentDidUpdate","triggerCopyOnLoad","componentWillUnmount","clearCopySuccessTimeout","successStateDuration","buttonSuccessText","copySuccessTimeout","setTimeout","restoreCopyButton","clearTimeout","render","_this$props","additionalButtons","className","rest","_objectWithoutProperties","_excluded","inputProps","inputRef","ref","wrapperClasses","copyEvent","onCopy","handleCopyEvent","handleFocus","renderCopyButton","hideOptionalLabel","readOnly"],"sources":["../../../src/components/text-input-with-copy-button/TextInputWithCopyButton.js"],"sourcesContent":["// @flow\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport omit from 'lodash/omit';\nimport { FormattedMessage } from 'react-intl';\n\nimport messages from '../../common/messages';\nimport TextInput from '../text-input';\nimport Button from '../button';\n\nimport './TextInputWithCopyButton.scss';\n\nconst DEFAULT_SUCCESS_STATE_DURATION = 3000;\n\nconst defaultCopyText = <FormattedMessage {...messages.copy} />;\nconst defaultCopiedText = <FormattedMessage {...messages.copied} />;\n\ntype Props = {\n    /** Array of nodes for additional buttons */\n    additionalButtons?: Array<React.Node>,\n    /** Set the focus to input when component loads */\n    autofocus?: boolean,\n    /** Default copy button text */\n    buttonDefaultText: string | React.Node,\n    /** Copy button text when copy is successful */\n    buttonProps?: Object,\n    buttonSuccessText?: string | React.Node,\n    className: string,\n    disabled?: boolean,\n    /** Label displayed for the text input */\n    // TODO: Make label required\n    label?: React.Node,\n    /** onFocus handler for the input el */\n    onCopySuccess?: Function,\n    /** Function called when link is copied by keyboard or button */\n    onFocus?: Function,\n    /** Duration (milliseconds) in which to show the copy success state */\n    successStateDuration: number,\n    /** trigger the copy animation when the component loads (used to simulate a click on copy button) */\n    triggerCopyOnLoad?: boolean,\n    /** html input types (email, url, text, number), defaults to 'text' */\n    type: string,\n    /** Value of the text input */\n    value: React.Node,\n};\n\ntype State = {\n    buttonText: string | React.Node,\n    copySuccess: boolean,\n    hasFocused: boolean,\n};\n\nclass TextInputWithCopyButton extends React.PureComponent<Props, State> {\n    static defaultProps = {\n        buttonDefaultText: defaultCopyText,\n        buttonProps: {},\n        buttonSuccessText: defaultCopiedText,\n        className: '',\n        hideOptionalLabel: true,\n        readOnly: true,\n        successStateDuration: DEFAULT_SUCCESS_STATE_DURATION,\n        type: 'text',\n    };\n\n    constructor(props: Props) {\n        super(props);\n\n        this.isCopyCommandSupported = document.queryCommandSupported('copy');\n\n        this.state = {\n            copySuccess: false,\n            buttonText: props.buttonDefaultText,\n            hasFocused: false,\n        };\n    }\n\n    componentDidMount() {\n        const { autofocus, value } = this.props;\n\n        if (autofocus && value) {\n            this.performAutofocus();\n        }\n    }\n\n    componentDidUpdate() {\n        const { autofocus, value, triggerCopyOnLoad } = this.props;\n        const { copySuccess, hasFocused } = this.state;\n\n        // if we've set focus before, and should auto focus on update, make sure to\n        // focus after component update\n        if (autofocus && value) {\n            this.performAutofocus();\n        }\n\n        if (triggerCopyOnLoad && !copySuccess && !hasFocused) {\n            this.animateCopyButton();\n        }\n    }\n\n    componentWillUnmount() {\n        this.clearCopySuccessTimeout();\n    }\n\n    copyInputRef: ?HTMLInputElement;\n\n    copySuccessTimeout: ?TimeoutID;\n\n    isCopyCommandSupported: boolean;\n\n    animateCopyButton() {\n        const { successStateDuration, buttonSuccessText } = this.props;\n        this.clearCopySuccessTimeout();\n\n        this.setState(\n            {\n                copySuccess: true,\n                buttonText: buttonSuccessText,\n                hasFocused: true,\n            },\n            () => {\n                this.copySuccessTimeout = setTimeout(() => {\n                    this.restoreCopyButton();\n                }, successStateDuration);\n            },\n        );\n    }\n\n    clearCopySuccessTimeout() {\n        if (!this.copySuccessTimeout) {\n            return;\n        }\n        clearTimeout(this.copySuccessTimeout);\n        this.copySuccessTimeout = null;\n    }\n\n    copySelectedText = () => document.execCommand('copy');\n\n    restoreCopyButton = () => {\n        this.setState({\n            copySuccess: false,\n            buttonText: this.props.buttonDefaultText,\n        });\n    };\n\n    handleCopyButtonClick = () => {\n        this.performAutofocus();\n        this.copySelectedText();\n        this.animateCopyButton();\n    };\n\n    handleFocus = (event: SyntheticEvent<>) => {\n        if (this.copyInputRef) {\n            this.performAutofocus();\n        }\n\n        if (this.props.onFocus) {\n            this.props.onFocus(event);\n        }\n    };\n\n    handleCopyEvent = (event: SyntheticEvent<>) => {\n        const { disabled, onCopySuccess } = this.props;\n\n        if (disabled) {\n            event.preventDefault();\n        } else {\n            this.animateCopyButton();\n\n            if (onCopySuccess) {\n                onCopySuccess(event);\n            }\n        }\n    };\n\n    performAutofocus = () => {\n        const { copyInputRef } = this;\n        if (copyInputRef) {\n            copyInputRef.select();\n            copyInputRef.scrollLeft = 0;\n        }\n    };\n\n    renderCopyButton = () =>\n        this.isCopyCommandSupported ? (\n            <Button\n                isDisabled={this.props.disabled}\n                onClick={this.handleCopyButtonClick}\n                type=\"button\"\n                {...this.props.buttonProps}\n            >\n                {this.state.buttonText}\n            </Button>\n        ) : null;\n\n    render() {\n        const { additionalButtons, className, ...rest } = this.props;\n        const { copySuccess } = this.state;\n        const { isCopyCommandSupported } = this;\n\n        const inputProps = omit(rest, [\n            'autofocus',\n            'buttonDefaultText',\n            'buttonSuccessText',\n            'buttonProps',\n            'onCopySuccess',\n            'successStateDuration',\n            'triggerCopyOnLoad',\n        ]);\n\n        if (isCopyCommandSupported) {\n            inputProps.inputRef = ref => {\n                this.copyInputRef = ref;\n            };\n        }\n\n        const wrapperClasses = classNames(className, {\n            'copy-success': copySuccess,\n            'text-input-with-copy-button-container': isCopyCommandSupported,\n        });\n\n        const copyEvent = isCopyCommandSupported ? { onCopy: this.handleCopyEvent } : {};\n\n        return (\n            <div className={wrapperClasses} {...copyEvent}>\n                <TextInput {...inputProps} onFocus={this.handleFocus} />\n                {additionalButtons}\n                {this.renderCopyButton()}\n            </div>\n        );\n    }\n}\n\nexport default TextInputWithCopyButton;\n"],"mappings":"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","ignoreList":[]}