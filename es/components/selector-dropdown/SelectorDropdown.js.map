{"version":3,"file":"SelectorDropdown.js","names":["React","classNames","uniqueId","scrollIntoView","PopperComponent","PLACEMENT_BOTTOM_START","ScrollWrapper","OVERLAY_WRAPPER_CLASS","stopDefaultEvent","event","preventDefault","stopPropagation","SelectorDropdown","Component","constructor","props","_defineProperty","index","setState","activeItemIndex","setActiveItemID","id","scrollBoundarySelector","itemEl","document","getElementById","scrollOptions","block","boundary","querySelector","activeItemID","prevChildren","children","childrenCount","Children","count","prevChildrenCount","childrenKeys","map","child","key","prevChildrenKeys","some","childKey","openDropdown","container","selectorDropdownRef","current","isInside","target","Node","contains","closeDropdown","isAlwaysOpen","onEnter","state","isDropdownOpen","nextIndex","setActiveItem","prevIndex","selectItem","resetActiveItem","handleInput","shouldOpen","shouldSetActiveItemOnOpen","addEventListener","handleDocumentClick","removeEventListener","onSelect","listboxID","createRef","componentDidUpdate","haveChildrenChanged","componentWillUnmount","render","dividerIndex","overlayTitle","className","isPositionDynamic","title","selector","shouldScroll","isOpen","inputProps","role","list","createElement","toLowerCase","item","itemProps","onClick","onMouseDown","onMouseEnter","isActive","hasDivider","Fragment","cloneElement","onFocus","handleFocus","onKeyDown","handleKeyDown","onPaste","ref","placement"],"sources":["../../../src/components/selector-dropdown/SelectorDropdown.js"],"sourcesContent":["// @flow\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport uniqueId from 'lodash/uniqueId';\n\nimport { scrollIntoView } from '../../utils/dom';\nimport PopperComponent from '../popper';\nimport { PLACEMENT_BOTTOM_START } from '../popper/constants';\nimport ScrollWrapper from '../scroll-wrapper';\nimport { OVERLAY_WRAPPER_CLASS } from '../../constants';\n\nimport './SelectorDropdown.scss';\n\nfunction stopDefaultEvent(event) {\n    event.preventDefault();\n    event.stopPropagation();\n}\n\ntype Props = {\n    /** Options to render in the dropdown filtered based on the input text */\n    children?: React.Node,\n    /** CSS class for the wrapper div */\n    className?: string,\n    /** Index at which to insert the divider */\n    dividerIndex?: number,\n    /** Options to keep the results always open */\n    isAlwaysOpen?: boolean,\n    /** Option to enable dynamic positioning with popper */\n    isPositionDynamic?: boolean,\n    /** Function called on keyboard \"Enter\" event only if enter does not trigger selection */\n    onEnter?: (event: SyntheticKeyboardEvent<HTMLDivElement>) => void,\n    /** Function called with the index of the selected option and the event (selected by keyboard or click) */\n    onSelect?: Function,\n    /** Optional title of the overlay */\n    overlayTitle?: string,\n    /** A CSS selector matching the element to use as a boundary when auto-scrolling dropdown elements into view. When not provided, boundary will be determined by scrollIntoView utility function */\n    scrollBoundarySelector?: string,\n    /** Component containing an input text field and takes `inputProps` to spread onto the input element */\n    selector: React.Element<any>,\n    /** Boolean to indicate whether the dropdown should scroll */\n    shouldScroll?: boolean,\n    /** Determines whether or not the first item is highlighted automatically when the dropdown opens */\n    shouldSetActiveItemOnOpen?: boolean,\n    /** Optional title text that will be rendered above the list */\n    title?: React.Node,\n};\n\ntype State = {\n    activeItemID: string | null,\n    activeItemIndex: number,\n    shouldOpen: boolean,\n};\n\nclass SelectorDropdown extends React.Component<Props, State> {\n    static defaultProps = {\n        isPositionDynamic: false,\n    };\n\n    constructor(props: Props) {\n        super(props);\n\n        this.listboxID = uniqueId('listbox');\n\n        this.state = {\n            activeItemID: null,\n            activeItemIndex: -1,\n            shouldOpen: false,\n        };\n\n        this.selectorDropdownRef = React.createRef();\n    }\n\n    componentDidUpdate({ shouldSetActiveItemOnOpen, children }: Props) {\n        if (this.haveChildrenChanged(children)) {\n            // For UX purposes filtering the items is equivalent\n            // to re-opening the dropdown. In such cases we highlight\n            // the first item when configured to do so\n            if (shouldSetActiveItemOnOpen) {\n                this.setActiveItem(0);\n            } else {\n                this.resetActiveItem();\n            }\n        }\n    }\n\n    componentWillUnmount() {\n        // just in case event listener was added during openDropdown() but the component\n        // gets unmounted without closeDropdown()\n        document.removeEventListener('click', this.handleDocumentClick, true);\n    }\n\n    setActiveItem = (index: number) => {\n        this.setState({ activeItemIndex: index });\n        if (index === -1) {\n            this.setActiveItemID(null);\n        }\n    };\n\n    setActiveItemID = (id: string | null) => {\n        const { scrollBoundarySelector } = this.props;\n        const itemEl = id ? document.getElementById(id) : null;\n\n        const scrollOptions: Object = {\n            block: 'nearest',\n        };\n\n        // Allow null in case we want to clear the default\n        // boundary from scrollIntoView\n        if (typeof scrollBoundarySelector !== 'undefined') {\n            scrollOptions.boundary = document.querySelector(scrollBoundarySelector);\n        }\n\n        this.setState({ activeItemID: id }, () => {\n            scrollIntoView(itemEl, scrollOptions);\n        });\n    };\n\n    listboxID: string;\n\n    selectorDropdownRef: { current: null | HTMLDivElement };\n\n    haveChildrenChanged = (prevChildren?: React.Node) => {\n        const { children } = this.props;\n        const childrenCount = React.Children.count(children);\n        const prevChildrenCount = React.Children.count(prevChildren);\n\n        if (childrenCount !== prevChildrenCount) {\n            return true;\n        }\n\n        if (childrenCount === 0) {\n            return false;\n        }\n\n        const childrenKeys = React.Children.map(children, child => child.key);\n        const prevChildrenKeys = React.Children.map(prevChildren, child => child.key);\n        return childrenKeys.some((childKey, index) => childKey !== prevChildrenKeys[index]);\n    };\n\n    resetActiveItem = () => {\n        this.setState({\n            activeItemID: null,\n            activeItemIndex: -1,\n        });\n    };\n\n    handleFocus = () => {\n        this.openDropdown();\n    };\n\n    handleDocumentClick = (event: MouseEvent) => {\n        const container = this.selectorDropdownRef.current;\n        const isInside =\n            (container && event.target instanceof Node && container.contains(event.target)) ||\n            container === event.target;\n\n        if (!isInside) {\n            this.closeDropdown();\n        }\n    };\n\n    handleInput = () => {\n        this.openDropdown();\n    };\n\n    handleKeyDown = (event: SyntheticKeyboardEvent<HTMLDivElement>) => {\n        const { children, isAlwaysOpen, onEnter } = this.props;\n        const { activeItemIndex } = this.state;\n        const childrenCount = React.Children.count(children);\n\n        switch (event.key) {\n            case 'ArrowDown':\n                if (this.isDropdownOpen()) {\n                    if (childrenCount) {\n                        stopDefaultEvent(event);\n                    }\n                    const nextIndex = activeItemIndex === childrenCount - 1 ? -1 : activeItemIndex + 1;\n                    this.setActiveItem(nextIndex);\n                } else {\n                    this.openDropdown();\n                }\n                break;\n            case 'ArrowUp':\n                if (this.isDropdownOpen()) {\n                    if (childrenCount) {\n                        stopDefaultEvent(event);\n                    }\n                    const prevIndex = activeItemIndex === -1 ? childrenCount - 1 : activeItemIndex - 1;\n                    this.setActiveItem(prevIndex);\n                } else {\n                    this.openDropdown();\n                }\n                break;\n            case 'Enter':\n                if (activeItemIndex !== -1 && this.isDropdownOpen()) {\n                    stopDefaultEvent(event);\n                    this.selectItem(activeItemIndex, event);\n                } else if (onEnter) {\n                    onEnter(event);\n                }\n                break;\n            case 'Tab':\n                if (this.isDropdownOpen()) {\n                    this.closeDropdown();\n                    this.resetActiveItem();\n                }\n                break;\n            case 'Escape':\n                if (!isAlwaysOpen && this.isDropdownOpen()) {\n                    stopDefaultEvent(event);\n                    this.closeDropdown();\n                    this.resetActiveItem();\n                }\n                break;\n            default:\n                this.handleInput();\n        }\n    };\n\n    isDropdownOpen = () => {\n        const { children, isAlwaysOpen } = this.props;\n        const { shouldOpen } = this.state;\n        const childrenCount = React.Children.count(children);\n        return childrenCount > 0 && (!!isAlwaysOpen || shouldOpen);\n    };\n\n    openDropdown = () => {\n        if (!this.state.shouldOpen) {\n            const { shouldSetActiveItemOnOpen } = this.props;\n\n            if (shouldSetActiveItemOnOpen) {\n                this.setActiveItem(0);\n            }\n            this.setState({ shouldOpen: true });\n            document.addEventListener('click', this.handleDocumentClick, true);\n        }\n    };\n\n    closeDropdown = () => {\n        this.setState({ shouldOpen: false });\n        document.removeEventListener('click', this.handleDocumentClick, true);\n    };\n\n    selectItem = (index: number, event: SyntheticEvent<>) => {\n        const { onSelect } = this.props;\n        if (onSelect) {\n            onSelect(index, event);\n        }\n        this.closeDropdown();\n    };\n\n    render() {\n        const { listboxID, selectItem, setActiveItem, setActiveItemID, closeDropdown } = this;\n        const {\n            dividerIndex,\n            overlayTitle,\n            children,\n            className,\n            isPositionDynamic,\n            title,\n            selector,\n            shouldScroll,\n        } = this.props;\n        const { activeItemID, activeItemIndex } = this.state;\n        const isOpen = this.isDropdownOpen();\n        const inputProps: Object = {\n            'aria-activedescendant': activeItemID,\n            'aria-autocomplete': 'list',\n            'aria-expanded': isOpen,\n            role: 'combobox',\n        };\n        if (isOpen) {\n            inputProps['aria-owns'] = listboxID;\n        }\n\n        const list = (\n            <ul\n                className={classNames('overlay', overlayTitle ? overlayTitle.toLowerCase() : '')}\n                id={listboxID}\n                role=\"listbox\"\n            >\n                {overlayTitle && <h5 className=\"SelectorDropdown-title\">{overlayTitle}</h5>}\n                {React.Children.map(children, (item, index) => {\n                    const itemProps: Object = {\n                        onClick: event => {\n                            selectItem(index, event);\n                        },\n                        /* preventDefault on mousedown so blur doesn't happen before click */\n                        onMouseDown: event => {\n                            event.preventDefault();\n                        },\n                        onMouseEnter: () => {\n                            setActiveItem(index);\n                        },\n                        closeDropdown: () => {\n                            closeDropdown();\n                        },\n                        setActiveItemID,\n                    };\n\n                    if (index === activeItemIndex) {\n                        itemProps.isActive = true;\n                    }\n\n                    const hasDivider = index === dividerIndex;\n\n                    return (\n                        <>\n                            {hasDivider && <hr className=\"SelectorDropdown-divider\" />}\n                            {React.cloneElement(item, itemProps)}\n                        </>\n                    );\n                })}\n            </ul>\n        );\n\n        // change onPaste back to onInput when React fixes this IE11 bug: https://github.com/facebook/react/issues/7280\n\n        // We're simulating the blur event with the tab key listener and the\n        // click listener as a proxy because IE will trigger a blur when\n        // using the scrollbar in the dropdown which indavertently closes the dropdown.\n        return (\n            // eslint-disable-next-line jsx-a11y/no-static-element-interactions\n            <div\n                className={classNames('SelectorDropdown', className)}\n                onFocus={this.handleFocus}\n                onKeyDown={this.handleKeyDown}\n                onPaste={this.handleInput}\n                ref={this.selectorDropdownRef}\n            >\n                <PopperComponent\n                    isPositionDynamic={isPositionDynamic}\n                    isOpen={isOpen}\n                    placement={PLACEMENT_BOTTOM_START}\n                >\n                    {React.cloneElement(selector, { inputProps })}\n                    <div className={`SelectorDropdown-overlay ${OVERLAY_WRAPPER_CLASS} is-visible`}>\n                        {title}\n                        {shouldScroll ? <ScrollWrapper>{list}</ScrollWrapper> : list}\n                    </div>\n                </PopperComponent>\n            </div>\n        );\n    }\n}\n\nexport default SelectorDropdown;\n"],"mappings":";;;AACA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,OAAOC,UAAU,MAAM,YAAY;AACnC,OAAOC,QAAQ,MAAM,iBAAiB;AAEtC,SAASC,cAAc,QAAQ,iBAAiB;AAChD,OAAOC,eAAe,MAAM,WAAW;AACvC,SAASC,sBAAsB,QAAQ,qBAAqB;AAC5D,OAAOC,aAAa,MAAM,mBAAmB;AAC7C,SAASC,qBAAqB,QAAQ,iBAAiB;AAEvD,OAAO,yBAAyB;AAEhC,SAASC,gBAAgBA,CAACC,KAAK,EAAE;EAC7BA,KAAK,CAACC,cAAc,CAAC,CAAC;EACtBD,KAAK,CAACE,eAAe,CAAC,CAAC;AAC3B;AAqCA,MAAMC,gBAAgB,SAASZ,KAAK,CAACa,SAAS,CAAe;EAKzDC,WAAWA,CAACC,KAAY,EAAE;IACtB,KAAK,CAACA,KAAK,CAAC;IAACC,eAAA,wBAgCAC,KAAa,IAAK;MAC/B,IAAI,CAACC,QAAQ,CAAC;QAAEC,eAAe,EAAEF;MAAM,CAAC,CAAC;MACzC,IAAIA,KAAK,KAAK,CAAC,CAAC,EAAE;QACd,IAAI,CAACG,eAAe,CAAC,IAAI,CAAC;MAC9B;IACJ,CAAC;IAAAJ,eAAA,0BAEkBK,EAAiB,IAAK;MACrC,MAAM;QAAEC;MAAuB,CAAC,GAAG,IAAI,CAACP,KAAK;MAC7C,MAAMQ,MAAM,GAAGF,EAAE,GAAGG,QAAQ,CAACC,cAAc,CAACJ,EAAE,CAAC,GAAG,IAAI;MAEtD,MAAMK,aAAqB,GAAG;QAC1BC,KAAK,EAAE;MACX,CAAC;;MAED;MACA;MACA,IAAI,OAAOL,sBAAsB,KAAK,WAAW,EAAE;QAC/CI,aAAa,CAACE,QAAQ,GAAGJ,QAAQ,CAACK,aAAa,CAACP,sBAAsB,CAAC;MAC3E;MAEA,IAAI,CAACJ,QAAQ,CAAC;QAAEY,YAAY,EAAET;MAAG,CAAC,EAAE,MAAM;QACtClB,cAAc,CAACoB,MAAM,EAAEG,aAAa,CAAC;MACzC,CAAC,CAAC;IACN,CAAC;IAAAV,eAAA,8BAMsBe,YAAyB,IAAK;MACjD,MAAM;QAAEC;MAAS,CAAC,GAAG,IAAI,CAACjB,KAAK;MAC/B,MAAMkB,aAAa,GAAGjC,KAAK,CAACkC,QAAQ,CAACC,KAAK,CAACH,QAAQ,CAAC;MACpD,MAAMI,iBAAiB,GAAGpC,KAAK,CAACkC,QAAQ,CAACC,KAAK,CAACJ,YAAY,CAAC;MAE5D,IAAIE,aAAa,KAAKG,iBAAiB,EAAE;QACrC,OAAO,IAAI;MACf;MAEA,IAAIH,aAAa,KAAK,CAAC,EAAE;QACrB,OAAO,KAAK;MAChB;MAEA,MAAMI,YAAY,GAAGrC,KAAK,CAACkC,QAAQ,CAACI,GAAG,CAACN,QAAQ,EAAEO,KAAK,IAAIA,KAAK,CAACC,GAAG,CAAC;MACrE,MAAMC,gBAAgB,GAAGzC,KAAK,CAACkC,QAAQ,CAACI,GAAG,CAACP,YAAY,EAAEQ,KAAK,IAAIA,KAAK,CAACC,GAAG,CAAC;MAC7E,OAAOH,YAAY,CAACK,IAAI,CAAC,CAACC,QAAQ,EAAE1B,KAAK,KAAK0B,QAAQ,KAAKF,gBAAgB,CAACxB,KAAK,CAAC,CAAC;IACvF,CAAC;IAAAD,eAAA,0BAEiB,MAAM;MACpB,IAAI,CAACE,QAAQ,CAAC;QACVY,YAAY,EAAE,IAAI;QAClBX,eAAe,EAAE,CAAC;MACtB,CAAC,CAAC;IACN,CAAC;IAAAH,eAAA,sBAEa,MAAM;MAChB,IAAI,CAAC4B,YAAY,CAAC,CAAC;IACvB,CAAC;IAAA5B,eAAA,8BAEsBP,KAAiB,IAAK;MACzC,MAAMoC,SAAS,GAAG,IAAI,CAACC,mBAAmB,CAACC,OAAO;MAClD,MAAMC,QAAQ,GACTH,SAAS,IAAIpC,KAAK,CAACwC,MAAM,YAAYC,IAAI,IAAIL,SAAS,CAACM,QAAQ,CAAC1C,KAAK,CAACwC,MAAM,CAAC,IAC9EJ,SAAS,KAAKpC,KAAK,CAACwC,MAAM;MAE9B,IAAI,CAACD,QAAQ,EAAE;QACX,IAAI,CAACI,aAAa,CAAC,CAAC;MACxB;IACJ,CAAC;IAAApC,eAAA,sBAEa,MAAM;MAChB,IAAI,CAAC4B,YAAY,CAAC,CAAC;IACvB,CAAC;IAAA5B,eAAA,wBAEgBP,KAA6C,IAAK;MAC/D,MAAM;QAAEuB,QAAQ;QAAEqB,YAAY;QAAEC;MAAQ,CAAC,GAAG,IAAI,CAACvC,KAAK;MACtD,MAAM;QAAEI;MAAgB,CAAC,GAAG,IAAI,CAACoC,KAAK;MACtC,MAAMtB,aAAa,GAAGjC,KAAK,CAACkC,QAAQ,CAACC,KAAK,CAACH,QAAQ,CAAC;MAEpD,QAAQvB,KAAK,CAAC+B,GAAG;QACb,KAAK,WAAW;UACZ,IAAI,IAAI,CAACgB,cAAc,CAAC,CAAC,EAAE;YACvB,IAAIvB,aAAa,EAAE;cACfzB,gBAAgB,CAACC,KAAK,CAAC;YAC3B;YACA,MAAMgD,SAAS,GAAGtC,eAAe,KAAKc,aAAa,GAAG,CAAC,GAAG,CAAC,CAAC,GAAGd,eAAe,GAAG,CAAC;YAClF,IAAI,CAACuC,aAAa,CAACD,SAAS,CAAC;UACjC,CAAC,MAAM;YACH,IAAI,CAACb,YAAY,CAAC,CAAC;UACvB;UACA;QACJ,KAAK,SAAS;UACV,IAAI,IAAI,CAACY,cAAc,CAAC,CAAC,EAAE;YACvB,IAAIvB,aAAa,EAAE;cACfzB,gBAAgB,CAACC,KAAK,CAAC;YAC3B;YACA,MAAMkD,SAAS,GAAGxC,eAAe,KAAK,CAAC,CAAC,GAAGc,aAAa,GAAG,CAAC,GAAGd,eAAe,GAAG,CAAC;YAClF,IAAI,CAACuC,aAAa,CAACC,SAAS,CAAC;UACjC,CAAC,MAAM;YACH,IAAI,CAACf,YAAY,CAAC,CAAC;UACvB;UACA;QACJ,KAAK,OAAO;UACR,IAAIzB,eAAe,KAAK,CAAC,CAAC,IAAI,IAAI,CAACqC,cAAc,CAAC,CAAC,EAAE;YACjDhD,gBAAgB,CAACC,KAAK,CAAC;YACvB,IAAI,CAACmD,UAAU,CAACzC,eAAe,EAAEV,KAAK,CAAC;UAC3C,CAAC,MAAM,IAAI6C,OAAO,EAAE;YAChBA,OAAO,CAAC7C,KAAK,CAAC;UAClB;UACA;QACJ,KAAK,KAAK;UACN,IAAI,IAAI,CAAC+C,cAAc,CAAC,CAAC,EAAE;YACvB,IAAI,CAACJ,aAAa,CAAC,CAAC;YACpB,IAAI,CAACS,eAAe,CAAC,CAAC;UAC1B;UACA;QACJ,KAAK,QAAQ;UACT,IAAI,CAACR,YAAY,IAAI,IAAI,CAACG,cAAc,CAAC,CAAC,EAAE;YACxChD,gBAAgB,CAACC,KAAK,CAAC;YACvB,IAAI,CAAC2C,aAAa,CAAC,CAAC;YACpB,IAAI,CAACS,eAAe,CAAC,CAAC;UAC1B;UACA;QACJ;UACI,IAAI,CAACC,WAAW,CAAC,CAAC;MAC1B;IACJ,CAAC;IAAA9C,eAAA,yBAEgB,MAAM;MACnB,MAAM;QAAEgB,QAAQ;QAAEqB;MAAa,CAAC,GAAG,IAAI,CAACtC,KAAK;MAC7C,MAAM;QAAEgD;MAAW,CAAC,GAAG,IAAI,CAACR,KAAK;MACjC,MAAMtB,aAAa,GAAGjC,KAAK,CAACkC,QAAQ,CAACC,KAAK,CAACH,QAAQ,CAAC;MACpD,OAAOC,aAAa,GAAG,CAAC,KAAK,CAAC,CAACoB,YAAY,IAAIU,UAAU,CAAC;IAC9D,CAAC;IAAA/C,eAAA,uBAEc,MAAM;MACjB,IAAI,CAAC,IAAI,CAACuC,KAAK,CAACQ,UAAU,EAAE;QACxB,MAAM;UAAEC;QAA0B,CAAC,GAAG,IAAI,CAACjD,KAAK;QAEhD,IAAIiD,yBAAyB,EAAE;UAC3B,IAAI,CAACN,aAAa,CAAC,CAAC,CAAC;QACzB;QACA,IAAI,CAACxC,QAAQ,CAAC;UAAE6C,UAAU,EAAE;QAAK,CAAC,CAAC;QACnCvC,QAAQ,CAACyC,gBAAgB,CAAC,OAAO,EAAE,IAAI,CAACC,mBAAmB,EAAE,IAAI,CAAC;MACtE;IACJ,CAAC;IAAAlD,eAAA,wBAEe,MAAM;MAClB,IAAI,CAACE,QAAQ,CAAC;QAAE6C,UAAU,EAAE;MAAM,CAAC,CAAC;MACpCvC,QAAQ,CAAC2C,mBAAmB,CAAC,OAAO,EAAE,IAAI,CAACD,mBAAmB,EAAE,IAAI,CAAC;IACzE,CAAC;IAAAlD,eAAA,qBAEY,CAACC,KAAa,EAAER,KAAuB,KAAK;MACrD,MAAM;QAAE2D;MAAS,CAAC,GAAG,IAAI,CAACrD,KAAK;MAC/B,IAAIqD,QAAQ,EAAE;QACVA,QAAQ,CAACnD,KAAK,EAAER,KAAK,CAAC;MAC1B;MACA,IAAI,CAAC2C,aAAa,CAAC,CAAC;IACxB,CAAC;IA5LG,IAAI,CAACiB,SAAS,GAAGnE,QAAQ,CAAC,SAAS,CAAC;IAEpC,IAAI,CAACqD,KAAK,GAAG;MACTzB,YAAY,EAAE,IAAI;MAClBX,eAAe,EAAE,CAAC,CAAC;MACnB4C,UAAU,EAAE;IAChB,CAAC;IAED,IAAI,CAACjB,mBAAmB,gBAAG9C,KAAK,CAACsE,SAAS,CAAC,CAAC;EAChD;EAEAC,kBAAkBA,CAAC;IAAEP,yBAAyB;IAAEhC;EAAgB,CAAC,EAAE;IAC/D,IAAI,IAAI,CAACwC,mBAAmB,CAACxC,QAAQ,CAAC,EAAE;MACpC;MACA;MACA;MACA,IAAIgC,yBAAyB,EAAE;QAC3B,IAAI,CAACN,aAAa,CAAC,CAAC,CAAC;MACzB,CAAC,MAAM;QACH,IAAI,CAACG,eAAe,CAAC,CAAC;MAC1B;IACJ;EACJ;EAEAY,oBAAoBA,CAAA,EAAG;IACnB;IACA;IACAjD,QAAQ,CAAC2C,mBAAmB,CAAC,OAAO,EAAE,IAAI,CAACD,mBAAmB,EAAE,IAAI,CAAC;EACzE;EAkKAQ,MAAMA,CAAA,EAAG;IACL,MAAM;MAAEL,SAAS;MAAET,UAAU;MAAEF,aAAa;MAAEtC,eAAe;MAAEgC;IAAc,CAAC,GAAG,IAAI;IACrF,MAAM;MACFuB,YAAY;MACZC,YAAY;MACZ5C,QAAQ;MACR6C,SAAS;MACTC,iBAAiB;MACjBC,KAAK;MACLC,QAAQ;MACRC;IACJ,CAAC,GAAG,IAAI,CAAClE,KAAK;IACd,MAAM;MAAEe,YAAY;MAAEX;IAAgB,CAAC,GAAG,IAAI,CAACoC,KAAK;IACpD,MAAM2B,MAAM,GAAG,IAAI,CAAC1B,cAAc,CAAC,CAAC;IACpC,MAAM2B,UAAkB,GAAG;MACvB,uBAAuB,EAAErD,YAAY;MACrC,mBAAmB,EAAE,MAAM;MAC3B,eAAe,EAAEoD,MAAM;MACvBE,IAAI,EAAE;IACV,CAAC;IACD,IAAIF,MAAM,EAAE;MACRC,UAAU,CAAC,WAAW,CAAC,GAAGd,SAAS;IACvC;IAEA,MAAMgB,IAAI,gBACNrF,KAAA,CAAAsF,aAAA;MACIT,SAAS,EAAE5E,UAAU,CAAC,SAAS,EAAE2E,YAAY,GAAGA,YAAY,CAACW,WAAW,CAAC,CAAC,GAAG,EAAE,CAAE;MACjFlE,EAAE,EAAEgD,SAAU;MACde,IAAI,EAAC;IAAS,GAEbR,YAAY,iBAAI5E,KAAA,CAAAsF,aAAA;MAAIT,SAAS,EAAC;IAAwB,GAAED,YAAiB,CAAC,EAC1E5E,KAAK,CAACkC,QAAQ,CAACI,GAAG,CAACN,QAAQ,EAAE,CAACwD,IAAI,EAAEvE,KAAK,KAAK;MAC3C,MAAMwE,SAAiB,GAAG;QACtBC,OAAO,EAAEjF,KAAK,IAAI;UACdmD,UAAU,CAAC3C,KAAK,EAAER,KAAK,CAAC;QAC5B,CAAC;QACD;QACAkF,WAAW,EAAElF,KAAK,IAAI;UAClBA,KAAK,CAACC,cAAc,CAAC,CAAC;QAC1B,CAAC;QACDkF,YAAY,EAAEA,CAAA,KAAM;UAChBlC,aAAa,CAACzC,KAAK,CAAC;QACxB,CAAC;QACDmC,aAAa,EAAEA,CAAA,KAAM;UACjBA,aAAa,CAAC,CAAC;QACnB,CAAC;QACDhC;MACJ,CAAC;MAED,IAAIH,KAAK,KAAKE,eAAe,EAAE;QAC3BsE,SAAS,CAACI,QAAQ,GAAG,IAAI;MAC7B;MAEA,MAAMC,UAAU,GAAG7E,KAAK,KAAK0D,YAAY;MAEzC,oBACI3E,KAAA,CAAAsF,aAAA,CAAAtF,KAAA,CAAA+F,QAAA,QACKD,UAAU,iBAAI9F,KAAA,CAAAsF,aAAA;QAAIT,SAAS,EAAC;MAA0B,CAAE,CAAC,eACzD7E,KAAK,CAACgG,YAAY,CAACR,IAAI,EAAEC,SAAS,CACrC,CAAC;IAEX,CAAC,CACD,CACP;;IAED;;IAEA;IACA;IACA;IACA;MAAA;MACI;MACAzF,KAAA,CAAAsF,aAAA;QACIT,SAAS,EAAE5E,UAAU,CAAC,kBAAkB,EAAE4E,SAAS,CAAE;QACrDoB,OAAO,EAAE,IAAI,CAACC,WAAY;QAC1BC,SAAS,EAAE,IAAI,CAACC,aAAc;QAC9BC,OAAO,EAAE,IAAI,CAACvC,WAAY;QAC1BwC,GAAG,EAAE,IAAI,CAACxD;MAAoB,gBAE9B9C,KAAA,CAAAsF,aAAA,CAAClF,eAAe;QACZ0E,iBAAiB,EAAEA,iBAAkB;QACrCI,MAAM,EAAEA,MAAO;QACfqB,SAAS,EAAElG;MAAuB,gBAEjCL,KAAK,CAACgG,YAAY,CAAChB,QAAQ,EAAE;QAAEG;MAAW,CAAC,CAAC,eAC7CnF,KAAA,CAAAsF,aAAA;QAAKT,SAAS,EAAE,4BAA4BtE,qBAAqB;MAAc,GAC1EwE,KAAK,EACLE,YAAY,gBAAGjF,KAAA,CAAAsF,aAAA,CAAChF,aAAa,QAAE+E,IAAoB,CAAC,GAAGA,IACvD,CACQ,CAChB;IAAC;EAEd;AACJ;AAACrE,eAAA,CAnSKJ,gBAAgB,kBACI;EAClBkE,iBAAiB,EAAE;AACvB,CAAC;AAkSL,eAAelE,gBAAgB","ignoreList":[]}