{"version":3,"file":"makeSelectable.js","names":["PropTypes","React","Component","Set","ImmutablePropTypes","classNames","FormattedMessage","Hotkeys","HotkeyRecord","messages","shiftSelect","SEARCH_TIMER_DURATION","makeSelectable","BaseTable","_SelectableTable","originalDisplayName","displayName","name","SelectableTable","constructor","props","_defineProperty","focusedIndex","undefined","selectedItems","newFocusedIndex","onSelect","previousIndex","state","setState","isSet","toJS","hotkeyType","key","description","createElement","shiftXDescription","handler","selectToggle","type","selectAllDescription","event","data","preventDefault","deselectAllDescription","downDescription","shouldNotAllowArrowKeyNavigation","Math","min","length","upDescription","max","shiftDownDescription","handleShiftKeyDown","shiftUpDescription","isTargetSlider","gridColumnCount","handleShiftKeyDownForGrid","enableHotkeys","isGridView","hotkeys","viewSpecificHotKeyConfigs","getGridViewHotKeyConfigs","getListViewHotKeyConfigs","getSharedHotkeyConfigs","loadedData","_objectSpread","rowIndex","getProcessedProps","has","delete","add","anchorIndex","selectedRows","reduce","rows","item","i","push","newSelectedRows","newSelectedItems","map","size","index","metaKey","ctrlKey","shiftKey","selectRange","selectOne","blurTimerID","setTimeout","clearFocus","clearTimeout","boundary","focusedIndexData","newFocusedIndexData","union","selectedItemIndecies","sourceIndex","targetIndex","dataSize","isSourceSelected","isTargetSelected","selectedItemIndices","isContiguousSelection","newSelectedItemIndices","searchStrings","target","hasAttribute","nodeName","which","searchTimeout","searchString","findIndex","string","trim","toLowerCase","indexOf","nativeEvent","role","className","dataset","includes","document","querySelector","isTargetQuickSearch","isFlyoutOpen","isDropdownMenuOpen","componentDidMount","addEventListener","handleKeyboardSearch","componentDidUpdate","prevProps","prevState","onFocus","componentWillUnmount","removeEventListener","render","focusedItem","configs","getHotkeyConfigs","_extends","onCheckboxClick","handleCheckboxClick","onRowClick","handleRowClick","onRowFocus","handleRowFocus","onTableBlur","handleTableBlur","onTableFocus","handleTableFocus","array","isRequired","number","bool","func","oneOfType","set"],"sources":["../../../src/components/table/makeSelectable.js"],"sourcesContent":["import PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { Set } from 'immutable';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport classNames from 'classnames';\nimport { FormattedMessage } from 'react-intl';\n\nimport { Hotkeys, HotkeyRecord } from '../hotkeys';\nimport messages from './messages';\nimport shiftSelect from './shiftSelect';\n\nconst SEARCH_TIMER_DURATION = 1000;\n\nfunction makeSelectable(BaseTable) {\n    const originalDisplayName = BaseTable.displayName || BaseTable.name || 'Table';\n\n    return class SelectableTable extends Component {\n        static displayName = `Selectable(${originalDisplayName})`;\n\n        static propTypes = {\n            className: PropTypes.string,\n            /** Array of unique IDs of the items in the table. Each item should be a string or number, in the order they appear in the table. */\n            data: PropTypes.array.isRequired,\n            gridColumnCount: PropTypes.number,\n            isGridView: PropTypes.bool,\n            /** Called when focus changes. `(focusedIndex: number) => void` */\n            onFocus: PropTypes.func,\n            /** Called when selection changes. `(selectedItems: Array<string> | Array<number> | Set<string> | Set<number>) => void` */\n            onSelect: PropTypes.func.isRequired,\n            /**\n             * Array of strings for keyboard search corresponding to the data prop. If not provided, keyboard search won't work.\n             * Example: data = ['f_123', 'f_456'], and corresponding searchStrings = ['file.png', 'another file.pdf']\n             */\n            searchStrings: PropTypes.array,\n            /**\n             * Array of IDs that are currently selected, in any order.\n             * If you pass a native JS array, then your onSelect function will be called with a native JS array;\n             * likewise, if you pass an ImmutableJS Set, then your onSelect function will be called\n             * with an ImmutableJS Set.\n             */\n            selectedItems: PropTypes.oneOfType([PropTypes.array, ImmutablePropTypes.set]),\n            /** Array of unique IDs of the items in the table that are loaded and accessible. If not provided, this will default to all data */\n            loadedData: PropTypes.array,\n            enableHotkeys: PropTypes.bool,\n            /** Translated type for hotkeys. If not provided, then the hotkeys will not appear in the help modal. */\n            hotkeyType: PropTypes.string,\n        };\n\n        static defaultProps = {\n            selectedItems: new Set(),\n        };\n\n        constructor(props) {\n            super(props);\n\n            this.anchorIndex = 0;\n\n            this.searchString = '';\n            this.searchTimeout = null;\n\n            // we have to store the previously focused index because a focus event\n            // will be fired before the click event; thus, in the click handler,\n            // the focusedItem will already be the new item\n            this.previousIndex = 0;\n\n            this.blurTimerID = null;\n        }\n\n        state = {\n            focusedIndex: undefined,\n        };\n\n        componentDidMount() {\n            document.addEventListener('keypress', this.handleKeyboardSearch);\n        }\n\n        componentDidUpdate(prevProps, prevState) {\n            if (prevState.focusedIndex !== this.state.focusedIndex && this.props.onFocus) {\n                this.props.onFocus(this.state.focusedIndex);\n            }\n        }\n\n        componentWillUnmount() {\n            document.removeEventListener('keypress', this.handleKeyboardSearch);\n            clearTimeout(this.blurTimerID);\n        }\n\n        onSelect = (selectedItems, newFocusedIndex) => {\n            const { onSelect } = this.props;\n\n            this.previousIndex = this.state.focusedIndex || 0;\n\n            this.setState({\n                focusedIndex: newFocusedIndex,\n            });\n\n            if (onSelect) {\n                // If selectedItems were given as an Immutable Set, they should also be returned as one,\n                // and vice versa if they were given as a native JS array\n                onSelect(Set.isSet(this.props.selectedItems) ? selectedItems : selectedItems.toJS());\n            }\n        };\n\n        getSharedHotkeyConfigs = () => {\n            const { hotkeyType } = this.props;\n            return [\n                new HotkeyRecord({\n                    key: 'shift+x',\n                    description: <FormattedMessage {...messages.shiftXDescription} />,\n                    handler: () => {\n                        const { focusedIndex } = this.state;\n\n                        if (focusedIndex === undefined) {\n                            return;\n                        }\n\n                        this.selectToggle(focusedIndex);\n                    },\n                    type: hotkeyType,\n                }),\n                new HotkeyRecord({\n                    key: ['meta+a', 'ctrl+a'],\n                    description: <FormattedMessage {...messages.selectAllDescription} />,\n                    handler: event => {\n                        const { data } = this.props;\n\n                        event.preventDefault();\n\n                        this.onSelect(new Set(data), this.state.focusedIndex);\n                    },\n                    type: hotkeyType,\n                }),\n                new HotkeyRecord({\n                    key: 'esc',\n                    description: <FormattedMessage {...messages.deselectAllDescription} />,\n                    handler: () => {\n                        this.onSelect(new Set(), this.state.focusedIndex);\n                    },\n                    type: hotkeyType,\n                }),\n            ];\n        };\n\n        getListViewHotKeyConfigs = () => {\n            const { hotkeyType } = this.props;\n            return [\n                new HotkeyRecord({\n                    key: 'down',\n                    description: <FormattedMessage {...messages.downDescription} />,\n                    handler: event => {\n                        if (this.shouldNotAllowArrowKeyNavigation(event)) {\n                            return;\n                        }\n\n                        const { data } = this.props;\n                        const { focusedIndex } = this.state;\n\n                        event.preventDefault();\n\n                        const newFocusedIndex =\n                            focusedIndex !== undefined ? Math.min(focusedIndex + 1, data.length - 1) : 0;\n                        this.setState({ focusedIndex: newFocusedIndex });\n                    },\n                    type: hotkeyType,\n                }),\n                new HotkeyRecord({\n                    key: 'up',\n                    description: <FormattedMessage {...messages.upDescription} />,\n                    handler: event => {\n                        if (this.shouldNotAllowArrowKeyNavigation(event)) {\n                            return;\n                        }\n\n                        const { focusedIndex = 0 } = this.state;\n\n                        event.preventDefault();\n\n                        const newFocusedIndex = Math.max(focusedIndex - 1, 0);\n                        this.setState({ focusedIndex: newFocusedIndex });\n                    },\n                    type: hotkeyType,\n                }),\n                new HotkeyRecord({\n                    key: 'shift+down',\n                    description: <FormattedMessage {...messages.shiftDownDescription} />,\n                    handler: () => {\n                        const { data } = this.props;\n                        const { focusedIndex } = this.state;\n\n                        if (focusedIndex === undefined) {\n                            return;\n                        }\n\n                        const newFocusedIndex = Math.min(focusedIndex + 1, data.length - 1);\n                        this.handleShiftKeyDown(newFocusedIndex, data.length - 1);\n                    },\n                    type: hotkeyType,\n                }),\n                new HotkeyRecord({\n                    key: 'shift+up',\n                    description: <FormattedMessage {...messages.shiftUpDescription} />,\n                    handler: () => {\n                        const { focusedIndex } = this.state;\n\n                        if (focusedIndex === undefined) {\n                            return;\n                        }\n\n                        const newFocusedIndex = Math.max(focusedIndex - 1, 0);\n                        this.handleShiftKeyDown(newFocusedIndex, 0);\n                    },\n                    type: hotkeyType,\n                }),\n            ];\n        };\n\n        getGridViewHotKeyConfigs = () => {\n            const { hotkeyType } = this.props;\n            return [\n                new HotkeyRecord({\n                    key: 'right',\n                    description: <FormattedMessage {...messages.downDescription} />,\n                    handler: event => {\n                        if (this.isTargetSlider(event) || this.shouldNotAllowArrowKeyNavigation(event)) {\n                            return;\n                        }\n\n                        const { data } = this.props;\n                        const { focusedIndex } = this.state;\n\n                        event.preventDefault();\n\n                        const newFocusedIndex =\n                            focusedIndex !== undefined ? Math.min(focusedIndex + 1, data.length - 1) : 0;\n                        this.setState({ focusedIndex: newFocusedIndex });\n                    },\n                    type: hotkeyType,\n                }),\n                new HotkeyRecord({\n                    key: 'left',\n                    description: <FormattedMessage {...messages.upDescription} />,\n                    handler: event => {\n                        if (this.isTargetSlider(event) || this.shouldNotAllowArrowKeyNavigation(event)) {\n                            return;\n                        }\n\n                        const { focusedIndex = 0 } = this.state;\n\n                        event.preventDefault();\n\n                        const newFocusedIndex = Math.max(focusedIndex - 1, 0);\n                        this.setState({ focusedIndex: newFocusedIndex });\n                    },\n                    type: hotkeyType,\n                }),\n                new HotkeyRecord({\n                    key: 'down',\n                    description: <FormattedMessage {...messages.downDescription} />,\n                    handler: event => {\n                        if (this.isTargetSlider(event) || this.shouldNotAllowArrowKeyNavigation(event)) {\n                            return;\n                        }\n\n                        const { data, gridColumnCount } = this.props;\n                        const { focusedIndex } = this.state;\n\n                        event.preventDefault();\n\n                        const newFocusedIndex =\n                            focusedIndex !== undefined ? Math.min(focusedIndex + gridColumnCount, data.length - 1) : 0;\n                        this.setState({ focusedIndex: newFocusedIndex });\n                    },\n                    type: hotkeyType,\n                }),\n                new HotkeyRecord({\n                    key: 'up',\n                    description: <FormattedMessage {...messages.upDescription} />,\n                    handler: event => {\n                        if (this.isTargetSlider(event) || this.shouldNotAllowArrowKeyNavigation(event)) {\n                            return;\n                        }\n\n                        const { gridColumnCount } = this.props;\n                        const { focusedIndex = 0 } = this.state;\n\n                        event.preventDefault();\n\n                        const newFocusedIndex = Math.max(focusedIndex - gridColumnCount, 0);\n                        this.setState({ focusedIndex: newFocusedIndex });\n                    },\n                    type: hotkeyType,\n                }),\n                new HotkeyRecord({\n                    key: 'shift+right',\n                    description: <FormattedMessage {...messages.shiftDownDescription} />,\n                    handler: () => {\n                        const { data } = this.props;\n                        const { focusedIndex } = this.state;\n\n                        if (focusedIndex === undefined) {\n                            return;\n                        }\n\n                        const newFocusedIndex = Math.min(focusedIndex + 1, data.length - 1);\n                        this.handleShiftKeyDownForGrid(newFocusedIndex, data.length - 1);\n                    },\n                    type: hotkeyType,\n                }),\n                new HotkeyRecord({\n                    key: 'shift+left',\n                    description: <FormattedMessage {...messages.shiftUpDescription} />,\n                    handler: () => {\n                        const { focusedIndex } = this.state;\n\n                        if (focusedIndex === undefined) {\n                            return;\n                        }\n\n                        const newFocusedIndex = Math.max(focusedIndex - 1, 0);\n                        this.handleShiftKeyDownForGrid(newFocusedIndex, 0);\n                    },\n                    type: hotkeyType,\n                }),\n                new HotkeyRecord({\n                    key: 'shift+down',\n                    description: <FormattedMessage {...messages.shiftDownDescription} />,\n                    handler: () => {\n                        const { data, gridColumnCount } = this.props;\n                        const { focusedIndex } = this.state;\n\n                        if (focusedIndex === undefined) {\n                            return;\n                        }\n\n                        const newFocusedIndex = Math.min(focusedIndex + gridColumnCount, data.length - 1);\n                        this.handleShiftKeyDownForGrid(newFocusedIndex, data.length - 1);\n                    },\n                    type: hotkeyType,\n                }),\n                new HotkeyRecord({\n                    key: 'shift+up',\n                    description: <FormattedMessage {...messages.shiftUpDescription} />,\n                    handler: () => {\n                        const { gridColumnCount } = this.props;\n                        const { focusedIndex } = this.state;\n\n                        if (focusedIndex === undefined) {\n                            return;\n                        }\n\n                        const newFocusedIndex = Math.max(focusedIndex - gridColumnCount, 0);\n                        this.handleShiftKeyDownForGrid(newFocusedIndex, 0);\n                    },\n                    type: hotkeyType,\n                }),\n            ];\n        };\n\n        getHotkeyConfigs = () => {\n            const { enableHotkeys, isGridView, gridColumnCount } = this.props;\n\n            if (!enableHotkeys && !this.hotkeys) {\n                this.hotkeys = [];\n            }\n\n            if (!this.hotkeys) {\n                const viewSpecificHotKeyConfigs =\n                    isGridView && gridColumnCount !== undefined\n                        ? this.getGridViewHotKeyConfigs()\n                        : this.getListViewHotKeyConfigs();\n\n                this.hotkeys = [...this.getSharedHotkeyConfigs(), ...viewSpecificHotKeyConfigs];\n            }\n\n            return this.hotkeys;\n        };\n\n        getProcessedProps = () => {\n            const { data, loadedData, selectedItems } = this.props;\n            return {\n                ...this.props,\n                loadedData: loadedData ? Set(loadedData) : Set(data),\n                selectedItems: Set.isSet(selectedItems) ? selectedItems : new Set(selectedItems),\n            };\n        };\n\n        hotkeys = null;\n\n        selectToggle = rowIndex => {\n            const { data, selectedItems } = this.getProcessedProps();\n\n            if (selectedItems.has(data[rowIndex])) {\n                this.onSelect(selectedItems.delete(data[rowIndex]), rowIndex);\n            } else {\n                this.onSelect(selectedItems.add(data[rowIndex]), rowIndex);\n            }\n\n            this.anchorIndex = rowIndex;\n        };\n\n        selectRange = rowIndex => {\n            const { data, selectedItems } = this.getProcessedProps();\n\n            // Don't change selection if we're shift-clicking the same row\n            if (rowIndex === this.previousIndex) {\n                return;\n            }\n\n            // Converts set of items to set of indices to do some slicing magic\n            const selectedRows = new Set(\n                data.reduce((rows, item, i) => {\n                    if (selectedItems.has(item)) {\n                        rows.push(i);\n                    }\n                    return rows;\n                }, []),\n            );\n\n            const newSelectedRows = shiftSelect(selectedRows, this.previousIndex, rowIndex, this.anchorIndex);\n\n            // Converts set back to set of items\n            const newSelectedItems = newSelectedRows.map(i => data[i]);\n\n            this.onSelect(newSelectedItems, rowIndex);\n        };\n\n        selectOne = rowIndex => {\n            const { data, selectedItems } = this.getProcessedProps();\n\n            // Don't change selection if we're clicking on a row that we've already selected\n            // This allows us to use the native onDoubleClick handler because we're referencing the\n            // same DOM node on double-click.\n            if (selectedItems.has(data[rowIndex]) && selectedItems.size === 1) {\n                return;\n            }\n\n            this.onSelect(new Set([data[rowIndex]]), rowIndex);\n            this.anchorIndex = rowIndex;\n        };\n\n        clearFocus = () => {\n            this.setState({\n                focusedIndex: undefined,\n            });\n        };\n\n        handleRowClick = (event, index) => {\n            if (event.metaKey || event.ctrlKey) {\n                this.selectToggle(index);\n            } else if (event.shiftKey) {\n                this.selectRange(index);\n            } else {\n                this.selectOne(index);\n            }\n        };\n\n        handleRowFocus = (event, index) => {\n            const { selectedItems } = this.getProcessedProps();\n            this.onSelect(selectedItems, index);\n        };\n\n        handleTableBlur = () => {\n            const { focusedIndex } = this.state;\n            if (focusedIndex !== undefined) {\n                // table may get focus back right away in the same tick, in which case we shouldn't clear focus\n                this.blurTimerID = setTimeout(this.clearFocus);\n            }\n        };\n\n        handleTableFocus = () => {\n            clearTimeout(this.blurTimerID);\n        };\n\n        handleShiftKeyDown = (newFocusedIndex, boundary) => {\n            const { data, selectedItems } = this.getProcessedProps();\n            const { focusedIndex } = this.state;\n\n            const focusedIndexData = data[focusedIndex];\n            const newFocusedIndexData = data[newFocusedIndex];\n\n            // if we're at a boundary of the table and the row is selected, no-op\n            if (focusedIndex === boundary && selectedItems.has(focusedIndexData)) {\n                return;\n            }\n\n            // if both the target and source are not selected, select them both\n            if (!selectedItems.has(focusedIndexData) && !selectedItems.has(newFocusedIndexData)) {\n                this.onSelect(selectedItems.union([focusedIndexData, newFocusedIndexData]), newFocusedIndex);\n                return;\n            }\n\n            // if target is not selected, select it\n            if (!selectedItems.has(newFocusedIndexData)) {\n                this.onSelect(selectedItems.add(newFocusedIndexData), newFocusedIndex);\n                return;\n            }\n\n            // if both source and target are selected, deselect source\n            if (selectedItems.has(newFocusedIndexData) && selectedItems.has(focusedIndexData)) {\n                this.onSelect(selectedItems.delete(focusedIndexData), newFocusedIndex);\n                return;\n            }\n\n            // if target is selected and source is not, select source\n            this.onSelect(selectedItems.add(focusedIndexData), newFocusedIndex);\n        };\n\n        isContiguousSelection = (selectedItemIndecies, sourceIndex, targetIndex) => {\n            if (sourceIndex < targetIndex && selectedItemIndecies.has(sourceIndex - 1)) {\n                return true;\n            }\n            if (targetIndex < sourceIndex && selectedItemIndecies.has(sourceIndex + 1)) {\n                return true;\n            }\n            return false;\n        };\n\n        handleShiftKeyDownForGrid = newFocusedIndex => {\n            const { data, loadedData, selectedItems } = this.getProcessedProps();\n            const { focusedIndex } = this.state;\n\n            const dataSize = data.length;\n            const targetIndex = newFocusedIndex < 0 ? 0 : Math.min(newFocusedIndex, dataSize - 1);\n            const isSourceSelected = selectedItems.has(data[focusedIndex]);\n            const isTargetSelected = selectedItems.has(data[targetIndex]);\n\n            // if data is not loaded, we don't want it to be able to be selected\n            if (!loadedData.has(data[targetIndex])) {\n                return;\n            }\n\n            const selectedItemIndices = new Set(\n                data.reduce((rows, item, i) => {\n                    if (selectedItems.has(item)) {\n                        rows.push(i);\n                    }\n                    return rows;\n                }, []),\n            );\n\n            // reset the anchor on a new selection block\n            if (\n                !isSourceSelected &&\n                !isTargetSelected &&\n                // if we are starting a new mass selection adjacent selected block, we want to connect them\n                !this.isContiguousSelection(selectedItemIndices, focusedIndex, targetIndex)\n            ) {\n                this.anchorIndex = focusedIndex;\n            }\n\n            const newSelectedItemIndices = shiftSelect(\n                selectedItemIndices,\n                focusedIndex,\n                targetIndex,\n                this.anchorIndex,\n            );\n\n            const newSelectedItems = newSelectedItemIndices.map(i => data[i]);\n\n            this.onSelect(newSelectedItems, targetIndex);\n        };\n\n        handleKeyboardSearch = event => {\n            const { searchStrings } = this.props;\n\n            if (!searchStrings) {\n                return;\n            }\n\n            if (\n                event.target.hasAttribute('contenteditable') ||\n                event.target.nodeName === 'INPUT' ||\n                event.target.nodeName === 'TEXTAREA'\n            ) {\n                return;\n            }\n\n            // character keys have a value for event.which\n            if (event.which === 0) {\n                return;\n            }\n\n            if (this.searchTimeout) {\n                clearTimeout(this.searchTimeout);\n            }\n\n            this.searchString += event.key;\n            this.searchTimeout = setTimeout(() => {\n                this.searchString = '';\n            }, SEARCH_TIMER_DURATION);\n\n            const index = searchStrings.findIndex(\n                string => string.trim().toLowerCase().indexOf(this.searchString) === 0,\n            );\n\n            if (index !== -1) {\n                this.setState({ focusedIndex: index });\n            }\n        };\n\n        handleCheckboxClick = (event, index) => {\n            if (event.nativeEvent.shiftKey) {\n                this.selectRange(index);\n            } else {\n                this.selectToggle(index);\n            }\n        };\n\n        isTargetSlider = event => event.target?.role === 'slider';\n\n        // Workaround for focus conflicting with Blueprint components for QuickSearch result, recent items and Quick Filters\n        isTargetQuickSearch = event => {\n            if (!event.target) {\n                return false;\n            }\n\n            const { className, dataset } = event.target;\n\n            // Quick Search Button (See All etc)\n            if (className?.includes('bp_text_button_module')) {\n                return true;\n            }\n\n            // QuickSearch Recent Item\n            if (className?.includes('quickSearchRecentItem')) {\n                return true;\n            }\n\n            // Quick Search Result Item and Footer\n            if (className?.includes('quickSearchResultItem') || className?.includes('quickSearchQueryFooter')) {\n                return true;\n            }\n\n            // Blueprint's <FilterChip>\n            if (dataset && 'radixCollectionItem' in dataset) {\n                return true;\n            }\n\n            // Blueprint's <SmallList>\n            if (dataset && 'bpSmallListItem' in dataset) {\n                return true;\n            }\n\n            return false;\n        };\n\n        isFlyoutOpen = () => document.querySelector('.flyout-overlay') !== null;\n\n        isDropdownMenuOpen = () => document.querySelector('.dropdown-menu-element') !== null;\n\n        shouldNotAllowArrowKeyNavigation = event =>\n            this.isTargetQuickSearch(event) || this.isFlyoutOpen() || this.isDropdownMenuOpen();\n\n        render() {\n            const { className, data } = this.props;\n            const { focusedIndex } = this.state;\n            const focusedItem = data[focusedIndex];\n\n            return (\n                <Hotkeys configs={this.getHotkeyConfigs()}>\n                    <BaseTable\n                        {...this.props}\n                        className={classNames(className, 'is-selectable')}\n                        focusedIndex={focusedIndex}\n                        focusedItem={focusedItem}\n                        onCheckboxClick={this.handleCheckboxClick}\n                        onRowClick={this.handleRowClick}\n                        onRowFocus={this.handleRowFocus}\n                        onTableBlur={this.handleTableBlur}\n                        onTableFocus={this.handleTableFocus}\n                    />\n                </Hotkeys>\n            );\n        }\n    };\n}\n\nexport default makeSelectable;\n"],"mappings":"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","ignoreList":[]}