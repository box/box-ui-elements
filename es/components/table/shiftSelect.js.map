{"version":3,"file":"shiftSelect.js","names":["Range","shiftSelect","prevSelection","prevTarget","target","anchor","subtract","union","Error","Array","prototype","slice","call","arguments"],"sources":["../../../src/components/table/shiftSelect.js"],"sourcesContent":["import { Range } from 'immutable';\n\n/**\n * Computes the selection when shift-selecting rows.\n *\n * When doing ranges, we may unselect items that were selected in a previous range selection\n * There are 6 cases to handle:\n * [PrevTarget, Anchor, Target]\n * [PrevTarget, Target, Anchor]\n * [Anchor, PrevTarget, Target]\n * [Anchor, Target, PrevTarget]\n * [Target, Anchor, PrevTarget]\n * [Target, PrevTarget, Anchor]\n *\n * @param {Set<Number>} prevSelection\n * @param {Number} prevTarget\n * @param {Number} target\n * @param {Number} anchor\n * @return {Set<Number>}\n */\nfunction shiftSelect(prevSelection, prevTarget, target, anchor) {\n    if (prevTarget <= anchor && anchor <= target) {\n        // [PrevTarget, Anchor, Target]\n        return prevSelection.subtract(new Range(prevTarget, anchor + 1)).union(new Range(anchor, target + 1));\n    }\n    if (prevTarget <= target && target <= anchor) {\n        // [PrevTarget, Target, Anchor]\n        return prevSelection.subtract(new Range(prevTarget, target + 1)).union(new Range(target, anchor + 1));\n    }\n    if (anchor <= prevTarget && prevTarget <= target) {\n        // [Anchor, PrevTarget, Target]\n        return prevSelection.union(new Range(anchor, target + 1));\n    }\n    if (anchor <= target && target <= prevTarget) {\n        // [Anchor, Target, PrevTarget]\n        return prevSelection.subtract(new Range(target, prevTarget + 1)).union(new Range(anchor, target + 1));\n    }\n    if (target <= anchor && anchor <= prevTarget) {\n        // [Target, Anchor, PrevTarget]\n        return prevSelection.subtract(new Range(anchor, prevTarget + 1)).union(new Range(target, anchor + 1));\n    }\n    if (target <= prevTarget && target <= anchor) {\n        // [Target, PrevTarget, Anchor]\n        return prevSelection.union(new Range(target, anchor + 1));\n    }\n\n    throw new Error(\n        `Invalid shiftSelect params: [${Array.prototype.slice.call(\n            arguments, // eslint-disable-line prefer-rest-params\n        )}]`,\n    );\n}\n\nexport default shiftSelect;\n"],"mappings":"AAAA,SAASA,KAAK,QAAQ,WAAW;;AAEjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,WAAWA,CAACC,aAAa,EAAEC,UAAU,EAAEC,MAAM,EAAEC,MAAM,EAAE;EAC5D,IAAIF,UAAU,IAAIE,MAAM,IAAIA,MAAM,IAAID,MAAM,EAAE;IAC1C;IACA,OAAOF,aAAa,CAACI,QAAQ,CAAC,IAAIN,KAAK,CAACG,UAAU,EAAEE,MAAM,GAAG,CAAC,CAAC,CAAC,CAACE,KAAK,CAAC,IAAIP,KAAK,CAACK,MAAM,EAAED,MAAM,GAAG,CAAC,CAAC,CAAC;EACzG;EACA,IAAID,UAAU,IAAIC,MAAM,IAAIA,MAAM,IAAIC,MAAM,EAAE;IAC1C;IACA,OAAOH,aAAa,CAACI,QAAQ,CAAC,IAAIN,KAAK,CAACG,UAAU,EAAEC,MAAM,GAAG,CAAC,CAAC,CAAC,CAACG,KAAK,CAAC,IAAIP,KAAK,CAACI,MAAM,EAAEC,MAAM,GAAG,CAAC,CAAC,CAAC;EACzG;EACA,IAAIA,MAAM,IAAIF,UAAU,IAAIA,UAAU,IAAIC,MAAM,EAAE;IAC9C;IACA,OAAOF,aAAa,CAACK,KAAK,CAAC,IAAIP,KAAK,CAACK,MAAM,EAAED,MAAM,GAAG,CAAC,CAAC,CAAC;EAC7D;EACA,IAAIC,MAAM,IAAID,MAAM,IAAIA,MAAM,IAAID,UAAU,EAAE;IAC1C;IACA,OAAOD,aAAa,CAACI,QAAQ,CAAC,IAAIN,KAAK,CAACI,MAAM,EAAED,UAAU,GAAG,CAAC,CAAC,CAAC,CAACI,KAAK,CAAC,IAAIP,KAAK,CAACK,MAAM,EAAED,MAAM,GAAG,CAAC,CAAC,CAAC;EACzG;EACA,IAAIA,MAAM,IAAIC,MAAM,IAAIA,MAAM,IAAIF,UAAU,EAAE;IAC1C;IACA,OAAOD,aAAa,CAACI,QAAQ,CAAC,IAAIN,KAAK,CAACK,MAAM,EAAEF,UAAU,GAAG,CAAC,CAAC,CAAC,CAACI,KAAK,CAAC,IAAIP,KAAK,CAACI,MAAM,EAAEC,MAAM,GAAG,CAAC,CAAC,CAAC;EACzG;EACA,IAAID,MAAM,IAAID,UAAU,IAAIC,MAAM,IAAIC,MAAM,EAAE;IAC1C;IACA,OAAOH,aAAa,CAACK,KAAK,CAAC,IAAIP,KAAK,CAACI,MAAM,EAAEC,MAAM,GAAG,CAAC,CAAC,CAAC;EAC7D;EAEA,MAAM,IAAIG,KAAK,CACX,gCAAgCC,KAAK,CAACC,SAAS,CAACC,KAAK,CAACC,IAAI,CACtDC,SAAS,CAAE;EACf,CAAC,GACL,CAAC;AACL;AAEA,eAAeZ,WAAW","ignoreList":[]}