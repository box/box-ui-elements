{"version":3,"file":"Avatar.js","names":["React","injectIntl","classNames","Badgeable","AvatarImage","AvatarInitials","UnknownUserAvatar","GlobeBadge16","messages","SIZES","small","large","Avatar","avatarUrl","badgeIcon","className","name","id","intl","isExternal","shouldShowExternal","size","formatMessage","hasImageErrored","setHasImageErrored","useState","prevAvatarUrl","setPrevAvatarUrl","classes","avatar","createElement","onError","url","badge","title","externalUser","bottomRight","AvatarBase"],"sources":["../../../src/components/avatar/Avatar.tsx"],"sourcesContent":["import * as React from 'react';\nimport { injectIntl, IntlShape } from 'react-intl';\nimport classNames from 'classnames';\nimport Badgeable from '../badgeable';\nimport AvatarImage from './AvatarImage';\nimport AvatarInitials from './AvatarInitials';\nimport UnknownUserAvatar from './UnknownUserAvatar';\nimport GlobeBadge16 from '../../icon/fill/GlobeBadge16';\n\nimport messages from './messages';\n\nimport './Avatar.scss';\n\nconst SIZES = { small: true, large: true };\n\nexport interface AvatarProps {\n    /**\n     * Url to avatar image.  If passed in, component will render the avatar image instead of the initials\n     *\n     * Required if \"name\" is not specified.\n     */\n    avatarUrl?: string | null;\n    /**\n     * Icon React Element that will be shown as a badge in bottom right corner of Avatar.\n     *\n     * Will not be used if `shouldShowExternal` and `isExternal` is true, then GlobalBadge will be shown.\n     */\n    badgeIcon?: React.ReactElement;\n    /** classname to add to the container element. */\n    className?: string;\n    /** Users id */\n    id?: string | number | null;\n    /** Intl object */\n    intl: IntlShape;\n    /** Whether this avatar should be labeled as external in the current context */\n    isExternal?: boolean;\n    /**\n     * Users full name.\n     *\n     * Required if \"avatarUrl\" is not specified.\n     */\n    name?: string | null;\n    /** Show the external avatar marker if the avatar is marked as for an external user */\n    shouldShowExternal?: boolean;\n    /* avatar size (enum) */\n    size?: keyof typeof SIZES | '';\n}\n\nfunction Avatar({\n    avatarUrl,\n    badgeIcon,\n    className,\n    name,\n    id,\n    intl,\n    isExternal,\n    shouldShowExternal = false,\n    size = '',\n}: AvatarProps) {\n    const { formatMessage } = intl;\n\n    const [hasImageErrored, setHasImageErrored] = React.useState<boolean>(false);\n    const [prevAvatarUrl, setPrevAvatarUrl] = React.useState<AvatarProps['avatarUrl']>(null);\n\n    const classes = classNames([\n        'avatar',\n        className,\n        {\n            [`avatar--${size}`]: size && SIZES[size],\n            'avatar--isExternal': shouldShowExternal && isExternal,\n            'avatar--iconBadge': !!badgeIcon,\n        },\n    ]);\n\n    // Reset hasImageErrored state when avatarUrl changes\n    if (avatarUrl !== prevAvatarUrl) {\n        setHasImageErrored(false);\n        setPrevAvatarUrl(avatarUrl);\n    }\n\n    let avatar;\n    if (avatarUrl && !hasImageErrored) {\n        avatar = (\n            <AvatarImage\n                onError={() => {\n                    setHasImageErrored(true);\n                }}\n                url={avatarUrl}\n            />\n        );\n    } else if (name) {\n        avatar = <AvatarInitials id={id} name={name} />;\n    } else {\n        avatar = <UnknownUserAvatar className=\"avatar-icon\" />;\n    }\n\n    let badge = null;\n    if (shouldShowExternal && isExternal) {\n        badge = <GlobeBadge16 className=\"bdl-Avatar-externalBadge\" title={formatMessage(messages.externalUser)} />;\n    } else if (badgeIcon) {\n        badge = <div className=\"bdl-Avatar-badge bdl-Avatar-iconBadge\">{badgeIcon}</div>;\n    }\n\n    return (\n        <Badgeable className={classes} bottomRight={badge}>\n            <span>{avatar}</span>\n        </Badgeable>\n    );\n}\n\nexport { Avatar as AvatarBase };\nexport default injectIntl(Avatar);\n"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,UAAU,QAAmB,YAAY;AAClD,OAAOC,UAAU,MAAM,YAAY;AACnC,OAAOC,SAAS,MAAM,cAAc;AACpC,OAAOC,WAAW,MAAM,eAAe;AACvC,OAAOC,cAAc,MAAM,kBAAkB;AAC7C,OAAOC,iBAAiB,MAAM,qBAAqB;AACnD,OAAOC,YAAY,MAAM,8BAA8B;AAEvD,OAAOC,QAAQ,MAAM,YAAY;AAEjC,OAAO,eAAe;AAEtB,MAAMC,KAAK,GAAG;EAAEC,KAAK,EAAE,IAAI;EAAEC,KAAK,EAAE;AAAK,CAAC;AAmC1C,SAASC,MAAMA,CAAC;EACZC,SAAS;EACTC,SAAS;EACTC,SAAS;EACTC,IAAI;EACJC,EAAE;EACFC,IAAI;EACJC,UAAU;EACVC,kBAAkB,GAAG,KAAK;EAC1BC,IAAI,GAAG;AACE,CAAC,EAAE;EACZ,MAAM;IAAEC;EAAc,CAAC,GAAGJ,IAAI;EAE9B,MAAM,CAACK,eAAe,EAAEC,kBAAkB,CAAC,GAAGxB,KAAK,CAACyB,QAAQ,CAAU,KAAK,CAAC;EAC5E,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAG3B,KAAK,CAACyB,QAAQ,CAA2B,IAAI,CAAC;EAExF,MAAMG,OAAO,GAAG1B,UAAU,CAAC,CACvB,QAAQ,EACRa,SAAS,EACT;IACI,CAAC,WAAWM,IAAI,EAAE,GAAGA,IAAI,IAAIZ,KAAK,CAACY,IAAI,CAAC;IACxC,oBAAoB,EAAED,kBAAkB,IAAID,UAAU;IACtD,mBAAmB,EAAE,CAAC,CAACL;EAC3B,CAAC,CACJ,CAAC;;EAEF;EACA,IAAID,SAAS,KAAKa,aAAa,EAAE;IAC7BF,kBAAkB,CAAC,KAAK,CAAC;IACzBG,gBAAgB,CAACd,SAAS,CAAC;EAC/B;EAEA,IAAIgB,MAAM;EACV,IAAIhB,SAAS,IAAI,CAACU,eAAe,EAAE;IAC/BM,MAAM,gBACF7B,KAAA,CAAA8B,aAAA,CAAC1B,WAAW;MACR2B,OAAO,EAAEA,CAAA,KAAM;QACXP,kBAAkB,CAAC,IAAI,CAAC;MAC5B,CAAE;MACFQ,GAAG,EAAEnB;IAAU,CAClB,CACJ;EACL,CAAC,MAAM,IAAIG,IAAI,EAAE;IACba,MAAM,gBAAG7B,KAAA,CAAA8B,aAAA,CAACzB,cAAc;MAACY,EAAE,EAAEA,EAAG;MAACD,IAAI,EAAEA;IAAK,CAAE,CAAC;EACnD,CAAC,MAAM;IACHa,MAAM,gBAAG7B,KAAA,CAAA8B,aAAA,CAACxB,iBAAiB;MAACS,SAAS,EAAC;IAAa,CAAE,CAAC;EAC1D;EAEA,IAAIkB,KAAK,GAAG,IAAI;EAChB,IAAIb,kBAAkB,IAAID,UAAU,EAAE;IAClCc,KAAK,gBAAGjC,KAAA,CAAA8B,aAAA,CAACvB,YAAY;MAACQ,SAAS,EAAC,0BAA0B;MAACmB,KAAK,EAAEZ,aAAa,CAACd,QAAQ,CAAC2B,YAAY;IAAE,CAAE,CAAC;EAC9G,CAAC,MAAM,IAAIrB,SAAS,EAAE;IAClBmB,KAAK,gBAAGjC,KAAA,CAAA8B,aAAA;MAAKf,SAAS,EAAC;IAAuC,GAAED,SAAe,CAAC;EACpF;EAEA,oBACId,KAAA,CAAA8B,aAAA,CAAC3B,SAAS;IAACY,SAAS,EAAEa,OAAQ;IAACQ,WAAW,EAAEH;EAAM,gBAC9CjC,KAAA,CAAA8B,aAAA,eAAOD,MAAa,CACb,CAAC;AAEpB;AAEA,SAASjB,MAAM,IAAIyB,UAAU;AAC7B,eAAepC,UAAU,CAACW,MAAM,CAAC","ignoreList":[]}