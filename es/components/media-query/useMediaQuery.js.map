{"version":3,"file":"useMediaQuery.js","names":["toQuery","useMediaQuery","_useMediaQuery","ANY_HOVER","ANY_POINTER_COARSE","ANY_POINTER_FINE","HOVER","HOVER_TYPE","POINTER_COARSE","POINTER_FINE","POINTER_TYPE","SIZE_LARGE","SIZE_MEDIUM","SIZE_SMALL","VIEW_SIZE_TYPE","getPointerCapabilities","isFine","isCoarse","none","fine","coarse","getViewDimensions","viewWidth","window","innerWidth","viewHeight","innerHeight","formatQuery","query","useQuery","onQueryChange","useDeviceCapabilities","isHover","isAnyHover","anyHover","hover","pointer","anyPointer","isTouchDevice","useDeviceSize","isSmall","isMedium","isLarge","small","medium","large","xlarge","deviceCapabilities","deviceSize","viewDimensions","_objectSpread","size"],"sources":["../../../src/components/media-query/useMediaQuery.js"],"sourcesContent":["// @flow\n\nimport { toQuery, useMediaQuery as _useMediaQuery } from 'react-responsive';\nimport {\n    ANY_HOVER,\n    ANY_POINTER_COARSE,\n    ANY_POINTER_FINE,\n    HOVER,\n    HOVER_TYPE,\n    POINTER_COARSE,\n    POINTER_FINE,\n    POINTER_TYPE,\n    SIZE_LARGE,\n    SIZE_MEDIUM,\n    SIZE_SMALL,\n    VIEW_SIZE_TYPE,\n} from './constants';\nimport type { MediaQuery, MediaShape } from './types';\n\nconst getPointerCapabilities = (isFine: boolean, isCoarse: boolean) => {\n    if (!isFine && !isCoarse) return POINTER_TYPE.none;\n    if (isFine) return POINTER_TYPE.fine;\n    return POINTER_TYPE.coarse;\n};\n\nconst getViewDimensions = () => {\n    return { viewWidth: window.innerWidth, viewHeight: window.innerHeight };\n};\n\n/**\n * Formats the media query either as a MediaQuery object or string\n * @param query\n * @returns {string}\n */\nfunction formatQuery(query: MediaQuery): string {\n    return typeof query === 'string' ? query : toQuery(query);\n}\n\n/**\n * Executes media query\n * @param query\n * @param onQueryChange\n * @returns {boolean}\n */\nfunction useQuery(query: MediaQuery, onQueryChange?: (_: boolean) => void): boolean {\n    return _useMediaQuery({ query: formatQuery(query) }, null, onQueryChange);\n}\n\n/**\n * Determines device capabilities for hover and pointer features\n * @returns {{anyPointer: *, hover: (string), pointer: *, anyHover: (string)}}\n */\nfunction useDeviceCapabilities() {\n    const isHover: boolean = useQuery(HOVER);\n    const isAnyHover: boolean = useQuery(ANY_HOVER);\n\n    const anyHover = isAnyHover ? HOVER_TYPE.hover : HOVER_TYPE.none;\n    const hover = isHover ? HOVER_TYPE.hover : HOVER_TYPE.none;\n    const pointer = getPointerCapabilities(useQuery(POINTER_FINE), useQuery(POINTER_COARSE));\n    const anyPointer = getPointerCapabilities(useQuery(ANY_POINTER_FINE), useQuery(ANY_POINTER_COARSE));\n\n    const isTouchDevice = hover === HOVER_TYPE.none && pointer === POINTER_TYPE.coarse;\n\n    return {\n        anyHover,\n        hover,\n        anyPointer,\n        pointer,\n        isTouchDevice,\n    };\n}\n\n/**\n * Determines device size using media queries\n * @returns {string}\n */\nfunction useDeviceSize() {\n    const isSmall: boolean = useQuery(SIZE_SMALL);\n    const isMedium: boolean = useQuery(SIZE_MEDIUM);\n    const isLarge: boolean = useQuery(SIZE_LARGE);\n\n    if (isSmall) return VIEW_SIZE_TYPE.small;\n    if (isMedium) return VIEW_SIZE_TYPE.medium;\n    if (isLarge) return VIEW_SIZE_TYPE.large;\n\n    return VIEW_SIZE_TYPE.xlarge;\n}\n\nfunction useMediaQuery(): MediaShape {\n    const deviceCapabilities = useDeviceCapabilities();\n    const deviceSize = useDeviceSize();\n    const viewDimensions = getViewDimensions();\n    return {\n        ...deviceCapabilities,\n        ...viewDimensions,\n        size: deviceSize,\n    };\n}\n\nexport default useMediaQuery;\n"],"mappings":"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","ignoreList":[]}