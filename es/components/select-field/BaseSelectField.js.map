{"version":3,"file":"BaseSelectField.js","names":["React","classNames","uniqueId","findIndex","FormattedMessage","injectIntl","scrollIntoView","IconCheck","SelectButton","DatalistItem","PopperComponent","SelectFieldDropdown","PLACEMENT_BOTTOM_END","PLACEMENT_BOTTOM_START","SearchForm","CLEAR","ARROW_DOWN","ARROW_UP","ENTER","ESCAPE","SPACE","TAB","messages","stopDefaultEvent","event","preventDefault","stopPropagation","toggleOption","options","value","index","indexOf","push","splice","defaultOptionRenderer","displayText","createElement","className","title","BaseSelectField","Component","constructor","props","_defineProperty","text","optionIndex","element","toLowerCase","includes","setActiveItem","setState","searchText","container","selectFieldContainerRef","current","isInside","target","Node","contains","closeDropdown","shouldScrollIntoView","activeItemIndex","setActiveItemID","id","state","itemEl","document","getElementById","activeItemID","block","selectedItems","onChange","selectedItem","onOptionSelect","isOpen","openDropdown","handleChange","key","blurExceptionClassNames","exceptionClasses","relatedTarget","every","classList","shouldShowClearOption","shouldShowSearchInput","itemCount","length","nextIndex","prevIndex","isClearOption","handleClearClick","selectOption","lowerCaseKey","option","searchInputRef","focus","addEventListener","handleDocumentClick","removeEventListener","multiple","selectMultiOption","selectSingleOption","filter","isSubstring","defaultValue","selectedValues","hasDefaultValue","item","getFilteredOptions","newSelectedValues","slice","defaultOptionIndex","handleOptionSelect","placeholder","selectedItemCount","selectedOptions","map","join","intl","getSearchInput","updateSearchText","formatMessage","searchPlaceholder","buttonProps","buttonElProps","isDisabled","error","errorTooltipPosition","tooltipTetherClassName","buttonText","renderButtonText","_objectSpread","selectFieldID","onClick","handleButtonClick","onKeyDown","handleButtonKeyDown","role","_extends","optionRenderer","separatorIndices","filteredOptions","noResults","selectOptions","isSelected","itemProps","onMouseEnter","isActive","height","width","forEach","separatorIndex","createRef","componentWillUnmount","render","isEscapedWithReference","isRightAligned","isScrollable","dropdownPlacement","dropdownModifiers","preventOverflow","escapeWithReference","onBlur","handleBlur","handleKeyDown","ref","placement","modifiers","renderSelectButton","renderSearchInput","renderSelectOptions","BaseSelectFieldBase"],"sources":["../../../src/components/select-field/BaseSelectField.js"],"sourcesContent":["// @flow\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport uniqueId from 'lodash/uniqueId';\nimport findIndex from 'lodash/findIndex';\nimport { FormattedMessage, injectIntl } from 'react-intl';\n\nimport { scrollIntoView } from '../../utils/dom';\nimport IconCheck from '../../icons/general/IconCheck';\nimport SelectButton from '../select-button';\nimport DatalistItem from '../datalist-item';\nimport PopperComponent from '../popper';\nimport SelectFieldDropdown from './SelectFieldDropdown';\nimport type { Position } from '../tooltip';\nimport type { SelectOptionValueProp, SelectOptionProp } from './props';\nimport { PLACEMENT_BOTTOM_END, PLACEMENT_BOTTOM_START } from '../popper/constants';\nimport SearchForm from '../search-form/SearchForm';\nimport CLEAR from './constants';\nimport { ARROW_DOWN, ARROW_UP, ENTER, ESCAPE, SPACE, TAB } from '../../common/keyboard-events';\n\nimport messages from './messages';\n\nimport './SelectField.scss';\n\nfunction stopDefaultEvent(event) {\n    event.preventDefault();\n    event.stopPropagation();\n}\n\nfunction toggleOption(options, value) {\n    const index = options.indexOf(value);\n\n    if (index === -1) {\n        options.push(value);\n    } else {\n        options.splice(index, 1);\n    }\n}\n\ntype Props = {\n    /** List of classnames of the relatedTarget that should prevent handleBlur from firing */\n    blurExceptionClassNames?: Array<string>,\n    /** Props to add to the button element */\n    buttonProps?: Object,\n    /** CSS class for the select container */\n    className?: string,\n    /** The fallback option value when other options are all unselected. Default option cannot be selected at the same time as other options. `selectedValues` must not be empty when this option is used. */\n    defaultValue?: SelectOptionValueProp,\n    /** An optional error to show within a tooltip. */\n    error?: React.Node,\n    /** Position of error message tooltip */\n    errorTooltipPosition?: Position,\n    /* Intl object */\n    intl: Object,\n    /** The select button is disabled if true */\n    isDisabled?: boolean,\n    /** Whether to allow the dropdown to overflow its boundaries and remain attached to its reference */\n    isEscapedWithReference?: boolean,\n    /** Whether to align the dropdown to the right */\n    isRightAligned: boolean,\n    /** The select field overlay (dropdown) will have a scrollbar and max-height if true * */\n    isScrollable?: boolean,\n    multiple: boolean,\n    /** Function will be called with an array of all selected options after user selects a new option */\n    onChange: Function,\n    /** Function will be called with the user selected option (even on deselect or when the option was previously selected) */\n    onOptionSelect?: Function,\n    /** Function that allows custom rendering of select field options. When not provided the component will only render the option's displayText by default */\n    optionRenderer: (option: SelectOptionProp) => React.Node,\n    /** List of options (displayText, value) */\n    options: Array<SelectOptionProp>,\n    /** The select button text shown when no options are selected. */\n    placeholder?: string | React.Element<any>,\n    /** The currently selected option values (can be empty) */\n    selectedValues: Array<SelectOptionValueProp>,\n    /** Array of ordered indices indicating where to insert separators (ex. index 2 means insert a separator after option 2) */\n    separatorIndices: Array<number>,\n    /** Boolean to determine whether or not to show the clear option */\n    shouldShowClearOption?: boolean,\n    /** Boolean to determine whether or not to show the search field */\n    shouldShowSearchInput?: boolean,\n    /** The select button text (by default, component will use comma separated list of all selected option displayText) */\n    title?: string | React.Element<any>,\n    /** A CSS class for the tooltip's tether element component */\n    tooltipTetherClassName?: string,\n};\n\ntype State = {\n    activeItemID: ?string,\n    activeItemIndex: number,\n    isOpen: boolean,\n    searchText: string,\n    shouldScrollIntoView: boolean,\n};\n\nfunction defaultOptionRenderer({ displayText }: SelectOptionProp) {\n    return (\n        <span className=\"bdl-SelectField-optionText\" title={displayText}>\n            {displayText}\n        </span>\n    );\n}\n\nclass BaseSelectField extends React.Component<Props, State> {\n    static defaultProps = {\n        buttonProps: {},\n        isDisabled: false,\n        isRightAligned: false,\n        isScrollable: false,\n        multiple: false,\n        optionRenderer: defaultOptionRenderer,\n        options: [],\n        selectedValues: [],\n        separatorIndices: [],\n        shouldShowClearOption: false,\n        shouldShowSearchInput: false,\n    };\n\n    constructor(props: Props) {\n        super(props);\n\n        this.selectFieldID = uniqueId('selectfield');\n\n        this.selectFieldContainerRef = React.createRef();\n\n        this.state = {\n            activeItemID: null,\n            activeItemIndex: -1,\n            isOpen: false,\n            searchText: '',\n            shouldScrollIntoView: false,\n        };\n    }\n\n    componentWillUnmount() {\n        if (this.state.isOpen) {\n            // Clean-up global click handlers\n            document.removeEventListener('click', this.handleDocumentClick);\n        }\n    }\n\n    updateSearchText = (text: string) => {\n        const { options } = this.props;\n        const optionIndex = findIndex(options, element =>\n            element.displayText.toLowerCase().includes(text.toLowerCase()),\n        );\n\n        if (optionIndex >= 0) {\n            this.setActiveItem(optionIndex);\n        }\n\n        this.setState({\n            searchText: text,\n        });\n    };\n\n    handleDocumentClick = (event: MouseEvent) => {\n        const container = this.selectFieldContainerRef.current;\n        const isInside =\n            (container && event.target instanceof Node && container.contains(event.target)) ||\n            container === event.target;\n\n        if (!isInside) {\n            this.closeDropdown();\n        }\n    };\n\n    setActiveItem = (index: number, shouldScrollIntoView?: boolean = true) => {\n        this.setState({ activeItemIndex: index, shouldScrollIntoView });\n        if (index === -1) {\n            this.setActiveItemID(null);\n        }\n    };\n\n    setActiveItemID = (id: ?string) => {\n        const { shouldScrollIntoView } = this.state;\n        const itemEl = id ? document.getElementById(id) : null;\n\n        this.setState({ activeItemID: id, shouldScrollIntoView: false }, () => {\n            if (shouldScrollIntoView) {\n                scrollIntoView(itemEl, { block: 'nearest' });\n            }\n        });\n    };\n\n    selectFieldID: string;\n\n    selectFieldContainerRef: { current: null | HTMLDivElement };\n\n    searchInputRef: HTMLInputElement;\n\n    handleChange = (selectedItems: Array<SelectOptionProp>) => {\n        const { onChange } = this.props;\n\n        if (onChange) {\n            onChange(selectedItems);\n        }\n    };\n\n    handleOptionSelect = (selectedItem: SelectOptionProp) => {\n        const { onOptionSelect } = this.props;\n\n        if (onOptionSelect) {\n            onOptionSelect(selectedItem);\n        }\n    };\n\n    handleButtonClick = () => {\n        if (this.state.isOpen) {\n            this.closeDropdown();\n        } else {\n            this.openDropdown();\n        }\n    };\n\n    handleClearClick = () => {\n        this.handleChange([]);\n    };\n\n    handleButtonKeyDown = (event: SyntheticKeyboardEvent<>) => {\n        const { activeItemIndex } = this.state;\n\n        // If user is interacting with the select dropdown, don't close on space/enter (i.e. prevent click event)\n        if ((event.key === SPACE || event.key === ENTER) && activeItemIndex !== -1) {\n            event.preventDefault();\n        }\n    };\n\n    handleBlur = (event?: SyntheticFocusEvent<>) => {\n        const { isOpen } = this.state;\n        const { blurExceptionClassNames = [] } = this.props;\n\n        const exceptionClasses = ['search-input', 'select-button', ...blurExceptionClassNames];\n\n        if (\n            isOpen &&\n            event &&\n            event.relatedTarget &&\n            exceptionClasses.every(\n                className => event && !(event.relatedTarget: window.HTMLInputElement).classList.contains(className),\n            )\n        ) {\n            this.closeDropdown();\n        }\n    };\n\n    handleKeyDown = (event: SyntheticKeyboardEvent<HTMLDivElement>) => {\n        const { key } = event;\n        const { options, shouldShowClearOption, shouldShowSearchInput } = this.props;\n        const { activeItemIndex, isOpen } = this.state;\n        const itemCount = options.length;\n        switch (key) {\n            case ARROW_DOWN:\n                stopDefaultEvent(event);\n                if (isOpen) {\n                    const nextIndex = activeItemIndex === itemCount - 1 ? -1 : activeItemIndex + 1;\n                    this.setActiveItem(nextIndex);\n                } else {\n                    this.openDropdown();\n                }\n                break;\n            case ARROW_UP:\n                stopDefaultEvent(event);\n                if (isOpen) {\n                    const prevIndex = activeItemIndex === -1 ? itemCount - 1 : activeItemIndex - 1;\n                    this.setActiveItem(prevIndex);\n                } else {\n                    this.openDropdown();\n                }\n                break;\n            case ENTER:\n            case SPACE:\n                if (shouldShowSearchInput) {\n                    // Allow space key presses in the search string when search field is active\n                    if (key === SPACE) {\n                        break;\n                    }\n\n                    // Enter presses should be ignored when no item is active\n                    if (key === ENTER && activeItemIndex === -1) {\n                        stopDefaultEvent(event);\n                        break;\n                    }\n                }\n\n                if (activeItemIndex !== -1 && isOpen) {\n                    stopDefaultEvent(event);\n                    const isClearOption = shouldShowClearOption && activeItemIndex === 0;\n                    if (isClearOption) {\n                        this.handleClearClick();\n                    } else {\n                        this.selectOption(activeItemIndex);\n                    }\n                    // Enter always closes dropdown (even for multiselect)\n                    if (key === ENTER) {\n                        this.closeDropdown();\n                    }\n                }\n                break;\n            case ESCAPE:\n                if (isOpen) {\n                    stopDefaultEvent(event);\n                    this.closeDropdown();\n                }\n                break;\n            case TAB:\n                if (isOpen) {\n                    this.closeDropdown();\n                }\n                break;\n            default: {\n                if (!shouldShowSearchInput) {\n                    stopDefaultEvent(event);\n                    const lowerCaseKey = key.toLowerCase();\n                    const optionIndex = findIndex(\n                        options,\n                        option => option.displayText.toLowerCase().indexOf(lowerCaseKey) === 0,\n                    );\n\n                    if (optionIndex >= 0) {\n                        this.setActiveItem(optionIndex);\n                    }\n                }\n            }\n        }\n    };\n\n    openDropdown = () => {\n        const { shouldShowSearchInput } = this.props;\n        if (!this.state.isOpen) {\n            this.setState(\n                { isOpen: true },\n                () => shouldShowSearchInput && this.searchInputRef && this.searchInputRef.focus(),\n            );\n            document.addEventListener('click', this.handleDocumentClick);\n        }\n    };\n\n    closeDropdown = () => {\n        if (this.state.isOpen) {\n            this.setState({\n                activeItemID: null,\n                activeItemIndex: -1,\n                isOpen: false,\n                searchText: '',\n            });\n            document.removeEventListener('click', this.handleDocumentClick);\n        }\n    };\n\n    selectOption = (index: number) => {\n        const { multiple } = this.props;\n\n        if (multiple) {\n            this.selectMultiOption(index);\n        } else {\n            this.selectSingleOption(index);\n            this.closeDropdown(); // Close dropdown for single select fields\n        }\n    };\n\n    getFilteredOptions = (): Array<SelectOptionProp> => {\n        const { options } = this.props;\n        const { searchText } = this.state;\n\n        return options.filter(option => {\n            const isSubstring = option.displayText.toLowerCase().includes(searchText.toLowerCase());\n            const isClearOption = option.value === CLEAR;\n\n            return searchText ? isSubstring && !isClearOption : true;\n        });\n    };\n\n    selectSingleOption(index: number) {\n        const { selectedValues } = this.props;\n        const item = this.getFilteredOptions()[index];\n        // If item not previously selected, fire change handler\n        if (!selectedValues.includes(item.value)) {\n            this.handleChange([item]);\n        }\n        this.handleOptionSelect(item);\n    }\n\n    selectMultiOption = (index: number) => {\n        const { defaultValue, options, selectedValues } = this.props;\n        const hasDefaultValue = defaultValue != null; // Checks if not undefined or null\n        const item = this.getFilteredOptions()[index];\n\n        // If we are already using the default option, just return without firing onChange\n        if (hasDefaultValue && defaultValue === item.value) {\n            this.selectSingleOption(index);\n            return;\n        }\n\n        // Copy the array so we can freely modify it\n        const newSelectedValues = selectedValues.slice(0);\n        toggleOption(newSelectedValues, item.value);\n\n        // Apply constraints if a defaultValue is specified\n        if (hasDefaultValue) {\n            const defaultOptionIndex = findIndex(options, option => option.value === defaultValue);\n\n            if (defaultOptionIndex !== -1) {\n                if (newSelectedValues.length === 0) {\n                    // If nothing is selected, we should select the default option\n                    this.selectSingleOption(defaultOptionIndex);\n                    return;\n                }\n                if (newSelectedValues.length > 1 && newSelectedValues.includes(defaultValue)) {\n                    // Remove the default option from the selected values when more than one thing is selected\n                    newSelectedValues.splice(defaultOptionIndex, 1);\n                }\n            }\n        }\n\n        // Fire onchange event with selected items\n        this.handleChange(options.filter(option => newSelectedValues.includes(option.value)));\n\n        this.handleOptionSelect(item);\n    };\n\n    renderButtonText = () => {\n        const { options, placeholder, selectedValues, title } = this.props;\n        const selectedItemCount = selectedValues.length;\n\n        // When there are no options selected, render placeholder\n        if (selectedItemCount === 0 && placeholder) {\n            return placeholder;\n        }\n\n        // User-specified title when options are selected\n        if (title) {\n            return title;\n        }\n\n        // Auto-generate button title based on selected options\n        const selectedOptions = options.filter(option => selectedValues.includes(option.value));\n        return selectedOptions.map(option => option.displayText).join(', ');\n    };\n\n    renderSearchInput = () => {\n        const { intl } = this.props;\n        const { searchText } = this.state;\n        const getSearchInput = element => {\n            this.searchInputRef = element;\n        };\n\n        return (\n            <SearchForm\n                className=\"select-field-search-container\"\n                getSearchInput={getSearchInput}\n                onChange={this.updateSearchText}\n                placeholder={intl.formatMessage(messages.searchPlaceholder)}\n                value={searchText}\n            />\n        );\n    };\n\n    renderSelectButton = () => {\n        const { activeItemID, isOpen } = this.state;\n        const {\n            buttonProps: buttonElProps,\n            isDisabled,\n            className,\n            error,\n            errorTooltipPosition,\n            tooltipTetherClassName,\n        } = this.props;\n        const buttonText = this.renderButtonText();\n        const buttonProps = {\n            ...buttonElProps,\n            'aria-activedescendant': activeItemID,\n            'aria-autocomplete': 'list',\n            'aria-expanded': isOpen,\n            'aria-owns': this.selectFieldID,\n            className,\n            isDisabled,\n            onClick: this.handleButtonClick,\n            onKeyDown: this.handleButtonKeyDown,\n            // @NOTE: Technically, only text inputs should be combo-boxes but ARIA specs do not cover custom select dropdowns\n            role: 'listbox',\n            title: buttonText,\n        };\n\n        return (\n            // Need to store the select button reference so we can calculate the button width\n            // in order to set it as the min width of the dropdown list\n            <SelectButton\n                {...buttonProps}\n                error={error}\n                errorTooltipPosition={errorTooltipPosition}\n                tooltipTetherClassName={tooltipTetherClassName}\n            >\n                {buttonText}\n            </SelectButton>\n        );\n    };\n\n    renderSelectOptions = () => {\n        const { optionRenderer, selectedValues, separatorIndices, shouldShowClearOption } = this.props;\n        const { activeItemIndex } = this.state;\n\n        const filteredOptions = this.getFilteredOptions();\n\n        if (filteredOptions.length === 0) {\n            return (\n                <DatalistItem className=\"select-option is-disabled\">\n                    <FormattedMessage {...messages.noResults} />\n                </DatalistItem>\n            );\n        }\n\n        const selectOptions = filteredOptions.map<React.Element<typeof DatalistItem | 'li'>>((item, index) => {\n            const { value } = item;\n\n            const isSelected = selectedValues.includes(value);\n\n            const isClearOption = shouldShowClearOption && value === CLEAR;\n\n            const itemProps: Object = {\n                className: classNames('select-option', { 'is-clear-option': isClearOption }),\n                key: index,\n                /* preventDefault on click to prevent wrapping label from re-triggering the select button */\n                onClick: event => {\n                    event.preventDefault();\n                    if (isClearOption) {\n                        this.handleClearClick();\n                    } else {\n                        this.selectOption(index);\n                    }\n                },\n                onMouseEnter: () => {\n                    this.setActiveItem(index, false);\n                },\n                setActiveItemID: this.setActiveItemID,\n            };\n\n            if (index === activeItemIndex) {\n                itemProps.isActive = true;\n            }\n\n            itemProps.isSelected = isSelected;\n\n            // The below actually does have a key, but eslint can't catch that\n            /* eslint-disable react/jsx-key */\n            return (\n                <DatalistItem {...itemProps}>\n                    <div className=\"select-option-check-icon\">\n                        {isSelected ? <IconCheck height={16} width={16} /> : null}\n                    </div>\n                    {optionRenderer(item)}\n                </DatalistItem>\n            );\n            /* eslint-enable react/jsx-key */\n        });\n\n        separatorIndices.forEach((separatorIndex, index) => {\n            selectOptions.splice(separatorIndex + index, 0, <li key={`separator${separatorIndex}`} role=\"separator\" />);\n        });\n\n        return selectOptions;\n    };\n\n    render() {\n        const {\n            className,\n            multiple,\n            isEscapedWithReference,\n            isRightAligned,\n            isScrollable,\n            selectedValues,\n            shouldShowSearchInput,\n        } = this.props;\n        const { isOpen } = this.state;\n\n        // @TODO: Need invariants on specific conditions.\n        // 1) # of options should be non-zero\n        // 2) selectedValues, if defined, should all exist in options\n        // 3) defaultValue, if defined, should exist in options\n        // 4) defaultValue, if defined, should mean selectedValues is never empty\n        // 5) defaultValue, if defined, cannot be selected in addition to other options (must be exclusive)\n\n        const dropdownPlacement = isRightAligned ? PLACEMENT_BOTTOM_END : PLACEMENT_BOTTOM_START;\n        // popper.js modifier to allow dropdown to overflow its boundaries and remain attached to its reference\n        const dropdownModifiers = isEscapedWithReference ? { preventOverflow: { escapeWithReference: true } } : {};\n\n        return (\n            // eslint-disable-next-line jsx-a11y/no-static-element-interactions\n            <div\n                className={classNames(className, 'bdl-SelectField', 'select-container')}\n                onBlur={this.handleBlur}\n                onKeyDown={this.handleKeyDown}\n                ref={this.selectFieldContainerRef}\n            >\n                <PopperComponent placement={dropdownPlacement} isOpen={isOpen} modifiers={dropdownModifiers}>\n                    {this.renderSelectButton()}\n                    <SelectFieldDropdown\n                        isScrollable={isScrollable}\n                        multiple={multiple}\n                        selectedValues={selectedValues}\n                        selectFieldID={this.selectFieldID}\n                    >\n                        {shouldShowSearchInput && this.renderSearchInput()}\n                        {this.renderSelectOptions()}\n                    </SelectFieldDropdown>\n                </PopperComponent>\n            </div>\n        );\n    }\n}\n\nexport { BaseSelectField as BaseSelectFieldBase };\nexport default injectIntl(BaseSelectField);\n"],"mappings":"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","ignoreList":[]}