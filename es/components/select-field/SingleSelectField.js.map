{"version":3,"file":"SingleSelectField.js","names":["React","omit","injectIntl","BaseSelectField","CLEAR","messages","SingleSelectField","Component","constructor","args","_defineProperty","selectedOptions","onChange","fieldType","props","length","value","render","_this$props","intl","isDisabled","selectedValue","placeholder","shouldShowClearOption","options","rest","_objectWithoutProperties","_excluded","selectFieldProps","isFieldSelected","selectedValues","optionsWithClearOption","displayText","formatMessage","clearAll","createElement","_extends","className","handleChange","SingleSelectFieldBase"],"sources":["../../../src/components/select-field/SingleSelectField.js"],"sourcesContent":["// @flow\nimport * as React from 'react';\nimport omit from 'lodash/omit';\nimport { injectIntl } from 'react-intl';\n\nimport BaseSelectField from './BaseSelectField';\nimport type { SelectOptionValueProp, SelectOptionProp } from './props';\nimport CLEAR from './constants';\nimport messages from './messages';\n\ntype Props = {\n    /** The type of the field */\n    fieldType?: string,\n    /* Intl object */\n    intl: Object,\n    /** The select field is disabled if true */\n    isDisabled?: boolean,\n    /** The select field overlay (dropdown) will have a scrollbar and max-height if true * */\n    isScrollable?: boolean,\n    /** The currently selected option value */\n    onChange: Function,\n    /** List of options (displayText, value) */\n    options: Array<SelectOptionProp>,\n    /** The placeholder text for the field  */\n    placeholder?: string | React.Node,\n    /** Function will be called with the selected option after user selects a new option */\n    selectedValue?: SelectOptionValueProp,\n    /** Will show Clear All option */\n    shouldShowClearOption?: boolean,\n};\n\nclass SingleSelectField extends React.Component<Props> {\n    handleChange = (selectedOptions: Array<SelectOptionProp>) => {\n        const { onChange, fieldType } = this.props;\n\n        // There should only ever be 1 selected item\n        if (onChange && selectedOptions.length === 1) {\n            onChange(selectedOptions[0], fieldType);\n        } else if (selectedOptions.length === 0) {\n            onChange({ value: null });\n        }\n    };\n\n    render() {\n        const { intl, isDisabled, selectedValue, placeholder, shouldShowClearOption, options, ...rest } = this.props;\n\n        // @TODO: Invariant testing\n        // 1) selectedValue is required to be contained in the options\n        // 2) # of options should be non-zero\n\n        // Make sure to omit passed props that could be interpreted incorrectly by the base component\n        const selectFieldProps = omit(rest, ['defaultValue', 'multiple', 'onChange']);\n\n        // If selectedValue is passed in, map it to the multi selected equivalent\n        const isFieldSelected = selectedValue !== null;\n        selectFieldProps.selectedValues = !isFieldSelected ? [] : [selectedValue];\n\n        const optionsWithClearOption = shouldShowClearOption\n            ? [\n                  {\n                      value: CLEAR,\n                      displayText: intl.formatMessage(messages.clearAll),\n                  },\n                  ...options,\n              ]\n            : options;\n\n        return (\n            <BaseSelectField\n                className={!isFieldSelected && placeholder ? 'placeholder' : ''}\n                isDisabled={isDisabled}\n                onChange={this.handleChange}\n                placeholder={placeholder}\n                options={optionsWithClearOption}\n                shouldShowClearOption={shouldShowClearOption}\n                {...selectFieldProps}\n            />\n        );\n    }\n}\n\nexport { SingleSelectField as SingleSelectFieldBase };\nexport default injectIntl(SingleSelectField);\n"],"mappings":";;;;;;;AACA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,OAAOC,IAAI,MAAM,aAAa;AAC9B,SAASC,UAAU,QAAQ,YAAY;AAEvC,OAAOC,eAAe,MAAM,mBAAmB;AAE/C,OAAOC,KAAK,MAAM,aAAa;AAC/B,OAAOC,QAAQ,MAAM,YAAY;AAuBjC,MAAMC,iBAAiB,SAASN,KAAK,CAACO,SAAS,CAAQ;EAAAC,YAAA,GAAAC,IAAA;IAAA,SAAAA,IAAA;IAAAC,eAAA,uBACnCC,eAAwC,IAAK;MACzD,MAAM;QAAEC,QAAQ;QAAEC;MAAU,CAAC,GAAG,IAAI,CAACC,KAAK;;MAE1C;MACA,IAAIF,QAAQ,IAAID,eAAe,CAACI,MAAM,KAAK,CAAC,EAAE;QAC1CH,QAAQ,CAACD,eAAe,CAAC,CAAC,CAAC,EAAEE,SAAS,CAAC;MAC3C,CAAC,MAAM,IAAIF,eAAe,CAACI,MAAM,KAAK,CAAC,EAAE;QACrCH,QAAQ,CAAC;UAAEI,KAAK,EAAE;QAAK,CAAC,CAAC;MAC7B;IACJ,CAAC;EAAA;EAEDC,MAAMA,CAAA,EAAG;IACL,MAAAC,WAAA,GAAkG,IAAI,CAACJ,KAAK;MAAtG;QAAEK,IAAI;QAAEC,UAAU;QAAEC,aAAa;QAAEC,WAAW;QAAEC,qBAAqB;QAAEC;MAAiB,CAAC,GAAAN,WAAA;MAANO,IAAI,GAAAC,wBAAA,CAAAR,WAAA,EAAAS,SAAA;;IAE7F;IACA;IACA;;IAEA;IACA,MAAMC,gBAAgB,GAAG3B,IAAI,CAACwB,IAAI,EAAE,CAAC,cAAc,EAAE,UAAU,EAAE,UAAU,CAAC,CAAC;;IAE7E;IACA,MAAMI,eAAe,GAAGR,aAAa,KAAK,IAAI;IAC9CO,gBAAgB,CAACE,cAAc,GAAG,CAACD,eAAe,GAAG,EAAE,GAAG,CAACR,aAAa,CAAC;IAEzE,MAAMU,sBAAsB,GAAGR,qBAAqB,GAC9C,CACI;MACIP,KAAK,EAAEZ,KAAK;MACZ4B,WAAW,EAAEb,IAAI,CAACc,aAAa,CAAC5B,QAAQ,CAAC6B,QAAQ;IACrD,CAAC,EACD,GAAGV,OAAO,CACb,GACDA,OAAO;IAEb,oBACIxB,KAAA,CAAAmC,aAAA,CAAChC,eAAe,EAAAiC,QAAA;MACZC,SAAS,EAAE,CAACR,eAAe,IAAIP,WAAW,GAAG,aAAa,GAAG,EAAG;MAChEF,UAAU,EAAEA,UAAW;MACvBR,QAAQ,EAAE,IAAI,CAAC0B,YAAa;MAC5BhB,WAAW,EAAEA,WAAY;MACzBE,OAAO,EAAEO,sBAAuB;MAChCR,qBAAqB,EAAEA;IAAsB,GACzCK,gBAAgB,CACvB,CAAC;EAEV;AACJ;AAEA,SAAStB,iBAAiB,IAAIiC,qBAAqB;AACnD,eAAerC,UAAU,CAACI,iBAAiB,CAAC","ignoreList":[]}