{"version":3,"file":"SelectFieldDropdown.js","names":["React","classNames","OVERLAY_SCROLLABLE_CLASS","SelectFieldDropdown","Component","componentDidUpdate","selectedValues","prevSelectedValues","multiple","scheduleUpdate","props","render","children","innerRef","style","placement","isScrollable","selectFieldID","listboxProps","createElement","_extends","ref","className","id","role","onMouseDown","event","preventDefault","forwardRef"],"sources":["../../../src/components/select-field/SelectFieldDropdown.js"],"sourcesContent":["// @flow\nimport * as React from 'react';\nimport classNames from 'classnames';\n\nimport type { SelectOptionValueProp } from './props';\nimport type { PopperChildrenProps } from '../popper/props';\n\nexport const OVERLAY_SCROLLABLE_CLASS = 'bdl-SelectField-overlay--scrollable';\n\ntype Props = {\n    children: React.Node,\n    innerRef?: React.Ref<any>,\n    isScrollable?: boolean,\n    multiple?: boolean,\n    selectFieldID: string,\n    selectedValues: Array<SelectOptionValueProp>,\n} & PopperChildrenProps;\n\nclass SelectFieldDropdown extends React.Component<Props> {\n    componentDidUpdate({ selectedValues: prevSelectedValues }) {\n        const { multiple, scheduleUpdate, selectedValues } = this.props;\n        if (multiple && scheduleUpdate && prevSelectedValues !== selectedValues) {\n            scheduleUpdate();\n        }\n    }\n\n    render() {\n        const { children, innerRef, style, placement, isScrollable, multiple, selectFieldID } = this.props;\n\n        const listboxProps = {};\n        if (multiple) {\n            listboxProps['aria-multiselectable'] = true;\n        }\n\n        return (\n            <ul\n                ref={innerRef}\n                style={style}\n                data-placement={placement}\n                className={classNames('bdl-SelectFieldDropdown', 'overlay', {\n                    [OVERLAY_SCROLLABLE_CLASS]: isScrollable,\n                })}\n                id={selectFieldID}\n                role=\"listbox\"\n                // preventDefault on mousedown so blur doesn't happen before click\n                onMouseDown={event => event.preventDefault()}\n                {...listboxProps}\n            >\n                {children}\n            </ul>\n        );\n    }\n}\n\nexport default React.forwardRef<Props, HTMLUListElement>((props: Props, ref) => (\n    <SelectFieldDropdown {...props} innerRef={ref} />\n));\n"],"mappings":";AACA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,OAAOC,UAAU,MAAM,YAAY;AAKnC,OAAO,MAAMC,wBAAwB,GAAG,qCAAqC;AAW7E,MAAMC,mBAAmB,SAASH,KAAK,CAACI,SAAS,CAAQ;EACrDC,kBAAkBA,CAAC;IAAEC,cAAc,EAAEC;EAAmB,CAAC,EAAE;IACvD,MAAM;MAAEC,QAAQ;MAAEC,cAAc;MAAEH;IAAe,CAAC,GAAG,IAAI,CAACI,KAAK;IAC/D,IAAIF,QAAQ,IAAIC,cAAc,IAAIF,kBAAkB,KAAKD,cAAc,EAAE;MACrEG,cAAc,CAAC,CAAC;IACpB;EACJ;EAEAE,MAAMA,CAAA,EAAG;IACL,MAAM;MAAEC,QAAQ;MAAEC,QAAQ;MAAEC,KAAK;MAAEC,SAAS;MAAEC,YAAY;MAAER,QAAQ;MAAES;IAAc,CAAC,GAAG,IAAI,CAACP,KAAK;IAElG,MAAMQ,YAAY,GAAG,CAAC,CAAC;IACvB,IAAIV,QAAQ,EAAE;MACVU,YAAY,CAAC,sBAAsB,CAAC,GAAG,IAAI;IAC/C;IAEA,oBACIlB,KAAA,CAAAmB,aAAA,OAAAC,QAAA;MACIC,GAAG,EAAER,QAAS;MACdC,KAAK,EAAEA,KAAM;MACb,kBAAgBC,SAAU;MAC1BO,SAAS,EAAErB,UAAU,CAAC,yBAAyB,EAAE,SAAS,EAAE;QACxD,CAACC,wBAAwB,GAAGc;MAChC,CAAC,CAAE;MACHO,EAAE,EAAEN,aAAc;MAClBO,IAAI,EAAC;MACL;MAAA;MACAC,WAAW,EAAEC,KAAK,IAAIA,KAAK,CAACC,cAAc,CAAC;IAAE,GACzCT,YAAY,GAEfN,QACD,CAAC;EAEb;AACJ;AAEA,4BAAeZ,KAAK,CAAC4B,UAAU,CAA0B,CAAClB,KAAY,EAAEW,GAAG,kBACvErB,KAAA,CAAAmB,aAAA,CAAChB,mBAAmB,EAAAiB,QAAA,KAAKV,KAAK;EAAEG,QAAQ,EAAEQ;AAAI,EAAE,CACnD,CAAC","ignoreList":[]}