{"version":3,"file":"ImageTooltip.js","names":["React","classNames","Tooltip","TooltipTheme","ImageTooltipContent","ImageTooltip","_ref","children","className","content","image","title","otherTooltipProps","_objectWithoutProperties","_excluded","isImageLoaded","setIsImageLoaded","useState","tooltipContent","createElement","onImageLoad","Children","only","imageTooltipClasses","_extends","showCloseButton","theme","CALLOUT","text"],"sources":["../../../src/components/image-tooltip/ImageTooltip.tsx"],"sourcesContent":["import * as React from 'react';\nimport classNames from 'classnames';\n\n// @ts-ignore flow import\nimport Tooltip, { TooltipProps, TooltipTheme } from '../tooltip';\nimport ImageTooltipContent from './ImageTooltipContent';\n\nimport './ImageTooltip.scss';\n\n// We manually set \"text\" with our specific visual tooltip content.\ntype OtherTooltipProps = Omit<TooltipProps, 'text'>;\n\nexport type ImageTooltipProps = {\n    /** A React element to put the tooltip on */\n    children: React.ReactChild;\n    /** A string to be used in the tooltip's paragraph content */\n    content: string;\n    /** A React component representing the image used in the visual tooltip */\n    image: React.ReactElement;\n    /** A string to be used in the tooltip's title heading */\n    title: string;\n} & OtherTooltipProps;\n\nconst ImageTooltip = ({ children, className, content, image, title, ...otherTooltipProps }: ImageTooltipProps) => {\n    // State to track if the image has been loaded before displaying the tooltip\n    const [isImageLoaded, setIsImageLoaded] = React.useState(false);\n\n    const tooltipContent = (\n        <ImageTooltipContent content={content} onImageLoad={() => setIsImageLoaded(true)} title={title}>\n            {React.Children.only(image)}\n        </ImageTooltipContent>\n    );\n\n    const imageTooltipClasses = classNames('bdl-ImageTooltip', className, {\n        'bdl-is-image-loaded': isImageLoaded,\n    });\n\n    return (\n        <Tooltip\n            className={imageTooltipClasses}\n            showCloseButton\n            theme={TooltipTheme.CALLOUT}\n            {...otherTooltipProps}\n            text={tooltipContent}\n        >\n            {children}\n        </Tooltip>\n    );\n};\n\nexport default ImageTooltip;\n"],"mappings":";;;;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,OAAOC,UAAU,MAAM,YAAY;;AAEnC;AACA,OAAOC,OAAO,IAAkBC,YAAY,QAAQ,YAAY;AAChE,OAAOC,mBAAmB,MAAM,uBAAuB;AAEvD,OAAO,qBAAqB;;AAE5B;;AAcA,MAAMC,YAAY,GAAGC,IAAA,IAA6F;EAAA,IAA5F;MAAEC,QAAQ;MAAEC,SAAS;MAAEC,OAAO;MAAEC,KAAK;MAAEC;IAA+C,CAAC,GAAAL,IAAA;IAAtCM,iBAAiB,GAAAC,wBAAA,CAAAP,IAAA,EAAAQ,SAAA;EACpF;EACA,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGhB,KAAK,CAACiB,QAAQ,CAAC,KAAK,CAAC;EAE/D,MAAMC,cAAc,gBAChBlB,KAAA,CAAAmB,aAAA,CAACf,mBAAmB;IAACK,OAAO,EAAEA,OAAQ;IAACW,WAAW,EAAEA,CAAA,KAAMJ,gBAAgB,CAAC,IAAI,CAAE;IAACL,KAAK,EAAEA;EAAM,GAC1FX,KAAK,CAACqB,QAAQ,CAACC,IAAI,CAACZ,KAAK,CACT,CACxB;EAED,MAAMa,mBAAmB,GAAGtB,UAAU,CAAC,kBAAkB,EAAEO,SAAS,EAAE;IAClE,qBAAqB,EAAEO;EAC3B,CAAC,CAAC;EAEF,oBACIf,KAAA,CAAAmB,aAAA,CAACjB,OAAO,EAAAsB,QAAA;IACJhB,SAAS,EAAEe,mBAAoB;IAC/BE,eAAe;IACfC,KAAK,EAAEvB,YAAY,CAACwB;EAAQ,GACxBf,iBAAiB;IACrBgB,IAAI,EAAEV;EAAe,IAEpBX,QACI,CAAC;AAElB,CAAC;AAED,eAAeF,YAAY","ignoreList":[]}