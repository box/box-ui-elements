{"version":3,"file":"ModalDialog.js","names":["React","classNames","omit","uniqueId","defineMessages","injectIntl","IconBack","IconClose","ALERT_TYPE","DIALOG_TYPE","messages","backModalText","closeModalText","ModalDialog","Component","constructor","args","_defineProperty","event","onRequestBack","props","onRequestClose","renderBackButton","intl","formatMessage","createElement","className","onClick","onBackButtonClick","type","height","width","renderCloseButton","closeButtonProps","_extends","onCloseButtonClick","color","renderContent","children","elements","Children","toArray","length","Error","id","modalID","render","_this$props","modalRef","title","rest","_objectWithoutProperties","_excluded","isAlertType","divProps","role","ref","ModalDialogBase"],"sources":["../../../src/components/modal/ModalDialog.js"],"sourcesContent":["// @flow\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport omit from 'lodash/omit';\nimport uniqueId from 'lodash/uniqueId';\nimport { defineMessages, injectIntl } from 'react-intl';\n\nimport IconBack from '../../icon/fill/Arrow16';\nimport IconClose from '../../icon/fill/X16';\n\nconst ALERT_TYPE = 'alert';\nconst DIALOG_TYPE = 'dialog';\n\nconst messages = defineMessages({\n    backModalText: {\n        defaultMessage: 'Back',\n        description: 'Button to get back inside modal',\n        id: 'boxui.modalDialog.backModalText',\n    },\n    closeModalText: {\n        defaultMessage: 'Close Modal',\n        description: 'Button to close modal',\n        id: 'boxui.modalDialog.closeModalText',\n    },\n});\n\ntype Props = {\n    children: React.Node,\n    className?: string,\n    closeButtonProps: Object,\n    intl: Object,\n    modalRef?: Function,\n    onRequestBack?: Function,\n    onRequestClose?: Function,\n    title?: React.Node,\n    type?: 'alert' | 'dialog',\n};\n\nclass ModalDialog extends React.Component<Props> {\n    static defaultProps = {\n        type: DIALOG_TYPE,\n        closeButtonProps: {},\n    };\n\n    /**\n     * Handles clicking on the back button\n     * @param {SyntheticMouseEvent} event\n     * @return {void}\n     */\n    onBackButtonClick = (event: SyntheticMouseEvent<HTMLButtonElement>) => {\n        const { onRequestBack } = this.props;\n        if (onRequestBack) {\n            onRequestBack(event);\n        }\n    };\n\n    /**\n     * Handles clicking on the close button\n     * @param {SyntheticMouseEvent} event\n     * @return {void}\n     */\n    onCloseButtonClick = (event: SyntheticMouseEvent<HTMLButtonElement>) => {\n        const { onRequestClose } = this.props;\n        if (onRequestClose) {\n            onRequestClose(event);\n        }\n    };\n\n    modalID: string = uniqueId('modal');\n\n    /**\n     * Renders a button if onRequestBack is passed in\n     * @return {ReactElement|null} - Returns the button, or null if the button shouldn't be rendered\n     */\n    renderBackButton() {\n        const { intl } = this.props;\n        const { formatMessage } = intl;\n        return (\n            <button\n                aria-label={formatMessage(messages.backModalText)}\n                className=\"modal-back-button\"\n                data-testid=\"modal-back-button\"\n                onClick={this.onBackButtonClick}\n                type=\"button\"\n            >\n                <IconBack height={18} width={18} />\n            </button>\n        );\n    }\n\n    /**\n     * Renders a button if onRequestClose is passed in\n     * @return {ReactElement|null} - Returns the button, or null if the button shouldn't be rendered\n     */\n    renderCloseButton() {\n        const { closeButtonProps, intl } = this.props;\n        const { formatMessage } = intl;\n\n        return (\n            // eslint-disable-next-line react/button-has-type\n            <button\n                {...closeButtonProps}\n                aria-label={formatMessage(messages.closeModalText)}\n                className=\"modal-close-button\"\n                onClick={this.onCloseButtonClick}\n            >\n                <IconClose color=\"#909090\" height={18} width={18} />\n            </button>\n        );\n    }\n\n    renderContent() {\n        const { children, type } = this.props;\n\n        if (type !== ALERT_TYPE) {\n            return <div className=\"modal-content\">{children}</div>;\n        }\n\n        const elements = React.Children.toArray(children);\n        if (elements.length !== 2) {\n            throw new Error('Alert modal must have exactly two children: A message and <ModalActions>');\n        }\n\n        return (\n            <div className=\"modal-content\">\n                <p id={`${this.modalID}-desc`}>{elements[0]}</p>\n                {elements[1]}\n            </div>\n        );\n    }\n\n    render() {\n        const {\n            className,\n            modalRef,\n            onRequestBack,\n            onRequestClose,\n            title,\n            type,\n            ...rest // Useful for resin tagging, and other misc tags such as a11y\n        } = this.props;\n        const isAlertType = type === ALERT_TYPE;\n        const divProps = omit(rest, ['children', 'closeButtonProps', 'onRequestClose', 'intl']);\n\n        divProps.role = isAlertType ? 'alertdialog' : 'dialog';\n        divProps['aria-modal'] = true;\n        divProps['aria-labelledby'] = `${this.modalID}-label`;\n        if (isAlertType) {\n            divProps['aria-describedby'] = `${this.modalID}-desc`;\n        }\n\n        return (\n            <div ref={modalRef} className={classNames('modal-dialog', className)} {...divProps}>\n                <div className=\"modal-header-container\">\n                    <div className=\"modal-header\">\n                        {onRequestBack && this.renderBackButton()}\n                        <h2 className=\"modal-title\" id={`${this.modalID}-label`}>\n                            {title}\n                        </h2>\n                    </div>\n                    {onRequestClose && this.renderCloseButton()}\n                </div>\n                {this.renderContent()}\n            </div>\n        );\n    }\n}\n\nexport { ModalDialog as ModalDialogBase };\nexport default injectIntl(ModalDialog);\n"],"mappings":"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","ignoreList":[]}