{"version":3,"file":"Modal.js","names":["React","classNames","tabbable","omit","FocusTrap","LoadingIndicator","Portal","ModalDialog","Modal","Component","constructor","args","_defineProperty","event","isOpen","onRequestClose","props","key","stopPropagation","onBackdropClick","setTimeout","focusElementSelector","focusElementSelectorTrimmed","trim","focusElement","focusFirstUsefulElement","dialog","tabbableEls","length","focus","elementSelector","el","querySelector","Error","componentDidMount","onModalOpen","componentDidUpdate","prevProps","isLoading","render","_this$props","className","shouldNotUsePortal","style","rest","_objectWithoutProperties","_excluded","bodyOverrideStyle","modalProps","WrapperComponent","createElement","onKeyDown","tabIndex","onClick","backdrop","size","_extends","modalRef","modalEl","type"],"sources":["../../../src/components/modal/Modal.js"],"sourcesContent":["// @flow\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport tabbable from 'tabbable';\nimport omit from 'lodash/omit';\n\nimport FocusTrap from '../focus-trap';\nimport LoadingIndicator from '../loading-indicator';\nimport Portal from '../portal';\nimport ModalDialog from './ModalDialog';\n\nimport './Modal.scss';\n\ntype Props = {\n    children: React.Node,\n    /** Additional CSS classname of the `.modal` element */\n    className?: string,\n    focusElementSelector?: string,\n    isLoading?: boolean,\n    isOpen?: boolean,\n    onBackdropClick?: Function,\n    /** `(event) => {}`. `event` can be of type `SyntheticKeyboardEvent|SyntheticMouseEvent`. */\n    onRequestClose?: Function,\n    /** modal usually use Portal as Portal stays if parent is removed, but it cannot retain DOM tree's resin props */\n    shouldNotUsePortal?: boolean,\n    style: {\n        backdrop?: Object,\n        dialog?: Object,\n    },\n    title?: React.Node,\n};\n\nclass Modal extends React.Component<Props> {\n    static defaultProps = {\n        style: {\n            backdrop: {},\n            dialog: {},\n        },\n    };\n\n    componentDidMount() {\n        const { isOpen } = this.props;\n\n        if (isOpen) {\n            this.onModalOpen();\n        }\n    }\n\n    componentDidUpdate(prevProps: Props) {\n        const { isLoading, isOpen } = this.props;\n\n        // Set focus if modal is transitioning from closed -> open and/or loading -> not loading\n        if ((!prevProps.isOpen || prevProps.isLoading) && isOpen && !isLoading) {\n            this.onModalOpen();\n        }\n    }\n\n    /**\n     * Call props.onRequestClose when escape is pressed\n     * @param {SyntheticKeyboardEvent} event\n     */\n    onKeyDown = (event: SyntheticKeyboardEvent<>) => {\n        const { isOpen, onRequestClose } = this.props;\n        if (isOpen && onRequestClose && event.key === 'Escape') {\n            event.stopPropagation();\n            onRequestClose(event);\n        }\n    };\n\n    /**\n     * Call props.onRequestClose when backdrop is clicked\n     * @param {SyntheticMouseEvent} event\n     */\n    onBackdropClick = (event: SyntheticMouseEvent<HTMLDivElement>) => {\n        const { onRequestClose, onBackdropClick } = this.props;\n\n        if (onBackdropClick) {\n            onBackdropClick(event);\n        } else if (onRequestClose) {\n            onRequestClose(event);\n        }\n    };\n\n    /**\n     * Focuses on the correct element in the popup when it opens\n     */\n    onModalOpen = () => {\n        setTimeout(() => {\n            const { focusElementSelector } = this.props;\n            const focusElementSelectorTrimmed = focusElementSelector && focusElementSelector.trim();\n            if (focusElementSelectorTrimmed) {\n                this.focusElement(focusElementSelectorTrimmed);\n            } else {\n                this.focusFirstUsefulElement();\n            }\n        }, 0);\n    };\n\n    dialog: ?HTMLElement;\n\n    /**\n     * Focus the first useful element in the modal (i.e. not the close button, unless it's the only thing)\n     */\n    focusFirstUsefulElement = () => {\n        if (!this.dialog) {\n            return;\n        }\n        const tabbableEls = tabbable(this.dialog);\n        if (tabbableEls.length > 1) {\n            tabbableEls[1].focus();\n        } else if (tabbableEls.length > 0) {\n            tabbableEls[0].focus();\n        }\n    };\n\n    /**\n     * Focus the element that matches the selector in the modal\n     * @throws {Error} When the elementSelector does not match any element\n     */\n    focusElement = (elementSelector: string) => {\n        if (!this.dialog) {\n            return;\n        }\n        const el = this.dialog.querySelector(elementSelector);\n        if (el) {\n            el.focus();\n        } else {\n            throw new Error(`Could not find element matching selector ${elementSelector} to focus on.`);\n        }\n    };\n\n    render() {\n        const { className, isLoading, isOpen, onRequestClose, shouldNotUsePortal, style, ...rest } = this.props;\n\n        if (!isOpen) {\n            return null;\n        }\n\n        const bodyOverrideStyle = `\n            body {\n                overflow:hidden;\n            }\n        `;\n\n        // used `omit` here to prevent certain key/value pairs from going into the spread on `ModalDialog`\n        const modalProps = omit(rest, ['onBackdropClick', 'focusElementSelector']);\n\n        const WrapperComponent = shouldNotUsePortal ? 'div' : Portal;\n        // Render a style tag to prevent body from scrolling as long as the Modal is open\n        return (\n            <WrapperComponent className={classNames('modal', className)} onKeyDown={this.onKeyDown} tabIndex=\"-1\">\n                {/* eslint-disable-next-line jsx-a11y/no-static-element-interactions, jsx-a11y/click-events-have-key-events */}\n                <div className=\"modal-backdrop\" onClick={this.onBackdropClick} style={style.backdrop} />\n                <FocusTrap className=\"modal-dialog-container\">\n                    {isLoading ? (\n                        <LoadingIndicator size=\"large\" />\n                    ) : (\n                        <ModalDialog\n                            modalRef={modalEl => {\n                                // This callback gets passed through as a regular prop since\n                                // ModalDialog is wrapped in a HOC\n                                this.dialog = modalEl;\n                            }}\n                            onRequestClose={onRequestClose}\n                            style={style.dialog}\n                            {...modalProps}\n                        />\n                    )}\n                </FocusTrap>\n                <style type=\"text/css\">{bodyOverrideStyle}</style>\n            </WrapperComponent>\n        );\n    }\n}\n\nexport default Modal;\n"],"mappings":"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","ignoreList":[]}