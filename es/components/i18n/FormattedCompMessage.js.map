{"version":3,"file":"FormattedCompMessage.js","names":["React","injectIntl","isNaN","isDevEnvironment","CATEGORY_ZERO","CATEGORY_ONE","CATEGORY_TWO","CATEGORY_FEW","CATEGORY_MANY","CATEGORY_OTHER","Composition","FormattedCompMessage","Component","constructor","props","console","warn","defaultMessage","count","children","sourceElements","composition","source","Number","composePluralString","Error","compose","state","categories","Children","forEach","child","isValidElement","type","name","childComposition","category","one","other","categoriesString","map","join","render","_this$props","tagName","intl","description","id","rest","_objectWithoutProperties","_excluded","values","descriptor","translation","formatMessage","createElement","_objectSpread","key","decompose","_defineProperty"],"sources":["../../../src/components/i18n/FormattedCompMessage.js"],"sourcesContent":["// @flow\n// @deprecated, use FormattedMessage from react-intl v6 instead.\nimport * as React from 'react';\nimport { injectIntl } from 'react-intl';\nimport isNaN from 'lodash/isNaN';\n\nimport isDevEnvironment from '../../utils/env';\nimport { CATEGORY_ZERO, CATEGORY_ONE, CATEGORY_TWO, CATEGORY_FEW, CATEGORY_MANY, CATEGORY_OTHER } from './constants';\nimport Composition from './Composition';\n\ntype Props = {\n    /**\n     * The text to translate. This may be a string or JSX. The defaultMessage prop may be\n     * given or the component may have children, but not both.\n     */\n    children?: React.Node,\n\n    /**\n     * Specify the pivot count to choose which plural form to use.\n     * When specified, this FormattedCompMessage component will choose one of the\n     * Plural elements in its children according to the value of this count\n     * and the linguistic rules of the locale which determine which numbers\n     * belong to which plural class.\n     */\n    count?: number,\n\n    /**\n     * The text to translate. This may be a string or JSX. This prop may be\n     * given or the component may have children, but not both.\n     */\n    defaultMessage?: React.ElementType | string,\n\n    /**\n     * A description to send to the translators to explain the context of\n     * this string.\n     */\n    description: string,\n\n    /** The unique id of this string. */\n    id: string,\n\n    /**\n     * The intl provider. This is injected into this component\n     * via the injectIntl function from react-intl.\n     */\n    intl: Object,\n\n    /**\n     * Specify the name of the HTML tag you would like to use to wrap the\n     * translations.\n     */\n    tagName: string,\n};\n\ntype State = {\n    composition: Composition,\n    source: string,\n};\n\n/**\n * Replace the text inside of this component with a translation. This\n * component is built on top of react-intl, so it works along with the\n * regular react-intl components and objects you are used to, and it gets\n * its translations from react intl as well. The FormattedCompMessage component can\n * be used wherever it is valid to put JSX text. In regular Javascript\n * code, you should continue to use the intl.formatMessage() call and\n * extract your strings into a message.js file.\n */\nclass FormattedCompMessage extends React.Component<Props, State> {\n    composition: Composition;\n\n    str: string;\n\n    static defaultProps = {\n        tagName: 'span',\n    };\n\n    constructor(props: Props) {\n        super(props);\n\n        /* eslint-disable no-console */\n        console.warn(\n            \"box-ui-elements: the FormattedCompMessage component is deprecated! Use react-intl's FormattedMessage instead.\",\n        );\n        /* eslint-enable no-console */\n\n        // these parameters echo the ones in react-intl's FormattedMessage\n        // component, plus a few extra\n        const {\n            defaultMessage, // The English string + HTML + components that you want translated\n            count, // the pivot count to choose a plural form\n            children, // the components within the body\n        } = this.props;\n\n        const sourceElements = defaultMessage || children;\n\n        if (sourceElements) {\n            const composition = new Composition(sourceElements);\n            let source = '';\n\n            if (!isNaN(Number(count))) {\n                if (children) {\n                    source = this.composePluralString(children);\n                } else if (isDevEnvironment()) {\n                    throw new Error('Cannot use count prop on a FormattedCompMessage component that has no children.');\n                }\n            } else {\n                source = composition.compose();\n            }\n\n            this.state = {\n                source,\n                composition,\n            };\n        }\n    }\n\n    /**\n     * Search for any Plural elements in the children, and\n     * then construct the English source string in the correct\n     * format for react-intl to use for pluralization\n     * @param {React.Element} children the children of this node\n     * @return {string} the composed plural string\n     */\n    composePluralString(children) {\n        const categories = {};\n        React.Children.forEach(children, child => {\n            if (typeof child === 'object' && React.isValidElement(child) && child.type.name === 'Plural') {\n                const childComposition = new Composition(child.props.children);\n                categories[child.props.category] = childComposition.compose();\n            }\n        });\n        if (!categories.one || !categories.other) {\n            if (isDevEnvironment()) {\n                throw new Error(\n                    'Cannot use count prop on a FormattedCompMessage component without giving both a \"one\" and \"other\" Plural component in the children.',\n                );\n            }\n        }\n        // add these to the string in a particular order so that\n        // we always end up with the same string regardless of\n        // the order that the Plural elements were specified in\n        // the source code\n        const categoriesString = [\n            CATEGORY_ZERO,\n            CATEGORY_ONE,\n            CATEGORY_TWO,\n            CATEGORY_FEW,\n            CATEGORY_MANY,\n            CATEGORY_OTHER,\n        ]\n            .map(category => (categories[category] ? ` ${category} {${categories[category]}}` : ''))\n            .join('');\n\n        // see the intl-messageformat project for an explanation of this syntax\n        return `{count, plural,${categoriesString}}`;\n    }\n\n    render() {\n        const { count, tagName, intl, description, id, defaultMessage, ...rest } = this.props;\n        const { composition, source } = this.state;\n        const values = {};\n        if (typeof count === 'number') {\n            // make sure intl.formatMessage switches properly on the count\n            values.count = count;\n        }\n\n        // react-intl will do the correct plurals if necessary\n        const descriptor = {\n            id,\n            defaultMessage: source,\n            description,\n        };\n        const translation = intl.formatMessage(descriptor, values);\n\n        // always wrap the translated string in a tag to contain everything\n        // and to give us a spot to record the id. The resource id is the\n        // the id in mojito for the string. Having this attr has these advantages:\n        // 1. When debugging i18n or translation problems, it is MUCH easier to find\n        // the exact string to fix in Mojito rather than guessing. It might be useful\n        // for general debugging as well to map from something you see in the UI to\n        // the actual code that implements it.\n        // 2. It can be used by an in-context linguistic review tool. The tool code\n        // can contact mojito and retrieve the English for any translation errors that\n        // the reviewer finds and submit translation tickets to Jira and/or fixed\n        // translations directly back to Mojito.\n        // 3. It can be used by the planned \"text experiment framework\" to identify\n        // whole strings in the UI that can be A/B tested in various languages without\n        // publishing new versions of the code.\n        return React.createElement(\n            tagName,\n            {\n                key: id,\n                'x-resource-id': id,\n                ...rest,\n            },\n            composition.decompose(translation),\n        );\n    }\n}\n\nexport default injectIntl(FormattedCompMessage);\n"],"mappings":"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","ignoreList":[]}