{"version":3,"file":"GridViewSlider.js","names":["React","useIntl","Slider","messages","GridViewSlider","columnCount","gridMaxColumns","gridMinColumns","maxColumnCount","onChange","formatMessage","RANGE_STEP","RANGE_MIN","RANGE_MAX","sliderValue","createElement","className","max","min","minusButtonLabel","gridViewDecreaseColumnSize","onValueChange","plusButtonLabel","gridViewIncreaseColumnSize","sliderLabel","gridViewSliderLabel","step","value"],"sources":["../../../src/components/grid-view/GridViewSlider.tsx"],"sourcesContent":["import * as React from 'react';\nimport { useIntl } from 'react-intl';\nimport { Slider } from '@box/blueprint-web';\n\nimport './GridViewSlider.scss';\n\nimport messages from '../../elements/common/messages';\n\nexport interface GridViewSliderProps {\n    columnCount: number;\n    gridMaxColumns: number;\n    gridMinColumns: number;\n    maxColumnCount: number;\n    onChange: (newSliderValue: number) => void;\n}\n\nconst GridViewSlider = ({\n    columnCount,\n    gridMaxColumns,\n    gridMinColumns,\n    maxColumnCount,\n    onChange,\n}: GridViewSliderProps) => {\n    const { formatMessage } = useIntl();\n    const RANGE_STEP = 1;\n\n    // This math is necessary since the highest value of the slider should result in\n    // the lowest number of columns\n    const RANGE_MIN = gridMaxColumns - maxColumnCount + 1;\n    const RANGE_MAX = gridMaxColumns - gridMinColumns + 1;\n    const sliderValue = RANGE_MAX - columnCount + 1;\n\n    return (\n        gridMinColumns < maxColumnCount && (\n            <Slider\n                className=\"bdl-GridViewSlider\"\n                max={RANGE_MAX}\n                min={RANGE_MIN}\n                minusButtonLabel={formatMessage(messages.gridViewDecreaseColumnSize)}\n                onValueChange={onChange}\n                plusButtonLabel={formatMessage(messages.gridViewIncreaseColumnSize)}\n                sliderLabel={formatMessage(messages.gridViewSliderLabel)}\n                step={RANGE_STEP}\n                value={sliderValue}\n            />\n        )\n    );\n};\n\nexport default GridViewSlider;\n"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,OAAO,QAAQ,YAAY;AACpC,SAASC,MAAM,QAAQ,oBAAoB;AAE3C,OAAO,uBAAuB;AAE9B,OAAOC,QAAQ,MAAM,gCAAgC;AAUrD,MAAMC,cAAc,GAAGA,CAAC;EACpBC,WAAW;EACXC,cAAc;EACdC,cAAc;EACdC,cAAc;EACdC;AACiB,CAAC,KAAK;EACvB,MAAM;IAAEC;EAAc,CAAC,GAAGT,OAAO,CAAC,CAAC;EACnC,MAAMU,UAAU,GAAG,CAAC;;EAEpB;EACA;EACA,MAAMC,SAAS,GAAGN,cAAc,GAAGE,cAAc,GAAG,CAAC;EACrD,MAAMK,SAAS,GAAGP,cAAc,GAAGC,cAAc,GAAG,CAAC;EACrD,MAAMO,WAAW,GAAGD,SAAS,GAAGR,WAAW,GAAG,CAAC;EAE/C,OACIE,cAAc,GAAGC,cAAc,iBAC3BR,KAAA,CAAAe,aAAA,CAACb,MAAM;IACHc,SAAS,EAAC,oBAAoB;IAC9BC,GAAG,EAAEJ,SAAU;IACfK,GAAG,EAAEN,SAAU;IACfO,gBAAgB,EAAET,aAAa,CAACP,QAAQ,CAACiB,0BAA0B,CAAE;IACrEC,aAAa,EAAEZ,QAAS;IACxBa,eAAe,EAAEZ,aAAa,CAACP,QAAQ,CAACoB,0BAA0B,CAAE;IACpEC,WAAW,EAAEd,aAAa,CAACP,QAAQ,CAACsB,mBAAmB,CAAE;IACzDC,IAAI,EAAEf,UAAW;IACjBgB,KAAK,EAAEb;EAAY,CACtB,CACJ;AAET,CAAC;AAED,eAAeV,cAAc","ignoreList":[]}