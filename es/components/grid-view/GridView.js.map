{"version":3,"file":"GridView.js","names":["React","CellMeasurer","CellMeasurerCache","Table","Column","getProp","GridViewSlot","GridView","Component","constructor","args","_defineProperty","defaultHeight","defaultWidth","fixedWidth","dataKey","parent","rowIndex","columnCount","currentCollection","slotRenderer","props","count","contents","startingIndex","maxSlotIndex","Math","min","slotIndex","id","selected","push","createElement","key","slotWidth","toFixed","cache","columnIndex","className","index","componentDidUpdate","prevColumnCount","width","prevWidth","clearAll","forceUpdate","render","height","scrollToRow","rowCount","ceil","disableHeader","rowGetter","rowHeight","gridClassName","rowClassName","scrollToIndex","sortDirection","cellRenderer","flexGrow"],"sources":["../../../src/components/grid-view/GridView.js"],"sourcesContent":["// @flow\nimport * as React from 'react';\nimport { CellMeasurer, CellMeasurerCache } from '@box/react-virtualized/dist/es/CellMeasurer';\nimport Table, { Column } from '@box/react-virtualized/dist/es/Table';\nimport getProp from 'lodash/get';\nimport GridViewSlot from './GridViewSlot';\nimport type { Collection } from '../../common/types/core';\n\nimport '@box/react-virtualized/styles.css';\nimport './GridView.scss';\n\ntype TableCellRendererParams = {\n    cellData: ?any,\n    columnData: ?any,\n    dataKey: string,\n    parent: Object,\n    rowData: any,\n    rowIndex: number,\n};\n\ntype Props = {\n    columnCount: number,\n    currentCollection: Collection,\n    height: number,\n    scrollToRow?: number,\n    slotRenderer: (slotIndex: number) => ?React.Element<any>,\n    width: number,\n};\n\ntype RowGetterParams = {\n    index: number,\n};\n\nclass GridView extends React.Component<Props> {\n    cache = new CellMeasurerCache({\n        defaultHeight: 300,\n        defaultWidth: 400,\n        fixedWidth: true,\n    });\n\n    componentDidUpdate({ columnCount: prevColumnCount, width: prevWidth }: Props) {\n        const { columnCount, width } = this.props;\n\n        // The React Virtualized Table must be notified whenever the heights of rows\n        // could potentially change. If omitted, rows are sized\n        // incorrectly resulting in gaps or content overlap.\n        if (columnCount !== prevColumnCount || width !== prevWidth) {\n            this.cache.clearAll();\n            this.forceUpdate();\n        }\n    }\n\n    cellRenderer = ({ dataKey, parent, rowIndex }: TableCellRendererParams) => {\n        const { columnCount, currentCollection, slotRenderer } = this.props;\n        const count = getProp(currentCollection, 'items.length', 0);\n        const contents = [];\n\n        const startingIndex = rowIndex * columnCount;\n        const maxSlotIndex = Math.min(startingIndex + columnCount, count);\n\n        for (let slotIndex = startingIndex; slotIndex < maxSlotIndex; slotIndex += 1) {\n            const { id, selected } = getProp(currentCollection, `items[${slotIndex}]`);\n\n            // using item's id as key is important for renrendering.  React Virtualized Table rerenders\n            // on every 1px scroll, so using improper key would lead to image flickering in each\n            // card of the grid view when scrolling.\n            contents.push(\n                <GridViewSlot\n                    key={id}\n                    selected={selected}\n                    slotIndex={slotIndex}\n                    slotRenderer={slotRenderer}\n                    slotWidth={`${(100 / columnCount).toFixed(4)}%`}\n                />,\n            );\n        }\n\n        return (\n            <CellMeasurer key={dataKey} cache={this.cache} columnIndex={0} parent={parent} rowIndex={rowIndex}>\n                <div className=\"bdl-GridView-row\">{contents}</div>\n            </CellMeasurer>\n        );\n    };\n\n    rowGetter = ({ index }: RowGetterParams) => {\n        return index;\n    };\n\n    render() {\n        const { columnCount, currentCollection, height, scrollToRow = 0, width } = this.props;\n        const count = getProp(currentCollection, 'items.length', 0);\n        const rowCount = Math.ceil(count / columnCount);\n\n        return (\n            <Table\n                className=\"bdl-GridView\"\n                disableHeader\n                height={height}\n                rowCount={rowCount}\n                rowGetter={this.rowGetter}\n                rowHeight={this.cache.rowHeight}\n                width={width}\n                gridClassName=\"bdl-GridView-body\"\n                rowClassName=\"bdl-GridView-tableRow\"\n                scrollToIndex={scrollToRow}\n                sortDirection=\"ASC\"\n            >\n                <Column cellRenderer={this.cellRenderer} dataKey=\"\" flexGrow={1} width={400} />\n            </Table>\n        );\n    }\n}\n\nexport default GridView;\n"],"mappings":"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","ignoreList":[]}