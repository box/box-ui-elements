{"version":3,"file":"Collapsible.js","names":["React","classNames","omit","AnimateHeight","RESIN_TAG_TARGET","IconCaretDown","PlainButton","ButtonType","bdlGray50","Collapsible","PureComponent","constructor","props","_defineProperty","onOpen","onClose","setState","prevState","isOpen","state","render","animationDuration","buttonProps","children","className","isBordered","hasStickyHeader","headerActionItems","title","sectionClassName","resinTagTarget","modifiedButtonProps","interactionTarget","buttonClassName","createElement","_extends","onClick","toggleVisibility","type","BUTTON","color","width","duration","height"],"sources":["../../../src/components/collapsible/Collapsible.tsx"],"sourcesContent":["import * as React from 'react';\nimport classNames from 'classnames';\nimport omit from 'lodash/omit';\nimport AnimateHeight from 'react-animate-height';\n\n// @ts-ignore flow import\nimport { RESIN_TAG_TARGET } from '../../common/variables';\nimport IconCaretDown from '../../icons/general/IconCaretDown';\nimport PlainButton from '../plain-button';\nimport { ButtonType } from '../button';\nimport { bdlGray50 } from '../../styles/variables';\n\nimport './Collapsible.scss';\n\nexport interface CollapsibleProps {\n    /** animationDuration - duration of animation in milliseconds */\n    animationDuration?: number;\n    /** buttonProps - other props (e.g. resin target names) to be included in the button */\n    buttonProps?: Record<string, React.ReactNode>;\n    /** children - content to be displayed in the card when it is expanded */\n    children: Array<React.ReactChild> | React.ReactChild;\n    /** className - CSS class for the wrapper div */\n    className?: string;\n    /** hasStickyHeader - determines look of component */\n    hasStickyHeader?: boolean;\n    /** headerActionItems - determines stickiness of the header */\n    headerActionItems?: React.ReactChild;\n    /** headerButton - button in the title of the collapsible card */\n    headerButton?: React.ReactElement;\n    /** isBordered - determines optional header action items */\n    isBordered?: boolean;\n    /** isOpen - initial state of the collapsible card */\n    isOpen: boolean;\n    /** onClose - callback called when collapsible is opened */\n    onClose?: Function;\n    /** onOpen - callback called when collapsible is collapsed */\n    onOpen?: Function;\n    /** title - string or component in the title of the collapsible card */\n    title: string | React.ReactElement;\n}\n\ninterface CollapsibleState {\n    /** isOpen - initial state of the collapsible card */\n    isOpen: boolean;\n}\n\nclass Collapsible extends React.PureComponent<CollapsibleProps, CollapsibleState> {\n    static defaultProps = {\n        buttonProps: {},\n        className: '',\n        isOpen: true,\n        animationDuration: 100,\n    };\n\n    constructor(props: CollapsibleProps) {\n        super(props);\n        this.state = {\n            isOpen: props.isOpen,\n        };\n    }\n\n    toggleVisibility = () => {\n        const { onOpen, onClose } = this.props;\n        this.setState(\n            prevState => ({\n                isOpen: !prevState.isOpen,\n            }),\n            () => {\n                const { isOpen } = this.state;\n                if (isOpen && onOpen) {\n                    onOpen(this);\n                } else if (!isOpen && onClose) {\n                    onClose(this);\n                }\n            },\n        );\n    };\n\n    render() {\n        const { isOpen }: CollapsibleState = this.state;\n        const {\n            animationDuration,\n            buttonProps = {},\n            children,\n            className,\n            isBordered,\n            hasStickyHeader,\n            headerActionItems,\n            title,\n        }: CollapsibleProps = this.props;\n\n        const sectionClassName = classNames(\n            'collapsible-card',\n            {\n                'is-open': isOpen,\n            },\n            {\n                'is-bordered': isBordered,\n            },\n            className,\n        );\n        const resinTagTarget: string = RESIN_TAG_TARGET;\n        const modifiedButtonProps: { [index: string]: string } = omit(buttonProps, [resinTagTarget]);\n        const interactionTarget = buttonProps[resinTagTarget];\n        const buttonClassName = hasStickyHeader\n            ? 'collapsible-card-header has-sticky-header'\n            : 'collapsible-card-header';\n\n        if (interactionTarget) {\n            modifiedButtonProps[resinTagTarget] = `${interactionTarget}${isOpen ? 'collapse' : 'expand'}`;\n        }\n\n        return (\n            <div className={sectionClassName}>\n                <div className={buttonClassName}>\n                    <PlainButton\n                        {...modifiedButtonProps}\n                        aria-expanded={isOpen}\n                        className=\"collapsible-card-title\"\n                        onClick={this.toggleVisibility}\n                        type={ButtonType.BUTTON}\n                    >\n                        {title}\n                        <IconCaretDown className=\"collapsible-card-header-caret\" color={bdlGray50} width={8} />\n                    </PlainButton>\n                    {!!headerActionItems && <span className=\"bdl-Collapsible-actionItems\">{headerActionItems}</span>}\n                </div>\n                <AnimateHeight duration={animationDuration} height={isOpen ? 'auto' : 0}>\n                    <div className=\"collapsible-card-content\">{children}</div>\n                </AnimateHeight>\n            </div>\n        );\n    }\n}\n\nexport default Collapsible;\n"],"mappings":"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","ignoreList":[]}