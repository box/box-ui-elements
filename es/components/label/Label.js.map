{"version":3,"file":"Label.js","names":["React","FormattedMessage","InfoIconWithTooltip","StandardLabel","HiddenLabel","commonMessages","OptionalFormattedMessage","createElement","className","optional","Label","text","tooltip","labelElProps","infoTooltip","infoIconProps","showOptionalText","hideLabel","children","labelContent","key","push","iconProps","_objectSpread","tooltipText"],"sources":["../../../src/components/label/Label.tsx"],"sourcesContent":["import * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\n\nimport InfoIconWithTooltip from './InfoIconWithTooltip';\nimport StandardLabel from './StandardLabel';\nimport HiddenLabel from './HiddenLabel';\n// @ts-ignore flow import\nimport commonMessages from '../../common/messages';\n\nimport './Label.scss';\n\nconst OptionalFormattedMessage = () => (\n    <span className=\"label-optional bdl-Label-optional\">\n        (<FormattedMessage {...commonMessages.optional} />)\n    </span>\n);\n\nexport interface LabelProps {\n    /** Child for the label */\n    children: React.ReactElement;\n    /** Whether the text of the label should be accessibly hidden */\n    hideLabel?: boolean;\n    /** Optional props for the icon */\n    infoIconProps?: Record<string, any>; // eslint-disable-line @typescript-eslint/no-explicit-any\n    /** Tooltip text for the info icon */\n    infoTooltip?: React.ReactNode;\n    /** Optional props for the label element */\n    labelElProps?: React.ComponentPropsWithoutRef<'label'>;\n    /** Whether to show the `(Optional)` text next to the label for an optional field */\n    showOptionalText?: boolean;\n    /** The label text */\n    text: React.ReactNode;\n    /** Optional tooltip text for the label */\n    tooltip?: React.ReactNode;\n}\n\nconst Label = ({\n    text,\n    tooltip,\n    labelElProps,\n    infoTooltip,\n    infoIconProps,\n    showOptionalText,\n    hideLabel,\n    children,\n}: LabelProps) => {\n    const labelContent = [\n        <span key=\"labelText\">{text}</span>,\n        showOptionalText ? <OptionalFormattedMessage key=\"optionalMessage\" /> : null,\n    ];\n\n    if (infoTooltip) {\n        labelContent.push(\n            <InfoIconWithTooltip\n                key=\"infoTooltip\"\n                iconProps={{ className: 'tooltip-icon', ...infoIconProps }}\n                tooltipText={infoTooltip}\n            />,\n        );\n    }\n\n    if (hideLabel) {\n        return (\n            <HiddenLabel labelContent={labelContent} labelElProps={labelElProps}>\n                {children}\n            </HiddenLabel>\n        );\n    }\n\n    return (\n        <StandardLabel labelContent={labelContent} tooltip={tooltip} labelElProps={labelElProps}>\n            {children}\n        </StandardLabel>\n    );\n};\n\nexport default Label;\n"],"mappings":";;;;;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,gBAAgB,QAAQ,YAAY;AAE7C,OAAOC,mBAAmB,MAAM,uBAAuB;AACvD,OAAOC,aAAa,MAAM,iBAAiB;AAC3C,OAAOC,WAAW,MAAM,eAAe;AACvC;AACA,OAAOC,cAAc,MAAM,uBAAuB;AAElD,OAAO,cAAc;AAErB,MAAMC,wBAAwB,GAAGA,CAAA,kBAC7BN,KAAA,CAAAO,aAAA;EAAMC,SAAS,EAAC;AAAmC,GAAC,GAC/C,eAAAR,KAAA,CAAAO,aAAA,CAACN,gBAAgB,EAAKI,cAAc,CAACI,QAAW,CAAC,KAChD,CACT;AAqBD,MAAMC,KAAK,GAAGA,CAAC;EACXC,IAAI;EACJC,OAAO;EACPC,YAAY;EACZC,WAAW;EACXC,aAAa;EACbC,gBAAgB;EAChBC,SAAS;EACTC;AACQ,CAAC,KAAK;EACd,MAAMC,YAAY,GAAG,cACjBnB,KAAA,CAAAO,aAAA;IAAMa,GAAG,EAAC;EAAW,GAAET,IAAW,CAAC,EACnCK,gBAAgB,gBAAGhB,KAAA,CAAAO,aAAA,CAACD,wBAAwB;IAACc,GAAG,EAAC;EAAiB,CAAE,CAAC,GAAG,IAAI,CAC/E;EAED,IAAIN,WAAW,EAAE;IACbK,YAAY,CAACE,IAAI,cACbrB,KAAA,CAAAO,aAAA,CAACL,mBAAmB;MAChBkB,GAAG,EAAC,aAAa;MACjBE,SAAS,EAAAC,aAAA;QAAIf,SAAS,EAAE;MAAc,GAAKO,aAAa,CAAG;MAC3DS,WAAW,EAAEV;IAAY,CAC5B,CACL,CAAC;EACL;EAEA,IAAIG,SAAS,EAAE;IACX,oBACIjB,KAAA,CAAAO,aAAA,CAACH,WAAW;MAACe,YAAY,EAAEA,YAAa;MAACN,YAAY,EAAEA;IAAa,GAC/DK,QACQ,CAAC;EAEtB;EAEA,oBACIlB,KAAA,CAAAO,aAAA,CAACJ,aAAa;IAACgB,YAAY,EAAEA,YAAa;IAACP,OAAO,EAAEA,OAAQ;IAACC,YAAY,EAAEA;EAAa,GACnFK,QACU,CAAC;AAExB,CAAC;AAED,eAAeR,KAAK","ignoreList":[]}