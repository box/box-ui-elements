{"version":3,"file":"HotkeyHelpModal.js","names":["React","Component","PropTypes","FormattedMessage","commonMessages","ModalActions","Button","PlainButton","DropdownMenu","MenuToggle","Menu","MenuItem","HotkeyFriendlyModal","messages","specialCharacters","backspace","down","left","meta","right","up","enter","createElement","enterKey","spacebar","spacebarKey","shift","ctrl","ctrlKey","alt","altKey","esc","escKey","HotkeyHelpModal","constructor","props","context","_defineProperty","hotkeyConfig","hotkeys","Array","isArray","key","map","hotkey","split","reduce","prettyHotkey","combo","i","prettyCombo","length","toUpperCase","j","_extends","values","key1","key2","hotkeySequence","finalHotkey","element","className","description","prettyPrintHotkey","hotkeyLayer","getActiveHotkeys","types","getActiveTypes","state","currentType","componentDidUpdate","isOpen","prevIsOpen","prevType","setState","renderDropdownMenu","type","hotkeyType","onClick","renderHotkeyList","renderHotkey","render","onRequestClose","title","hotkeyModalTitle","cancel","bool","func","isRequired","object"],"sources":["../../../src/components/hotkeys/HotkeyHelpModal.js"],"sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { FormattedMessage } from 'react-intl';\n\nimport commonMessages from '../../common/messages';\nimport { ModalActions } from '../modal';\nimport Button from '../button';\nimport PlainButton from '../plain-button';\nimport DropdownMenu, { MenuToggle } from '../dropdown-menu';\nimport { Menu, MenuItem } from '../menu';\n\nimport HotkeyFriendlyModal from './HotkeyFriendlyModal'; // eslint-disable-line import/no-cycle\nimport messages from './messages';\n\nimport './HotkeyHelpModal.scss';\n\nconst specialCharacters = {\n    backspace: '\\u232b',\n    down: '\\u2193',\n    left: '\\u2190',\n    meta: '\\u2318',\n    right: '\\u2192',\n    up: '\\u2191',\n    enter: <FormattedMessage {...messages.enterKey} />,\n    spacebar: <FormattedMessage {...messages.spacebarKey} />,\n    shift: '\\u21e7',\n    ctrl: <FormattedMessage {...messages.ctrlKey} />,\n    alt: <FormattedMessage {...messages.altKey} />,\n    esc: <FormattedMessage {...messages.escKey} />,\n};\n\nclass HotkeyHelpModal extends Component {\n    static propTypes = {\n        isOpen: PropTypes.bool,\n        onRequestClose: PropTypes.func.isRequired,\n    };\n\n    static contextTypes = {\n        hotkeyLayer: PropTypes.object,\n    };\n\n    constructor(props, context) {\n        super(props);\n\n        this.hotkeys = context.hotkeyLayer.getActiveHotkeys();\n        this.types = context.hotkeyLayer.getActiveTypes();\n        this.state = {\n            currentType: this.types.length ? this.types[0] : null,\n        };\n    }\n\n    componentDidUpdate({ isOpen: prevIsOpen }, { currentType: prevType }) {\n        const { isOpen } = this.props;\n\n        if (!isOpen) {\n            return;\n        }\n\n        // modal is being opened; refresh hotkeys\n        if (!prevIsOpen && isOpen) {\n            this.hotkeys = this.context.hotkeyLayer.getActiveHotkeys();\n            this.types = this.context.hotkeyLayer.getActiveTypes();\n        }\n\n        if (!prevType) {\n            this.setState({\n                currentType: this.types.length ? this.types[0] : null,\n            });\n        }\n    }\n\n    /**\n     * Converts a \"raw\" hotkey to translated JSX version\n     */\n    prettyPrintHotkey = hotkeyConfig => {\n        const hotkeys = Array.isArray(hotkeyConfig.key) ? hotkeyConfig.key : [hotkeyConfig.key];\n\n        return hotkeys\n            .map(hotkey =>\n                hotkey.split(' ').reduce((prettyHotkey, combo, i) => {\n                    // Convert a \"raw\" combo to a \"pretty\" combo:\n                    // e.g. \"shift+g\" => [ <kbd>Shift</kbd>, '+', <kbd>G</kbd> ]\n                    const prettyCombo = combo\n                        .split('+')\n                        .map(key => {\n                            // Convert special key characters into their respective icons or translated components:\n                            // e.g. \"shift\" => \"Shift\", \"meta\" => \"âŒ˜\"\n                            if (key in specialCharacters) {\n                                return specialCharacters[key];\n                            }\n                            // If it's not a special character, just return the uppercased key:\n                            // e.g. \"g\" => \"G\"\n                            return key.length === 1 ? key.toUpperCase() : key;\n                        })\n                        .map((key, j) => <kbd key={j}>{key}</kbd>);\n                    // If this hotkey is a sequence of keys, return a translated message to combine them:\n                    // e.g. \"Shift+G Shift+A\" => \"Shift+G then Shift+A\"\n                    return i === 0 ? (\n                        prettyCombo\n                    ) : (\n                        <FormattedMessage\n                            values={{\n                                key1: <span>{prettyHotkey}</span>,\n                                key2: <span>{prettyCombo}</span>,\n                            }}\n                            {...messages.hotkeySequence}\n                        />\n                    );\n                }, []),\n            )\n            .reduce(\n                (finalHotkey, hotkey, i) =>\n                    // For shortcuts with multiple hotkeys, separate each hotkey with a \"/\" joiner:\n                    // e.g. \"Cmd+S Ctrl+S\" => \"Cmd+S / Ctrl+S\"\n                    i === 0 ? [hotkey] : [...finalHotkey, ' / ', hotkey],\n                [],\n            )\n            .map((element, i) => <span key={i}>{element}</span>);\n    };\n\n    renderDropdownMenu() {\n        const { currentType } = this.state;\n\n        if (!currentType) {\n            return null;\n        }\n\n        return (\n            <div className=\"hotkey-dropdown\">\n                <DropdownMenu>\n                    <PlainButton className=\"lnk\" type=\"button\">\n                        <MenuToggle>{currentType}</MenuToggle>\n                    </PlainButton>\n                    <Menu>\n                        {this.types.map((hotkeyType, i) => (\n                            <MenuItem key={i} onClick={() => this.setState({ currentType: hotkeyType })}>\n                                {hotkeyType}\n                            </MenuItem>\n                        ))}\n                    </Menu>\n                </DropdownMenu>\n            </div>\n        );\n    }\n\n    renderHotkey = (hotkey, i) => (\n        <li key={i} className=\"hotkey-item\">\n            <div className=\"hotkey-description\">{hotkey.description}</div>\n            <div className=\"hotkey-key\">{this.prettyPrintHotkey(hotkey)}</div>\n        </li>\n    );\n\n    renderHotkeyList() {\n        const { currentType } = this.state;\n\n        if (!currentType) {\n            return null;\n        }\n\n        const hotkeys = this.hotkeys[currentType];\n\n        return <ul className=\"hotkey-list\">{hotkeys.map(this.renderHotkey)}</ul>;\n    }\n\n    render() {\n        const { isOpen, onRequestClose } = this.props;\n        const { currentType } = this.state;\n\n        if (!currentType) {\n            return null;\n        }\n\n        return (\n            <HotkeyFriendlyModal\n                className=\"hotkey-modal\"\n                isOpen={isOpen}\n                onRequestClose={onRequestClose}\n                title={<FormattedMessage {...messages.hotkeyModalTitle} />}\n            >\n                {this.renderDropdownMenu()}\n                {this.renderHotkeyList()}\n                <ModalActions>\n                    <Button onClick={onRequestClose}>\n                        <FormattedMessage {...commonMessages.cancel} />\n                    </Button>\n                </ModalActions>\n            </HotkeyFriendlyModal>\n        );\n    }\n}\n\nexport default HotkeyHelpModal;\n"],"mappings":"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","ignoreList":[]}