{"version":3,"file":"PillSelectorDropdownField.js","names":["React","getProp","noop","PillSelectorDropdown","defaultDropdownRenderer","defaultDropdownFilter","defaultInputParser","PillSelectorDropdownField","PureComponent","constructor","args","_defineProperty","inputText","event","field","props","name","onBlur","createFakeEventTarget","text","onInput","setState","handleBlur","options","onChange","value","filteredOptions","filter","option","isValidOption","index","slice","splice","inputValue","inputParser","selectedOptions","displayText","trim","target","render","state","className","dropdownFilter","dropdownRenderer","dropdownScrollBoundarySelector","form","isCustomInputAllowed","isDisabled","label","placeholder","shouldClearUnmatchedInput","validator","errors","touched","isTouched","error","inputProps","createElement","allowCustomPills","allowInvalidPills","disabled","handleInput","onRemove","handleRemove","onSelect","handleSelect","parseItems","handleParseItems","selectorOptions","shouldSetActiveItemOnOpen"],"sources":["../../../src/components/pill-selector-dropdown/PillSelectorDropdownField.js"],"sourcesContent":["// @flow\nimport * as React from 'react';\nimport getProp from 'lodash/get';\nimport noop from 'lodash/noop';\nimport type { FieldProps } from 'formik';\n\nimport PillSelectorDropdown from './PillSelectorDropdown';\nimport defaultDropdownRenderer from './defaultDropdownRenderer';\nimport defaultDropdownFilter from './filters/defaultDropdownFilter';\nimport defaultInputParser from './defaultInputParser';\nimport type { Option, OptionValue } from './flowTypes';\n\ntype Props = FieldProps & {\n    /** CSS class for the component. */\n    className?: string,\n    /** Given selected values and input text, returns a list of filtered options. Defaults to defaultDropdownFilter. */\n    dropdownFilter: (options: Array<Option>, selectedValues: Array<Option>, inputText: string) => Array<Option>,\n    /** Given options, renders the dropdown list. Defaults to defaultDropdownRenderer. */\n    dropdownRenderer: (options: Array<Option>) => React.Node,\n    /** A CSS selector matching the element to use as a boundary when auto-scrolling dropdown elements into view. When not provided, boundary will be determined by scrollIntoView utility function */\n    dropdownScrollBoundarySelector?: string,\n    /** Function to parse user input into an array of items. Defaults to CSV parser. */\n    inputParser: (inputValue: string, options: Array<Option>, selectedOptions: Array<Option>) => Array<Option>,\n    /** If true, the user can add pills not included in the dropdown options. Defaults to true. */\n    isCustomInputAllowed: boolean,\n    /** If true, the input control is disabled so no more input can be made. Defaults to false. */\n    isDisabled: boolean,\n    /** Pill selector label. */\n    label: React.Node,\n    /** Function to intercept the user entered input to fetch options in the selector dropdown */\n    onInput: (text: string, event?: SyntheticInputEvent<HTMLInputElement>) => void,\n    /** Array of options shown in the dropdown. */\n    options: Array<Option>,\n    /** Called to check if pill text is valid. The text is passed in. */\n    placeholder: string,\n    /** Determines whether or not copy pasted text is cleared when it does not result in new pills being added */\n    shouldClearUnmatchedInput: boolean,\n    /** A placeholder to show in the input when there are no pills. */\n    validator?: (option: Option | OptionValue) => boolean,\n};\n\ntype State = {\n    inputText: string,\n};\n\nclass PillSelectorDropdownField extends React.PureComponent<Props, State> {\n    static defaultProps = {\n        dropdownFilter: defaultDropdownFilter,\n        dropdownRenderer: defaultDropdownRenderer,\n        inputParser: defaultInputParser,\n        isCustomInputAllowed: true,\n        isDisabled: false,\n        onInput: noop,\n        options: [],\n        shouldClearUnmatchedInput: false,\n    };\n\n    state = { inputText: '' };\n\n    isValidOption({ displayText }: Option) {\n        return !!displayText.trim();\n    }\n\n    createFakeEventTarget(name: string, value?: Array<Option>) {\n        // Returns a dummy EventTarget like object that formik understands how to read\n        return { target: { name, value } };\n    }\n\n    handleBlur = (event?: SyntheticInputEvent<HTMLInputElement>) => {\n        const { field } = this.props;\n        const { name, onBlur } = field;\n        // Sets touched in formik for the pill selector field.\n        // Event may or may not be available at this time.\n        onBlur(event || this.createFakeEventTarget(name));\n    };\n\n    handleInput = (text: string, event?: SyntheticInputEvent<HTMLInputElement>) => {\n        const { onInput } = this.props;\n        this.setState({ inputText: text });\n        onInput(text, event);\n        if (text === '') {\n            this.handleBlur(event);\n        }\n    };\n\n    handleSelect = (options: Array<Option>) => {\n        const { field } = this.props;\n        const { name, onChange, value = [] } = field;\n        const filteredOptions = options.filter(option => this.isValidOption(option));\n        onChange(this.createFakeEventTarget(name, [...value, ...filteredOptions]));\n    };\n\n    handleRemove = (option: Option, index: number) => {\n        const { field } = this.props;\n        const { name, onChange, value = [] } = field;\n        const options = value.slice();\n        options.splice(index, 1);\n        onChange(this.createFakeEventTarget(name, options));\n    };\n\n    handleParseItems = (inputValue: string): ?Array<Option> => {\n        const { field, inputParser, options } = this.props;\n        const { value: selectedOptions = [] } = field;\n        return inputParser(inputValue, options, selectedOptions);\n    };\n\n    render() {\n        const { inputText } = this.state;\n        const {\n            className,\n            dropdownFilter,\n            dropdownRenderer,\n            dropdownScrollBoundarySelector,\n            field,\n            form,\n            isCustomInputAllowed,\n            isDisabled,\n            label,\n            options,\n            placeholder,\n            shouldClearUnmatchedInput,\n            validator,\n        } = this.props;\n        const { name, value = [] }: { name: string, value: Array<Option> } = field;\n        const { errors, touched } = form;\n        const isTouched = getProp(touched, name);\n        const error = isTouched ? getProp(errors, name) : null;\n        const filteredOptions: Array<Option> = dropdownFilter(options, value, inputText);\n        const inputProps = { name }; // so that events generated have event.target.name\n\n        return (\n            <PillSelectorDropdown\n                allowCustomPills={isCustomInputAllowed}\n                allowInvalidPills\n                className={className}\n                disabled={isDisabled}\n                dropdownScrollBoundarySelector={dropdownScrollBoundarySelector}\n                inputProps={inputProps}\n                label={label}\n                error={error}\n                onBlur={this.handleBlur}\n                onInput={this.handleInput}\n                onRemove={this.handleRemove}\n                onSelect={this.handleSelect}\n                parseItems={this.handleParseItems}\n                placeholder={placeholder}\n                selectedOptions={value}\n                selectorOptions={filteredOptions}\n                shouldClearUnmatchedInput={shouldClearUnmatchedInput}\n                shouldSetActiveItemOnOpen\n                validator={validator}\n            >\n                {dropdownRenderer(filteredOptions)}\n            </PillSelectorDropdown>\n        );\n    }\n}\n\nexport default PillSelectorDropdownField;\n"],"mappings":";;;AACA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,OAAOC,OAAO,MAAM,YAAY;AAChC,OAAOC,IAAI,MAAM,aAAa;AAG9B,OAAOC,oBAAoB,MAAM,wBAAwB;AACzD,OAAOC,uBAAuB,MAAM,2BAA2B;AAC/D,OAAOC,qBAAqB,MAAM,iCAAiC;AACnE,OAAOC,kBAAkB,MAAM,sBAAsB;AAoCrD,MAAMC,yBAAyB,SAASP,KAAK,CAACQ,aAAa,CAAe;EAAAC,YAAA,GAAAC,IAAA;IAAA,SAAAA,IAAA;IAAAC,eAAA,gBAY9D;MAAEC,SAAS,EAAE;IAAG,CAAC;IAAAD,eAAA,qBAWXE,KAA6C,IAAK;MAC5D,MAAM;QAAEC;MAAM,CAAC,GAAG,IAAI,CAACC,KAAK;MAC5B,MAAM;QAAEC,IAAI;QAAEC;MAAO,CAAC,GAAGH,KAAK;MAC9B;MACA;MACAG,MAAM,CAACJ,KAAK,IAAI,IAAI,CAACK,qBAAqB,CAACF,IAAI,CAAC,CAAC;IACrD,CAAC;IAAAL,eAAA,sBAEa,CAACQ,IAAY,EAAEN,KAA6C,KAAK;MAC3E,MAAM;QAAEO;MAAQ,CAAC,GAAG,IAAI,CAACL,KAAK;MAC9B,IAAI,CAACM,QAAQ,CAAC;QAAET,SAAS,EAAEO;MAAK,CAAC,CAAC;MAClCC,OAAO,CAACD,IAAI,EAAEN,KAAK,CAAC;MACpB,IAAIM,IAAI,KAAK,EAAE,EAAE;QACb,IAAI,CAACG,UAAU,CAACT,KAAK,CAAC;MAC1B;IACJ,CAAC;IAAAF,eAAA,uBAEeY,OAAsB,IAAK;MACvC,MAAM;QAAET;MAAM,CAAC,GAAG,IAAI,CAACC,KAAK;MAC5B,MAAM;QAAEC,IAAI;QAAEQ,QAAQ;QAAEC,KAAK,GAAG;MAAG,CAAC,GAAGX,KAAK;MAC5C,MAAMY,eAAe,GAAGH,OAAO,CAACI,MAAM,CAACC,MAAM,IAAI,IAAI,CAACC,aAAa,CAACD,MAAM,CAAC,CAAC;MAC5EJ,QAAQ,CAAC,IAAI,CAACN,qBAAqB,CAACF,IAAI,EAAE,CAAC,GAAGS,KAAK,EAAE,GAAGC,eAAe,CAAC,CAAC,CAAC;IAC9E,CAAC;IAAAf,eAAA,uBAEc,CAACiB,MAAc,EAAEE,KAAa,KAAK;MAC9C,MAAM;QAAEhB;MAAM,CAAC,GAAG,IAAI,CAACC,KAAK;MAC5B,MAAM;QAAEC,IAAI;QAAEQ,QAAQ;QAAEC,KAAK,GAAG;MAAG,CAAC,GAAGX,KAAK;MAC5C,MAAMS,OAAO,GAAGE,KAAK,CAACM,KAAK,CAAC,CAAC;MAC7BR,OAAO,CAACS,MAAM,CAACF,KAAK,EAAE,CAAC,CAAC;MACxBN,QAAQ,CAAC,IAAI,CAACN,qBAAqB,CAACF,IAAI,EAAEO,OAAO,CAAC,CAAC;IACvD,CAAC;IAAAZ,eAAA,2BAEmBsB,UAAkB,IAAqB;MACvD,MAAM;QAAEnB,KAAK;QAAEoB,WAAW;QAAEX;MAAQ,CAAC,GAAG,IAAI,CAACR,KAAK;MAClD,MAAM;QAAEU,KAAK,EAAEU,eAAe,GAAG;MAAG,CAAC,GAAGrB,KAAK;MAC7C,OAAOoB,WAAW,CAACD,UAAU,EAAEV,OAAO,EAAEY,eAAe,CAAC;IAC5D,CAAC;EAAA;EA7CDN,aAAaA,CAAC;IAAEO;EAAoB,CAAC,EAAE;IACnC,OAAO,CAAC,CAACA,WAAW,CAACC,IAAI,CAAC,CAAC;EAC/B;EAEAnB,qBAAqBA,CAACF,IAAY,EAAES,KAAqB,EAAE;IACvD;IACA,OAAO;MAAEa,MAAM,EAAE;QAAEtB,IAAI;QAAES;MAAM;IAAE,CAAC;EACtC;EAwCAc,MAAMA,CAAA,EAAG;IACL,MAAM;MAAE3B;IAAU,CAAC,GAAG,IAAI,CAAC4B,KAAK;IAChC,MAAM;MACFC,SAAS;MACTC,cAAc;MACdC,gBAAgB;MAChBC,8BAA8B;MAC9B9B,KAAK;MACL+B,IAAI;MACJC,oBAAoB;MACpBC,UAAU;MACVC,KAAK;MACLzB,OAAO;MACP0B,WAAW;MACXC,yBAAyB;MACzBC;IACJ,CAAC,GAAG,IAAI,CAACpC,KAAK;IACd,MAAM;MAAEC,IAAI;MAAES,KAAK,GAAG;IAA2C,CAAC,GAAGX,KAAK;IAC1E,MAAM;MAAEsC,MAAM;MAAEC;IAAQ,CAAC,GAAGR,IAAI;IAChC,MAAMS,SAAS,GAAGrD,OAAO,CAACoD,OAAO,EAAErC,IAAI,CAAC;IACxC,MAAMuC,KAAK,GAAGD,SAAS,GAAGrD,OAAO,CAACmD,MAAM,EAAEpC,IAAI,CAAC,GAAG,IAAI;IACtD,MAAMU,eAA8B,GAAGgB,cAAc,CAACnB,OAAO,EAAEE,KAAK,EAAEb,SAAS,CAAC;IAChF,MAAM4C,UAAU,GAAG;MAAExC;IAAK,CAAC,CAAC,CAAC;;IAE7B,oBACIhB,KAAA,CAAAyD,aAAA,CAACtD,oBAAoB;MACjBuD,gBAAgB,EAAEZ,oBAAqB;MACvCa,iBAAiB;MACjBlB,SAAS,EAAEA,SAAU;MACrBmB,QAAQ,EAAEb,UAAW;MACrBH,8BAA8B,EAAEA,8BAA+B;MAC/DY,UAAU,EAAEA,UAAW;MACvBR,KAAK,EAAEA,KAAM;MACbO,KAAK,EAAEA,KAAM;MACbtC,MAAM,EAAE,IAAI,CAACK,UAAW;MACxBF,OAAO,EAAE,IAAI,CAACyC,WAAY;MAC1BC,QAAQ,EAAE,IAAI,CAACC,YAAa;MAC5BC,QAAQ,EAAE,IAAI,CAACC,YAAa;MAC5BC,UAAU,EAAE,IAAI,CAACC,gBAAiB;MAClClB,WAAW,EAAEA,WAAY;MACzBd,eAAe,EAAEV,KAAM;MACvB2C,eAAe,EAAE1C,eAAgB;MACjCwB,yBAAyB,EAAEA,yBAA0B;MACrDmB,yBAAyB;MACzBlB,SAAS,EAAEA;IAAU,GAEpBR,gBAAgB,CAACjB,eAAe,CACf,CAAC;EAE/B;AACJ;AAACf,eAAA,CA/GKJ,yBAAyB,kBACL;EAClBmC,cAAc,EAAErC,qBAAqB;EACrCsC,gBAAgB,EAAEvC,uBAAuB;EACzC8B,WAAW,EAAE5B,kBAAkB;EAC/BwC,oBAAoB,EAAE,IAAI;EAC1BC,UAAU,EAAE,KAAK;EACjB3B,OAAO,EAAElB,IAAI;EACbqB,OAAO,EAAE,EAAE;EACX2B,yBAAyB,EAAE;AAC/B,CAAC;AAuGL,eAAe3C,yBAAyB","ignoreList":[]}