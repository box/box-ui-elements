{"version":3,"file":"PillSelectorDropdown.js","names":["React","classNames","List","noop","parseCSV","Label","SelectorDropdown","PillSelector","PillSelectorDropdown","Component","constructor","args","_defineProperty","inputValue","isInCompositionMode","allowInvalidPills","parseItems","validator","props","pills","filter","pill","normalizedPills","map","displayText","text","value","allowCustomPills","onPillCreate","onSelect","selectedOptions","shouldClearUnmatchedInput","validateForError","parsePills","length","resetInputValue","event","onBlur","state","addPillsFromInput","target","setState","onInput","preventDefault","clipboardData","getData","index","selectorOptions","selectedOption","get","handleInput","render","children","className","disabled","dividerIndex","dropdownScrollBoundarySelector","error","errorTooltipPosition","getPillClassName","getPillImageUrl","inputProps","isPositionDynamic","label","onRemove","onSuggestedPillAdd","overlayTitle","placeholder","showAvatars","showRoundedPills","suggestedPillsData","suggestedPillsFilter","suggestedPillsTitle","shouldSetActiveItemOnOpen","selectorDropdownElement","createElement","onEnter","handleEnter","handleSelect","scrollBoundarySelector","selector","_extends","onChange","onCompositionEnd","handleCompositionEnd","onCompositionStart","handleCompositionStart","handleBlur","onPaste","handlePaste"],"sources":["../../../src/components/pill-selector-dropdown/PillSelectorDropdown.js"],"sourcesContent":["// @flow\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport { List } from 'immutable';\nimport noop from 'lodash/noop';\n\nimport parseCSV from '../../utils/parseCSV';\nimport Label from '../label';\nimport SelectorDropdown from '../selector-dropdown';\n\nimport PillSelector from './PillSelector';\nimport type { contactType as Contact } from '../../features/unified-share-modal/flowTypes';\nimport type { SelectOptionProp } from '../select-field/props';\nimport type { Option, OptionValue, SelectedOptions, SuggestedPillsFilter } from './flowTypes';\nimport type { Position } from '../tooltip';\n\nimport './PillSelectorDropdown.scss';\n\ntype Props = {\n    /** If true, user can add pills not included in selector options */\n    allowCustomPills: boolean,\n    /** If true, pills with errors are parsed as pills also */\n    allowInvalidPills: boolean,\n    /** `DatalistItem` components for dropdown options to select */\n    children: React.Node,\n    /** CSS class for the component */\n    className?: string,\n    /** If true, the input control is disabled so no more input can be made */\n    disabled: boolean,\n    /** Index at which to insert a divider */\n    dividerIndex?: number,\n    /** A CSS selector matching the element to use as a boundary when auto-scrolling dropdown elements into view. When not provided, boundary will be determined by scrollIntoView utility function */\n    dropdownScrollBoundarySelector?: string,\n    /** Error message */\n    error?: React.Node,\n    /** Position of error message tooltip */\n    errorTooltipPosition?: Position,\n    /** Called on pill render to get a specific class name to use for a particular option. Note: Only has effect when showRoundedPills is true. */\n    getPillClassName?: (option: Option) => string,\n    /** Function to retrieve the image URL associated with a pill */\n    getPillImageUrl?: (data: { id: string, [key: string]: any }) => string | Promise<?string>,\n    /** Passed in by `SelectorDropdown` for accessibility */\n    inputProps: Object,\n    /** Option to enable dynamic positioning with popper */\n    isPositionDynamic?: boolean,\n    /** Input label */\n    label: React.Node,\n    /** Called when pill selector input is blurred */\n    onBlur: (event: SyntheticInputEvent<HTMLInputElement>) => void,\n    /** Should update selectorOptions based on the given input value */\n    onInput: Function,\n    /** Called when creating pills */\n    onPillCreate: (pills: Array<SelectOptionProp | Contact>) => void,\n    /** Should update selectedOptions given the option and index to remove */\n    onRemove: Function,\n    /** Should update selectedOptions given an array of pills and the event */\n    onSelect: Function,\n    /** Function adds a collaborator from suggested collabs to form */\n    onSuggestedPillAdd?: Function,\n    /** Optional title of the overlay */\n    overlayTitle?: string,\n    /** function to parse user input into an array of items to be validated and then added to pill selector. If this function is not passed, a default CSV parser is used. */\n    parseItems?: Function,\n    /** A placeholder to show in the input when there are no pills */\n    placeholder: string,\n    /** Array or Immutable list with data for the selected options shown as pills */\n    selectedOptions: SelectedOptions,\n    /** Array or Immutable list with data for the dropdown options to select */\n    selectorOptions: Array<Object> | List<Object>,\n    /** Determines whether or not input text is cleared automatically when it does not result in new pills being added */\n    shouldClearUnmatchedInput?: boolean,\n    /** Determines whether or not the first item is highlighted automatically when the dropdown opens */\n    shouldSetActiveItemOnOpen?: boolean,\n    /** show avatars (uses showRoundedPills) */\n    showAvatars?: boolean,\n    /** Use rounded style for pills */\n    showRoundedPills?: boolean,\n    /** Array of suggested collaborators */\n    suggestedPillsData?: Array<Object>,\n    /** String decribes the datapoint to filter by so that items in the form are not shown in suggestions. */\n    suggestedPillsFilter?: SuggestedPillsFilter,\n    /** String describes the suggested pills */\n    suggestedPillsTitle?: string,\n    /** Validate the given input value, and update `error` prop if necessary */\n    validateForError?: Function,\n    /** Called to check if pill item data is valid. The `item` is passed in. */\n    validator: (option: Option | OptionValue) => boolean,\n};\n\ntype State = {\n    inputValue: string,\n    isInCompositionMode: boolean,\n};\n\nclass PillSelectorDropdown extends React.Component<Props, State> {\n    static defaultProps = {\n        allowCustomPills: false,\n        allowInvalidPills: false,\n        disabled: false,\n        error: '',\n        inputProps: {},\n        label: '',\n        onBlur: noop,\n        onPillCreate: noop,\n        placeholder: '',\n        selectedOptions: [],\n        selectorOptions: [],\n        shouldClearUnmatchedInput: false,\n        shouldSetActiveItemOnOpen: false,\n        validator: () => true,\n    };\n\n    state = { inputValue: '', isInCompositionMode: false };\n\n    parsePills = (inputValue: string) => {\n        const { allowInvalidPills, parseItems, validator } = this.props;\n        let pills = parseItems ? parseItems(inputValue) : parseCSV(inputValue);\n\n        if (!pills) {\n            return [];\n        }\n\n        if (!allowInvalidPills) {\n            pills = pills.filter(pill => validator(pill));\n        }\n\n        const normalizedPills = pills.map(pill =>\n            typeof pill === 'string'\n                ? {\n                      displayText: pill,\n                      text: pill, // deprecated, left for backwards compatibility\n                      value: pill,\n                  }\n                : pill,\n        );\n        return normalizedPills;\n    };\n\n    addPillsFromInput = (inputValue: string) => {\n        const {\n            allowCustomPills,\n            onPillCreate,\n            onSelect,\n            selectedOptions,\n            shouldClearUnmatchedInput,\n            validateForError,\n        } = this.props;\n\n        // Do nothing if custom pills are not allowed\n        if (!allowCustomPills) {\n            return;\n        }\n\n        // Parse pills from input\n        const pills = this.parsePills(inputValue);\n\n        // \"Select\" the pills\n        if (pills.length > 0) {\n            onSelect(pills);\n            onPillCreate(pills);\n\n            this.resetInputValue();\n        } else {\n            if (validateForError && (inputValue !== '' || selectedOptions.length === 0)) {\n                /**\n                 * If no pills were added, but an inputValue exists or\n                 * there are no pills selected, check for errors\n                 */\n                validateForError(inputValue);\n            }\n            if (shouldClearUnmatchedInput) {\n                this.resetInputValue();\n            }\n        }\n    };\n\n    handleBlur = (event: SyntheticInputEvent<HTMLInputElement>) => {\n        const { onBlur } = this.props;\n        const { inputValue } = this.state;\n        this.addPillsFromInput(inputValue);\n        onBlur(event);\n    };\n\n    handleInput = (event: SyntheticInputEvent<HTMLInputElement> | { target: HTMLInputElement | Object }) => {\n        const { target } = event;\n        const { value } = target;\n        this.setState({ inputValue: value });\n        this.props.onInput(value, event);\n    };\n\n    handleEnter = (event: SyntheticEvent<>) => {\n        const { isInCompositionMode, inputValue } = this.state;\n        if (!isInCompositionMode) {\n            event.preventDefault();\n            this.addPillsFromInput(inputValue);\n        }\n    };\n\n    handlePaste = (event: SyntheticClipboardEvent<HTMLInputElement>) => {\n        event.preventDefault();\n\n        const inputValue: string = event.clipboardData.getData('text');\n        this.setState({ inputValue });\n        this.props.onInput(inputValue, event);\n        this.addPillsFromInput(inputValue);\n    };\n\n    handleSelect = (index: number, event: SyntheticEvent<>) => {\n        const { onPillCreate, onSelect, selectorOptions } = this.props;\n        const selectedOption =\n            // $FlowFixMe\n            typeof selectorOptions.get === 'function' ? selectorOptions.get(index) : selectorOptions[index];\n\n        onSelect([selectedOption], event);\n        onPillCreate([selectedOption]);\n\n        this.handleInput({ target: { value: '' } });\n    };\n\n    handleCompositionStart = () => {\n        this.setState({ isInCompositionMode: true });\n    };\n\n    handleCompositionEnd = () => {\n        this.setState({ isInCompositionMode: false });\n    };\n\n    resetInputValue = () => {\n        const { onInput } = this.props;\n\n        this.setState({ inputValue: '' });\n        onInput('');\n    };\n\n    render() {\n        const {\n            allowInvalidPills,\n            children,\n            className,\n            disabled,\n            dividerIndex,\n            dropdownScrollBoundarySelector,\n            error,\n            errorTooltipPosition,\n            getPillClassName,\n            getPillImageUrl,\n            inputProps,\n            isPositionDynamic,\n            label,\n            onRemove,\n            onSuggestedPillAdd,\n            overlayTitle,\n            placeholder,\n            selectedOptions,\n            showAvatars,\n            showRoundedPills,\n            suggestedPillsData,\n            suggestedPillsFilter,\n            suggestedPillsTitle,\n            shouldSetActiveItemOnOpen,\n            validator,\n        } = this.props;\n\n        const selectorDropdownElement = (\n            <SelectorDropdown\n                className={classNames('bdl-PillSelectorDropdown', 'pill-selector-wrapper', className)}\n                dividerIndex={dividerIndex}\n                isPositionDynamic={isPositionDynamic}\n                onEnter={this.handleEnter}\n                onSelect={this.handleSelect}\n                overlayTitle={overlayTitle}\n                scrollBoundarySelector={dropdownScrollBoundarySelector}\n                shouldSetActiveItemOnOpen={shouldSetActiveItemOnOpen}\n                selector={\n                    <PillSelector\n                        onChange={noop} // fix console error\n                        onCompositionEnd={this.handleCompositionEnd}\n                        onCompositionStart={this.handleCompositionStart}\n                        {...inputProps}\n                        allowInvalidPills={allowInvalidPills}\n                        disabled={disabled}\n                        error={error}\n                        errorTooltipPosition={errorTooltipPosition}\n                        getPillClassName={getPillClassName}\n                        getPillImageUrl={getPillImageUrl}\n                        onBlur={this.handleBlur}\n                        onInput={this.handleInput}\n                        onPaste={this.handlePaste}\n                        onRemove={onRemove}\n                        onSuggestedPillAdd={onSuggestedPillAdd}\n                        placeholder={placeholder}\n                        selectedOptions={selectedOptions}\n                        showAvatars={showAvatars && showRoundedPills}\n                        showRoundedPills={showRoundedPills}\n                        suggestedPillsData={suggestedPillsData}\n                        suggestedPillsFilter={suggestedPillsFilter}\n                        suggestedPillsTitle={suggestedPillsTitle}\n                        validator={validator}\n                        value={this.state.inputValue}\n                    />\n                }\n            >\n                {children}\n            </SelectorDropdown>\n        );\n\n        return label ? <Label text={label}>{selectorDropdownElement}</Label> : selectorDropdownElement;\n    }\n}\n\nexport default PillSelectorDropdown;\n"],"mappings":"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","ignoreList":[]}