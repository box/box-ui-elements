{"version":3,"file":"PillSelector.js","names":["React","classNames","uniqueId","List","Tooltip","KEYS","RoundPill","Pill","SuggestedPillsRow","stopDefaultEvent","event","preventDefault","stopPropagation","PillSelectorBase","Component","constructor","args","_defineProperty","isFocused","selectedIndex","selectedOptions","props","size","length","key","map","option","inputEl","focus","setState","inputValue","value","numPills","getNumSelected","state","backspace","index","resetSelectedIndex","onRemove","selectedOption","get","arrowLeft","Math","max","hiddenEl","arrowRight","render","_this$props","allowInvalidPills","className","disabled","error","errorTooltipPosition","getPillClassName","getPillImageUrl","inputProps","isInputDisabled","isInputFocusedNextLine","onInput","onSuggestedPillAdd","placeholder","innerRef","showAvatars","showRoundedPills","suggestedPillsData","suggestedPillsFilter","suggestedPillsTitle","validator","rest","_objectWithoutProperties","_excluded","suggestedPillsEnabled","hasError","classes","ariaAttrs","errorMessageID","createElement","isShown","text","position","theme","onBlur","handleBlur","onClick","handleClick","onFocus","handleFocus","onKeyDown","handleKeyDown","ref","undefined","isValid","isDisabled","isSelected","bind","displayText","showAvatar","id","hasWarning","isExternal","isExternalUser","type","hiddenRef","tabIndex","_extends","autoComplete","input","selectedPillsValues","getPillsByKey","title","role","PillSelector","forwardRef","displayName"],"sources":["../../../src/components/pill-selector-dropdown/PillSelector.js"],"sourcesContent":["// @flow\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport uniqueId from 'lodash/uniqueId';\nimport { List } from 'immutable';\n\nimport Tooltip from '../tooltip';\nimport { KEYS } from '../../constants';\n\nimport RoundPill from './RoundPill';\nimport Pill from './Pill';\nimport SuggestedPillsRow from './SuggestedPillsRow';\nimport type { RoundOption, Option, OptionValue, SuggestedPillsFilter } from './flowTypes';\nimport type { Position } from '../tooltip';\n\nfunction stopDefaultEvent(event) {\n    event.preventDefault();\n    event.stopPropagation();\n}\n\ntype Props = {\n    allowInvalidPills: boolean,\n    className?: string,\n    disabled?: boolean,\n    error?: React.Node,\n    /** Position of error message tooltip */\n    errorTooltipPosition?: Position,\n    /** Called on pill render to get a specific class name to use for a particular option. Note: Only has effect when showRoundedPills is true. */\n    getPillClassName?: (option: Option) => string,\n    /** Function to retrieve the image URL associated with a pill */\n    getPillImageUrl?: (data: { id: string | number, [key: string]: any }) => string,\n    innerRef?: React.Ref<any>,\n    inputProps: Object,\n    /** Allows disabling the textarea element without disabling the whole PillSelector */\n    isInputDisabled?: boolean,\n    /** Whether to show textarea in next line when focused */\n    isInputFocusedNextLine?: boolean,\n    onInput: Function,\n    onRemove: Function,\n    onSuggestedPillAdd?: Function,\n    placeholder: string,\n    selectedOptions: List<Object>,\n    /** Whether to show avatars in pills (if rounded style is enabled) */\n    showAvatars?: boolean,\n    /** Whether to use rounded style for pills */\n    showRoundedPills?: boolean,\n    suggestedPillsData?: Array<Object>,\n    suggestedPillsFilter?: SuggestedPillsFilter,\n    suggestedPillsTitle?: string,\n    validator: (option: Option | OptionValue) => boolean,\n};\n\ntype State = {\n    isFocused: boolean,\n    selectedIndex: number,\n};\n\ntype DefaultProps = {\n    allowInvalidPills: boolean,\n    disabled: boolean,\n    error: string,\n    errorTooltipPosition: Position,\n    inputProps: Object,\n    placeholder: string,\n    selectedOptions: List<Object>,\n    validator: () => boolean,\n};\n\ntype Config = React.Config<Props, DefaultProps>;\n\nclass PillSelectorBase extends React.Component<Props, State> {\n    static defaultProps: DefaultProps = {\n        allowInvalidPills: false,\n        disabled: false,\n        error: '',\n        errorTooltipPosition: 'bottom-left',\n        inputProps: {},\n        placeholder: '',\n        selectedOptions: [],\n        validator: () => true,\n    };\n\n    state = {\n        isFocused: false,\n        selectedIndex: -1,\n    };\n\n    getNumSelected = (): number => {\n        const { selectedOptions } = this.props;\n\n        return typeof selectedOptions.size === 'number' ? selectedOptions.size : selectedOptions.length;\n    };\n\n    getPillsByKey = (key: string): Array<any> => {\n        const { selectedOptions } = this.props;\n\n        return selectedOptions.map(option => option[key]);\n    };\n\n    inputEl: HTMLInputElement;\n\n    handleClick = () => {\n        this.inputEl.focus();\n    };\n\n    handleFocus = () => {\n        this.setState({ isFocused: true });\n    };\n\n    handleBlur = () => {\n        this.setState({ isFocused: false });\n    };\n\n    hiddenEl: HTMLSpanElement;\n\n    handleKeyDown = (event: SyntheticKeyboardEvent<>) => {\n        const inputValue = this.inputEl.value;\n        const numPills = this.getNumSelected();\n        const { selectedIndex } = this.state;\n\n        switch (event.key) {\n            case KEYS.backspace: {\n                let index = -1;\n                if (selectedIndex >= 0) {\n                    // remove selected pill\n                    index = selectedIndex;\n                    this.resetSelectedIndex();\n                    this.inputEl.focus();\n                } else if (inputValue === '') {\n                    // remove last pill\n                    index = numPills - 1;\n                }\n                if (index >= 0) {\n                    const { onRemove, selectedOptions } = this.props;\n                    const selectedOption =\n                        // $FlowFixMe\n                        typeof selectedOptions.get === 'function' ? selectedOptions.get(index) : selectedOptions[index];\n                    onRemove(selectedOption, index);\n                    stopDefaultEvent(event);\n                }\n                break;\n            }\n            case KEYS.arrowLeft:\n                if (selectedIndex >= 0) {\n                    // select previous pill\n                    this.setState({\n                        selectedIndex: Math.max(selectedIndex - 1, 0),\n                    });\n                    stopDefaultEvent(event);\n                } else if (inputValue === '' && numPills > 0) {\n                    // select last pill\n                    this.hiddenEl.focus();\n                    this.setState({ selectedIndex: numPills - 1 });\n                    stopDefaultEvent(event);\n                }\n                break;\n            case KEYS.arrowRight: {\n                if (selectedIndex >= 0) {\n                    const index = selectedIndex + 1;\n                    if (index >= numPills) {\n                        // deselect last pill\n                        this.resetSelectedIndex();\n                        this.inputEl.focus();\n                    } else {\n                        // select next pill\n                        this.setState({ selectedIndex: index });\n                    }\n                    stopDefaultEvent(event);\n                }\n                break;\n            }\n            // no default\n        }\n    };\n\n    errorMessageID = uniqueId('errorMessage');\n\n    hiddenRef = (hiddenEl: ?HTMLSpanElement) => {\n        if (hiddenEl) {\n            this.hiddenEl = hiddenEl;\n        }\n    };\n\n    resetSelectedIndex = () => {\n        if (this.state.selectedIndex !== -1) {\n            this.setState({ selectedIndex: -1 });\n        }\n    };\n\n    render() {\n        const { isFocused, selectedIndex } = this.state;\n        const {\n            allowInvalidPills,\n            className,\n            disabled,\n            error,\n            errorTooltipPosition,\n            getPillClassName,\n            getPillImageUrl,\n            inputProps,\n            isInputDisabled,\n            isInputFocusedNextLine,\n            onInput,\n            onRemove,\n            onSuggestedPillAdd,\n            placeholder,\n            innerRef,\n            selectedOptions,\n            showAvatars,\n            showRoundedPills,\n            suggestedPillsData,\n            suggestedPillsFilter,\n            suggestedPillsTitle,\n            validator,\n            ...rest\n        } = this.props;\n        const suggestedPillsEnabled = suggestedPillsData && suggestedPillsData.length > 0;\n        const hasError = !!error;\n        const classes = classNames('bdl-PillSelector', 'pill-selector-input-wrapper', {\n            'is-disabled': disabled,\n            'bdl-is-disabled': disabled,\n            'is-focused': isFocused,\n            'show-error': hasError,\n            'pill-selector-suggestions-enabled': suggestedPillsEnabled,\n            'bdl-PillSelector--suggestionsEnabled': suggestedPillsEnabled,\n        });\n        const ariaAttrs = {\n            'aria-invalid': hasError,\n            'aria-errormessage': this.errorMessageID,\n            'aria-describedby': this.errorMessageID,\n        };\n\n        return (\n            <Tooltip isShown={hasError} text={error || ''} position={errorTooltipPosition} theme=\"error\">\n                {/* eslint-disable-next-line jsx-a11y/no-static-element-interactions */}\n                <span\n                    className={classes}\n                    onBlur={this.handleBlur}\n                    onClick={this.handleClick}\n                    onFocus={this.handleFocus}\n                    onKeyDown={this.handleKeyDown}\n                    ref={innerRef}\n                >\n                    {showRoundedPills\n                        ? selectedOptions.map((option: RoundOption, index: number) => {\n                              return (\n                                  <RoundPill\n                                      className={getPillClassName ? getPillClassName(option) : undefined}\n                                      getPillImageUrl={getPillImageUrl}\n                                      isValid={allowInvalidPills ? validator(option) : true}\n                                      isDisabled={disabled}\n                                      isSelected={index === selectedIndex}\n                                      key={option.value}\n                                      onRemove={onRemove.bind(this, option, index)}\n                                      // $FlowFixMe option.text is for backwards compatibility\n                                      text={option.displayText || option.text}\n                                      showAvatar={showAvatars}\n                                      id={option.id}\n                                      hasWarning={option.hasWarning}\n                                      isExternal={option.isExternalUser}\n                                      type={option.type}\n                                  />\n                              );\n                          })\n                        : selectedOptions.map((option: Option, index: number) => {\n                              // TODO: This and associated types will be removed once all views are updates with round pills.\n                              return (\n                                  <Pill\n                                      isValid={allowInvalidPills ? validator(option) : true}\n                                      isDisabled={disabled}\n                                      isSelected={index === selectedIndex}\n                                      key={option.value}\n                                      onRemove={onRemove.bind(this, option, index)}\n                                      // $FlowFixMe option.text is for backwards compatibility\n                                      text={option.displayText || option.text}\n                                  />\n                              );\n                          })}\n\n                    {/* hidden element for focus/key events during pill selection */}\n                    <span\n                        aria-hidden=\"true\"\n                        className=\"accessibility-hidden\"\n                        onBlur={this.resetSelectedIndex}\n                        ref={this.hiddenRef}\n                        tabIndex={-1}\n                        data-testid=\"pill-selection-helper\"\n                    />\n                    <textarea\n                        {...ariaAttrs}\n                        {...rest}\n                        {...inputProps}\n                        autoComplete=\"off\"\n                        className={classNames('bdl-PillSelector-input', 'pill-selector-input', className, {\n                            'bdl-PillSelector-input--nextLine': isInputFocusedNextLine,\n                        })}\n                        disabled={disabled || isInputDisabled}\n                        onInput={onInput}\n                        placeholder={this.getNumSelected() === 0 ? placeholder : ''}\n                        ref={input => {\n                            this.inputEl = input;\n                        }}\n                    />\n                    <SuggestedPillsRow\n                        onSuggestedPillAdd={onSuggestedPillAdd}\n                        selectedPillsValues={this.getPillsByKey('value')}\n                        suggestedPillsFilter={suggestedPillsFilter}\n                        suggestedPillsData={suggestedPillsData}\n                        title={suggestedPillsTitle}\n                    />\n                    <span id={this.errorMessageID} className=\"accessibility-hidden\" role=\"alert\">\n                        {error}\n                    </span>\n                </span>\n            </Tooltip>\n        );\n    }\n}\n\nexport { PillSelectorBase };\n\nconst PillSelector = React.forwardRef<Config, HTMLSpanElement>((props: Config, ref: React.Ref<any>) => (\n    <PillSelectorBase {...props} innerRef={ref} />\n));\nPillSelector.displayName = 'PillSelector';\n\nexport default PillSelector;\n"],"mappings":"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","ignoreList":[]}