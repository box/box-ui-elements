{"version":3,"file":"ReadableTime.js","names":["injectIntl","ONE_HOUR_MS","isCurrentYear","isToday","isYesterday","timeFromNow","messages","nonUppercaseLocales","ReadableTime","intl","timestamp","relativeThreshold","allowFutureTimestamps","alwaysShowTime","showWeekday","uppercase","shouldUppercase","includes","locale","relativeIfNewerThanTs","Date","now","shouldShowYear","dateMessage","eventTime","date","weekday","output","eventTimeToday","eventTimeYesterday","eventTimeWeekdayLong","formatDate","eventTimeDate","eventTimeDateShort","month","day","toLocaleUpperCase","values","time","formatMessage","timeDiff","Math","abs","value","unit","formatRelativeTime","ReadableTimeComponent"],"sources":["../../../src/components/time/ReadableTime.js"],"sourcesContent":["// @flow\n\nimport { injectIntl } from 'react-intl';\n\nimport { ONE_HOUR_MS } from '../../constants';\nimport { isCurrentYear, isToday, isYesterday } from '../../utils/datetime';\nimport timeFromNow from '../../utils/relativeTime';\n\nimport messages from './messages';\n\ntype Props = {\n    /** A boolean that will cause future timestamps (usually due to incorrect computer time) to be corrected to the isToday message */\n    allowFutureTimestamps?: boolean,\n    /** A boolean that will include the time alongside the date, if the date is shown */\n    alwaysShowTime?: boolean,\n    /** intl object */\n    intl: any,\n    /** The number of milliseconds before now that a relative (vs. absolute) time should be displayed (Default: 1 hour) */\n    relativeThreshold?: number,\n    /** A boolean that will include the weekday alongside the date, if the date is shown */\n    showWeekday?: boolean,\n    /** The timestamp which should be used to display the date */\n    timestamp: number,\n    /** Whether to generate and make locale aware an uppercase version of the string */\n    uppercase?: boolean,\n};\n\n// exclude languages that do not have a grammar for uppercase (e.g. russian)\nconst nonUppercaseLocales = ['ru'];\nconst ReadableTime = ({\n    intl,\n    timestamp,\n    relativeThreshold = ONE_HOUR_MS,\n    allowFutureTimestamps = true,\n    alwaysShowTime = false,\n    showWeekday = false,\n    uppercase = false,\n}: Props): string => {\n    const shouldUppercase = uppercase && !nonUppercaseLocales.includes(intl.locale);\n    const relativeIfNewerThanTs = Date.now() - relativeThreshold;\n    const shouldShowYear = !isCurrentYear(timestamp);\n\n    if (!allowFutureTimestamps && timestamp > Date.now()) {\n        // TODO: what is the reasoning behind this rule?\n        timestamp = relativeIfNewerThanTs; // Default to 'Today' for timestamps that would show a future date\n    }\n\n    // e.g. Oct 5, 2018\n    let dateMessage = messages.eventTime;\n    let date = null;\n    let weekday = null;\n    let output;\n    if (isToday(timestamp)) {\n        // e.g. Today at 12:30 PM\n        dateMessage = messages.eventTimeToday;\n    } else if (isYesterday(timestamp)) {\n        // e.g. Yesterday at 11:30 AM\n        dateMessage = messages.eventTimeYesterday;\n    } else if (showWeekday) {\n        // e.g. Monday, Oct 5, 2018\n        dateMessage = messages.eventTimeWeekdayLong;\n        weekday = intl.formatDate(timestamp, { weekday: 'long' });\n    } else if (shouldShowYear && alwaysShowTime) {\n        // e.g. Oct 5, 2018 at 10:30 PM\n        dateMessage = messages.eventTimeDate;\n    } else if (!shouldShowYear && alwaysShowTime) {\n        // e.g. Oct 5 at 10:30 PM\n        dateMessage = messages.eventTimeDateShort;\n        date = intl.formatDate(timestamp, { month: 'short', day: 'numeric' });\n    } else if (!shouldShowYear && !alwaysShowTime) {\n        // e.g. Oct 5\n        output = intl.formatDate(timestamp, { month: 'short', day: 'numeric' });\n        return shouldUppercase ? output.toLocaleUpperCase(intl.locale) : output;\n    }\n    const values = { time: timestamp, date, weekday };\n    output = intl.formatMessage(dateMessage, values);\n\n    // if the time stamp is within +/- the relative threshold for the current time,\n    // print the default time format\n    const timeDiff = timestamp - Date.now();\n    if (Math.abs(timeDiff) <= relativeThreshold) {\n        const { value, unit } = timeFromNow(timestamp);\n        output = intl.formatRelativeTime(value, unit);\n    }\n\n    return shouldUppercase ? output.toLocaleUpperCase(intl.locale) : output;\n};\n\nexport { ReadableTime as ReadableTimeComponent };\nexport default injectIntl(ReadableTime);\n"],"mappings":"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","ignoreList":[]}