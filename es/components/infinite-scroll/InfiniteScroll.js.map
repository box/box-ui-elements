{"version":3,"file":"InfiniteScroll.js","names":["React","throttleFn","onContainerScroll","hasMore","isLoading","onLoadMore","scrollContainerNode","sentinelRef","threshold","useWindow","current","top","sentinelTop","getBoundingClientRect","window","innerHeight","bottom","containerBottom","InfiniteScroll","children","throttle","useRef","useEffect","params","scrollHandler","resizeHandler","container","addEventListener","removeEventListeners","removeEventListener","createElement","ref"],"sources":["../../../src/components/infinite-scroll/InfiniteScroll.tsx"],"sourcesContent":["/**\n * From https://github.com/jaredpalmer/react-simple-infinite-scroll\n * Updated to accept a scroll container React ref as the \"window\"\n */\nimport * as React from 'react';\nimport throttleFn from 'lodash/throttle';\n\nexport interface InfiniteScrollProps {\n    /** Components to render, should include entities/loading states/end message */\n    children: React.ReactNode;\n    /** Does the resource have more entities */\n    hasMore: boolean;\n    /** Are more entities being loaded */\n    isLoading: boolean;\n    /** Callback to load more entities */\n    onLoadMore: () => void;\n    /** React ref of the scroll container.\n     * Used to listen to scroll events and calculate onLoadMore calls.\n     * Set useWindow to true to use the window as scroll container.\n     */\n    scrollContainerNode?: HTMLElement;\n    /** Scroll threshold */\n    threshold?: number;\n    /** Throttle rate */\n    throttle?: number;\n    /** Set useWindow to true to use the window as scroll container. If set to true, will ignore scrollContainerNode. */\n    useWindow?: boolean;\n}\n\ntype OnContainerScrollParams = Pick<Required<InfiniteScrollProps>, 'threshold' | 'useWindow'> &\n    Pick<InfiniteScrollProps, 'isLoading' | 'hasMore' | 'scrollContainerNode' | 'onLoadMore'> & {\n        sentinelRef: React.RefObject<HTMLDivElement>;\n    };\n\nfunction onContainerScroll({\n    hasMore,\n    isLoading,\n    onLoadMore,\n    scrollContainerNode,\n    sentinelRef,\n    threshold,\n    useWindow,\n}: OnContainerScrollParams) {\n    if (isLoading || !hasMore) return;\n\n    if (sentinelRef.current === null) return;\n    const { top: sentinelTop } = sentinelRef.current.getBoundingClientRect();\n\n    if (useWindow) {\n        if (sentinelTop - window.innerHeight < threshold) {\n            onLoadMore();\n        }\n    } else {\n        if (!scrollContainerNode) return;\n\n        const { bottom: containerBottom } = scrollContainerNode.getBoundingClientRect();\n        if (sentinelTop - containerBottom < threshold) {\n            onLoadMore();\n        }\n    }\n}\n\nfunction InfiniteScroll({\n    children,\n    hasMore,\n    isLoading,\n    onLoadMore,\n    scrollContainerNode,\n    threshold = 100,\n    throttle = 64,\n    useWindow = false,\n}: InfiniteScrollProps) {\n    const sentinelRef = React.useRef<HTMLDivElement | null>(null);\n\n    React.useEffect(() => {\n        const params = {\n            hasMore,\n            isLoading,\n            onLoadMore,\n            scrollContainerNode,\n            sentinelRef,\n            threshold,\n            useWindow,\n        };\n\n        const scrollHandler = throttleFn(() => onContainerScroll(params), throttle);\n        const resizeHandler = throttleFn(() => onContainerScroll(params), throttle);\n\n        const container = useWindow ? window : scrollContainerNode;\n\n        if (container) {\n            container.addEventListener('scroll', scrollHandler);\n            container.addEventListener('resize', resizeHandler);\n        }\n\n        // loads more content until page becomes scrollable, or until there is no more data to fetch\n        onContainerScroll(params);\n\n        return function removeEventListeners() {\n            if (container) {\n                container.removeEventListener('scroll', scrollHandler);\n                container.removeEventListener('resize', resizeHandler);\n            }\n        };\n    }, [hasMore, isLoading, onLoadMore, scrollContainerNode, sentinelRef, threshold, throttle, useWindow]);\n\n    return (\n        <div>\n            {children}\n            <div ref={sentinelRef} data-testid=\"sentinel\" />\n        </div>\n    );\n}\n\nexport default InfiniteScroll;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,OAAOC,UAAU,MAAM,iBAAiB;AA6BxC,SAASC,iBAAiBA,CAAC;EACvBC,OAAO;EACPC,SAAS;EACTC,UAAU;EACVC,mBAAmB;EACnBC,WAAW;EACXC,SAAS;EACTC;AACqB,CAAC,EAAE;EACxB,IAAIL,SAAS,IAAI,CAACD,OAAO,EAAE;EAE3B,IAAII,WAAW,CAACG,OAAO,KAAK,IAAI,EAAE;EAClC,MAAM;IAAEC,GAAG,EAAEC;EAAY,CAAC,GAAGL,WAAW,CAACG,OAAO,CAACG,qBAAqB,CAAC,CAAC;EAExE,IAAIJ,SAAS,EAAE;IACX,IAAIG,WAAW,GAAGE,MAAM,CAACC,WAAW,GAAGP,SAAS,EAAE;MAC9CH,UAAU,CAAC,CAAC;IAChB;EACJ,CAAC,MAAM;IACH,IAAI,CAACC,mBAAmB,EAAE;IAE1B,MAAM;MAAEU,MAAM,EAAEC;IAAgB,CAAC,GAAGX,mBAAmB,CAACO,qBAAqB,CAAC,CAAC;IAC/E,IAAID,WAAW,GAAGK,eAAe,GAAGT,SAAS,EAAE;MAC3CH,UAAU,CAAC,CAAC;IAChB;EACJ;AACJ;AAEA,SAASa,cAAcA,CAAC;EACpBC,QAAQ;EACRhB,OAAO;EACPC,SAAS;EACTC,UAAU;EACVC,mBAAmB;EACnBE,SAAS,GAAG,GAAG;EACfY,QAAQ,GAAG,EAAE;EACbX,SAAS,GAAG;AACK,CAAC,EAAE;EACpB,MAAMF,WAAW,GAAGP,KAAK,CAACqB,MAAM,CAAwB,IAAI,CAAC;EAE7DrB,KAAK,CAACsB,SAAS,CAAC,MAAM;IAClB,MAAMC,MAAM,GAAG;MACXpB,OAAO;MACPC,SAAS;MACTC,UAAU;MACVC,mBAAmB;MACnBC,WAAW;MACXC,SAAS;MACTC;IACJ,CAAC;IAED,MAAMe,aAAa,GAAGvB,UAAU,CAAC,MAAMC,iBAAiB,CAACqB,MAAM,CAAC,EAAEH,QAAQ,CAAC;IAC3E,MAAMK,aAAa,GAAGxB,UAAU,CAAC,MAAMC,iBAAiB,CAACqB,MAAM,CAAC,EAAEH,QAAQ,CAAC;IAE3E,MAAMM,SAAS,GAAGjB,SAAS,GAAGK,MAAM,GAAGR,mBAAmB;IAE1D,IAAIoB,SAAS,EAAE;MACXA,SAAS,CAACC,gBAAgB,CAAC,QAAQ,EAAEH,aAAa,CAAC;MACnDE,SAAS,CAACC,gBAAgB,CAAC,QAAQ,EAAEF,aAAa,CAAC;IACvD;;IAEA;IACAvB,iBAAiB,CAACqB,MAAM,CAAC;IAEzB,OAAO,SAASK,oBAAoBA,CAAA,EAAG;MACnC,IAAIF,SAAS,EAAE;QACXA,SAAS,CAACG,mBAAmB,CAAC,QAAQ,EAAEL,aAAa,CAAC;QACtDE,SAAS,CAACG,mBAAmB,CAAC,QAAQ,EAAEJ,aAAa,CAAC;MAC1D;IACJ,CAAC;EACL,CAAC,EAAE,CAACtB,OAAO,EAAEC,SAAS,EAAEC,UAAU,EAAEC,mBAAmB,EAAEC,WAAW,EAAEC,SAAS,EAAEY,QAAQ,EAAEX,SAAS,CAAC,CAAC;EAEtG,oBACIT,KAAA,CAAA8B,aAAA,cACKX,QAAQ,eACTnB,KAAA,CAAA8B,aAAA;IAAKC,GAAG,EAAExB,WAAY;IAAC,eAAY;EAAU,CAAE,CAC9C,CAAC;AAEd;AAEA,eAAeW,cAAc","ignoreList":[]}