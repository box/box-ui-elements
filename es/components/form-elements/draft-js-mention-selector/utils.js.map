{"version":3,"file":"utils.js","names":["EditorState","Modifier","UNEDITABLE_TIMESTAMP_TEXT","defaultMentionTriggers","defaultMentionTriggersString","reduce","prev","current","defaultMentionPattern","RegExp","getActiveMentionForEditorState","editorState","mentionPattern","contentState","getCurrentContent","selectionState","getSelection","startKey","getStartKey","activeBlock","getBlockForKey","cursorPosition","getStartOffset","result","findEntityRanges","character","getEntity","start","end","activeRangeText","getText","substr","mentionMatch","match","blockID","mentionString","mentionTrigger","index","addMention","activeMention","mention","id","name","preInsertionSelectionState","merge","anchorOffset","focusOffset","textToInsert","contentStateWithEntity","createEntity","entityKey","getLastCreatedEntityKey","contentStateWithLink","replaceText","spaceOffset","length","selectionStateForAddingSpace","contentStateWithLinkAndExtraSpace","insertText","editorStateWithLink","push","constructTimestampString","timestampInMilliseconds","fileVersionId","getFormattedCommentText","blockMap","getBlockMap","resultStringArr","hasMention","forEach","block","text","blockMapStringArr","getEntityAt","entity","isMention","getType","isTimestamp","stringToAdd","getData","substring","join"],"sources":["../../../../src/components/form-elements/draft-js-mention-selector/utils.js"],"sourcesContent":["// @flow\nimport { EditorState, Modifier } from 'draft-js';\n\nexport const UNEDITABLE_TIMESTAMP_TEXT = 'UNEDITABLE_TIMESTAMP_TEXT';\n\nexport type Mention = {\n    blockID: string,\n    end: number,\n    mentionString: string,\n    mentionTrigger: string,\n    start: number,\n};\n\nconst defaultMentionTriggers = ['@', '＠', '﹫'];\nconst defaultMentionTriggersString = defaultMentionTriggers.reduce((prev, current) => `${prev}\\\\${current}`, '');\nconst defaultMentionPattern = new RegExp(`([${defaultMentionTriggersString}])([^${defaultMentionTriggersString}]*)$`);\n\n/**\n * Extracts the active mention from the editor state\n */\nfunction getActiveMentionForEditorState(\n    editorState: EditorState,\n    mentionPattern: RegExp = defaultMentionPattern,\n): Mention | null {\n    const contentState = editorState.getCurrentContent();\n    const selectionState = editorState.getSelection();\n\n    const startKey = selectionState.getStartKey();\n    const activeBlock = contentState.getBlockForKey(startKey);\n\n    const cursorPosition = selectionState.getStartOffset();\n\n    let result = null;\n\n    // Break the active block into entity ranges.\n    activeBlock.findEntityRanges(\n        character => character.getEntity() === null,\n        (start, end) => {\n            // Find the active range (is the cursor inside this range?)\n            if (start <= cursorPosition && cursorPosition <= end) {\n                // Determine if the active range contains a mention.\n                const activeRangeText = activeBlock.getText().substr(start, cursorPosition - start);\n                const mentionMatch = activeRangeText.match(mentionPattern);\n\n                if (mentionMatch) {\n                    result = {\n                        blockID: startKey,\n                        mentionString: mentionMatch[2],\n                        mentionTrigger: mentionMatch[1],\n                        start: start + mentionMatch.index,\n                        end: cursorPosition,\n                    };\n                }\n            }\n\n            return null;\n        },\n    );\n\n    return result;\n}\n\n/**\n * Inserts a selected mention into the editor\n */\nfunction addMention(editorState: EditorState, activeMention: Mention | null, mention: Object): EditorState {\n    const { start, end } = activeMention || {};\n\n    const { id, name } = mention;\n\n    const contentState = editorState.getCurrentContent();\n    const selectionState = editorState.getSelection();\n\n    const preInsertionSelectionState = selectionState.merge({\n        anchorOffset: start,\n        focusOffset: end,\n    });\n\n    const textToInsert = `@${name}`;\n\n    const contentStateWithEntity = contentState.createEntity('MENTION', 'IMMUTABLE', { id });\n\n    const entityKey = contentStateWithEntity.getLastCreatedEntityKey();\n\n    const contentStateWithLink = Modifier.replaceText(\n        contentState,\n        preInsertionSelectionState,\n        textToInsert,\n        null,\n        entityKey,\n    );\n\n    const spaceOffset = preInsertionSelectionState.getStartOffset() + textToInsert.length;\n    const selectionStateForAddingSpace = preInsertionSelectionState.merge({\n        anchorOffset: spaceOffset,\n        focusOffset: spaceOffset,\n    });\n\n    const contentStateWithLinkAndExtraSpace = Modifier.insertText(\n        contentStateWithLink,\n        selectionStateForAddingSpace,\n        ' ',\n    );\n\n    const editorStateWithLink = EditorState.push(editorState, contentStateWithLinkAndExtraSpace, 'change-block-type');\n\n    return editorStateWithLink;\n}\n\nconst constructTimestampString = (timestampInMilliseconds: number, fileVersionId: string): string => {\n    return `#[timestamp:${timestampInMilliseconds},versionId:${fileVersionId}] `;\n};\n\n/**\n * Formats the editor's text such that it will be accepted by the server.\n */\nfunction getFormattedCommentText(editorState: EditorState): { hasMention: boolean, text: string } {\n    const contentState = editorState.getCurrentContent();\n    const blockMap = contentState.getBlockMap();\n\n    const resultStringArr = [];\n\n    // The API needs to explicitly know if a message contains a mention.\n    let hasMention = false;\n\n    // For all ContentBlocks in the ContentState:\n    blockMap.forEach(block => {\n        const text = block.getText();\n        const blockMapStringArr = [];\n\n        // Break down the ContentBlock into ranges\n        block.findEntityRanges(\n            () => true,\n            (start, end) => {\n                const entityKey = block.getEntityAt(start);\n                // If the range is an Entity, check its type:\n                // - MENTION entities: format as \"@[id:text]\" and set hasMention\n                // - TIMESTAMP entities: add raw text as-is\n                // - Other entities (LINK, etc.): add raw text as-is\n                if (entityKey) {\n                    const entity = contentState.getEntity(entityKey);\n                    const isMention = entity.getType() === 'MENTION';\n                    const isTimestamp = entity.getType() === UNEDITABLE_TIMESTAMP_TEXT;\n                    if (isMention) {\n                        const stringToAdd = `@[${entity.getData().id}:${text.substring(start + 1, end)}]`;\n                        blockMapStringArr.push(stringToAdd);\n                        hasMention = true;\n                    } else if (isTimestamp) {\n                        const { timestampInMilliseconds, fileVersionId } = entity.getData();\n                        const stringToAdd = constructTimestampString(timestampInMilliseconds, fileVersionId);\n                        blockMapStringArr.push(stringToAdd);\n                    } else {\n                        // For timestamp and other entity types, add the raw text\n                        blockMapStringArr.push(text.substring(start, end));\n                    }\n                } else {\n                    blockMapStringArr.push(text.substring(start, end));\n                }\n            },\n        );\n        resultStringArr.push(blockMapStringArr.join(''));\n    });\n\n    // Concatenate the array of block strings with newlines\n    // (Each block represents a paragraph)\n    return { text: resultStringArr.join('\\n'), hasMention };\n}\n\nexport {\n    addMention,\n    defaultMentionTriggers,\n    defaultMentionPattern,\n    getActiveMentionForEditorState,\n    getFormattedCommentText,\n};\n"],"mappings":"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","ignoreList":[]}