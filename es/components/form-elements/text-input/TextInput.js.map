{"version":3,"file":"TextInput.js","names":["React","TextInputCore","messages","FormInput","TextInput","Component","constructor","props","_defineProperty","currentTarget","value","state","error","setState","checkValidity","valid","undefined","setErrorFromValidityState","isRequired","validation","input","trim","length","setCustomValidity","code","validity","componentDidUpdate","prevProps","validityState","badInput","customError","patternMismatch","tooLong","tooShort","typeMismatch","valueMissing","minLength","maxLength","type","typeMismatchEmail","typeMismatchUrl","render","autoFocus","className","isDisabled","label","name","onFocus","pattern","placeholder","isReadOnly","isLoading","labelTooltip","hideLabel","createElement","onValidityStateUpdate","onValidityStateUpdateHandler","disabled","message","onBlur","onChange","inputRef","readOnly"],"sources":["../../../../src/components/form-elements/text-input/TextInput.js"],"sourcesContent":["// @flow\nimport * as React from 'react';\n\nimport TextInputCore from '../../text-input';\n\nimport * as messages from '../input-messages';\nimport FormInput from '../form/FormInput';\n\ntype Props = {\n    /** Whether to automatically focus the input */\n    autoFocus?: boolean,\n    /** Add a class to the component */\n    className?: string,\n    hideLabel?: boolean,\n    isDisabled?: boolean,\n    isLoading?: boolean,\n    isReadOnly?: boolean,\n    /** Is input required */\n    isRequired?: boolean,\n    /** Label displayed for the text input */\n    label: React.Node,\n    labelTooltip?: React.Node,\n    maxLength?: number,\n    minLength?: number,\n    /** Name of the text input */\n    name: string,\n    /** Called when the text input is focused */\n    onFocus?: Function,\n    /** html5 regex pattern for validation */\n    pattern?: string,\n    /** Placeholder for the text input */\n    placeholder?: string,\n    /** html input types (email, url, text, number), defaults to 'text' */\n    type?: string,\n    /** Function that should either return an error string when inValid and an empty string when valid. It can also return a Promise that resolves to an error string or empty string for server validations. */\n    validation?: Function,\n    /** Value of the text input */\n    value: string,\n};\n\ntype State = {\n    error: Object | null,\n    value: string,\n};\n\nclass TextInput extends React.Component<Props, State> {\n    static defaultProps = {\n        autoFocus: false,\n        value: '',\n        type: 'text',\n        isReadOnly: false,\n        isLoading: false,\n    };\n\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            error: null,\n            value: props.value,\n        };\n    }\n\n    componentDidUpdate(prevProps: Props) {\n        // If a new value is passed by prop, set it\n        if (prevProps.value !== this.props.value) {\n            this.setState({\n                value: this.props.value,\n            });\n        }\n    }\n\n    onChange = ({ currentTarget }: SyntheticEvent<HTMLInputElement>) => {\n        const { value } = currentTarget;\n        if (this.state.error) {\n            this.setState(\n                {\n                    value,\n                },\n                this.checkValidity,\n            );\n        } else {\n            this.setState({\n                value,\n            });\n        }\n    };\n\n    onValidityStateUpdateHandler = (error: Object) => {\n        if (error.valid !== undefined) {\n            this.setErrorFromValidityState(error);\n        } else {\n            this.setState({\n                error,\n            });\n        }\n    };\n\n    setErrorFromValidityState(validityState: ValidityState) {\n        const {\n            badInput,\n            customError,\n            patternMismatch,\n            tooLong,\n            tooShort,\n            typeMismatch,\n            valid,\n            valueMissing,\n        } = validityState;\n\n        const { isRequired, minLength, maxLength, type, validation } = this.props;\n\n        const { value } = this.state;\n\n        let error;\n\n        if (valid) {\n            error = null;\n        } else if (badInput) {\n            error = messages.badInput();\n        } else if (patternMismatch) {\n            error = messages.patternMismatch();\n        } else if (tooShort && typeof minLength !== 'undefined') {\n            error = messages.tooShort(minLength);\n        } else if (tooLong && typeof maxLength !== 'undefined') {\n            error = messages.tooLong(maxLength);\n        } else if (typeMismatch && type === 'email') {\n            error = messages.typeMismatchEmail();\n        } else if (typeMismatch && type === 'url') {\n            error = messages.typeMismatchUrl();\n        } else if (valueMissing) {\n            error = messages.valueMissing();\n        } else if (customError && (isRequired || value.trim().length) && validation) {\n            error = validation(value);\n        }\n\n        this.setState({\n            error,\n        });\n    }\n\n    input: ?HTMLInputElement;\n\n    // Updates component value and validity state\n    checkValidity = () => {\n        const { isRequired, validation } = this.props;\n        const { input } = this;\n        if (!input) {\n            return;\n        }\n\n        if (validation && (isRequired || input.value.trim().length)) {\n            const error = validation(input.value);\n            this.setState({\n                error,\n                value: input.value,\n            });\n\n            if (error) {\n                input.setCustomValidity(error.code);\n            } else {\n                input.setCustomValidity('');\n            }\n        } else {\n            this.setErrorFromValidityState(input.validity);\n        }\n    };\n\n    render() {\n        const {\n            autoFocus,\n            className = '',\n            isDisabled,\n            isRequired,\n            label,\n            maxLength,\n            minLength,\n            name,\n            onFocus,\n            pattern,\n            placeholder,\n            type,\n            isReadOnly,\n            isLoading,\n            labelTooltip,\n            hideLabel,\n        } = this.props;\n\n        const { error, value } = this.state;\n\n        return (\n            <div className={className}>\n                <FormInput name={name} onValidityStateUpdate={this.onValidityStateUpdateHandler}>\n                    <TextInputCore\n                        disabled={isDisabled}\n                        label={label}\n                        isRequired={isRequired}\n                        error={error ? error.message : null}\n                        autoFocus={autoFocus}\n                        maxLength={maxLength}\n                        minLength={minLength}\n                        name={name}\n                        onBlur={this.checkValidity}\n                        onFocus={onFocus}\n                        onChange={this.onChange}\n                        pattern={pattern}\n                        placeholder={placeholder}\n                        inputRef={input => {\n                            this.input = input;\n                        }}\n                        type={type}\n                        value={value}\n                        readOnly={isReadOnly}\n                        isLoading={isLoading}\n                        labelTooltip={labelTooltip}\n                        hideLabel={hideLabel}\n                    />\n                </FormInput>\n            </div>\n        );\n    }\n}\n\nexport default TextInput;\n"],"mappings":"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","ignoreList":[]}