{"version":3,"file":"upload.js","names":["STATUS_PENDING","STATUS_IN_PROGRESS","STATUS_STAGED","STATUS_COMPLETE","STATUS_ERROR"],"sources":["../../../src/common/types/upload.js"],"sourcesContent":["// @flow\nimport { STATUS_PENDING, STATUS_IN_PROGRESS, STATUS_STAGED, STATUS_COMPLETE, STATUS_ERROR } from '../../constants';\nimport type { Token, BoxItem } from './core';\n\ntype UploadStatus =\n    | typeof STATUS_PENDING\n    | typeof STATUS_IN_PROGRESS\n    | typeof STATUS_STAGED\n    | typeof STATUS_COMPLETE\n    | typeof STATUS_ERROR;\n\ntype FileSystemFileEntry = {\n    createReader: Function,\n    file: Function,\n    isDirectory: boolean,\n    isFile: boolean,\n    name: string,\n};\n\ntype UploadFile = File & { lastModifiedDate?: Date, webkitRelativePath?: string };\n\ntype UploadItemAPIOptions = {\n    apiHost?: string,\n    fileId?: string,\n    folderId?: string,\n    token?: Token,\n    uploadInitTimestamp?: number,\n};\n\ntype UploadDataTransferItemWithAPIOptions = {\n    item: DataTransferItem,\n    options?: UploadItemAPIOptions,\n};\n\ntype UploadFileWithAPIOptions = {\n    file: UploadFile,\n    options?: UploadItemAPIOptions,\n};\n\ntype DirectoryReader = {\n    readEntries: (Function, Function) => void,\n};\n\ntype FolderUploadItem = {\n    boxFile?: BoxItem,\n    error?: Object,\n    extension: string,\n    isFolder?: boolean,\n    name: string,\n    options?: UploadItemAPIOptions,\n    progress: number,\n    size: number,\n    status: UploadStatus,\n};\n\ntype UploadItem = {\n    api: PlainUploadAPI | MultiputUploadAPI,\n    boxFile?: BoxItem,\n    bytesUploadedOnLastResume?: number,\n    error?: Object,\n    extension: string,\n    file: UploadFile,\n    isFolder?: boolean,\n    name: string,\n    options?: UploadItemAPIOptions,\n    progress: number,\n    size: number,\n    status: UploadStatus,\n};\n\ntype MultiputConfig = {\n    digestReadahead: number,\n    initialRetryDelayMs: number,\n    maxRetryDelayMs: number,\n    parallelism: number,\n    requestTimeoutMs: number,\n    retries: number,\n};\n\ntype MultiputPart = {\n    offset: number,\n    part_id: string,\n    sha1: string,\n    size: number,\n};\n\ntype MultiputData = {\n    part?: MultiputPart,\n};\n\nexport type {\n    UploadStatus,\n    FileSystemFileEntry,\n    UploadFile,\n    UploadItemAPIOptions,\n    UploadDataTransferItemWithAPIOptions,\n    UploadFileWithAPIOptions,\n    DirectoryReader,\n    FolderUploadItem,\n    UploadItem,\n    MultiputConfig,\n    MultiputPart,\n    MultiputData,\n};\n"],"mappings":"AACA,SAASA,cAAc,EAAEC,kBAAkB,EAAEC,aAAa,EAAEC,eAAe,EAAEC,YAAY,QAAQ,iBAAiB","ignoreList":[]}