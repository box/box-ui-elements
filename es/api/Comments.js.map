{"version":3,"file":"Comments.js","names":["COMMENTS_FIELDS_TO_FETCH","OffsetBasedAPI","PERMISSION_CAN_COMMENT","PERMISSION_CAN_DELETE","PERMISSION_CAN_EDIT","ERROR_CODE_CREATE_COMMENT","ERROR_CODE_UPDATE_COMMENT","ERROR_CODE_DELETE_COMMENT","ERROR_CODE_FETCH_COMMENTS","Comments","constructor","args","_defineProperty","data","isDestroyed","successCallback","entries","format","comments","map","_objectSpread","getUrl","id","Error","getBaseApiUrl","commentsUrl","baseUrl","comment","tagged_message","message","createComment","file","taggedMessage","errorCallback","errorCode","permissions","checkApiCallValidity","e","requestData","item","type","params","fields","toString","post","url","updateComment","commentId","put","deleteComment","delete","getComments","fileId","offset","limit","shouldFetchAll","offsetGet"],"sources":["../../src/api/Comments.js"],"sourcesContent":["/**\n * @flow\n * @file Helper for the box comments API\n * @author Box\n */\n\nimport { COMMENTS_FIELDS_TO_FETCH } from '../utils/fields';\nimport OffsetBasedAPI from './OffsetBasedAPI';\nimport {\n    PERMISSION_CAN_COMMENT,\n    PERMISSION_CAN_DELETE,\n    PERMISSION_CAN_EDIT,\n    ERROR_CODE_CREATE_COMMENT,\n    ERROR_CODE_UPDATE_COMMENT,\n    ERROR_CODE_DELETE_COMMENT,\n    ERROR_CODE_FETCH_COMMENTS,\n} from '../constants';\nimport type { ElementsXhrError, ElementsErrorCallback } from '../common/types/api';\nimport type { BoxItem, BoxItemPermission } from '../common/types/core';\nimport type { BoxCommentPermission } from '../common/types/feed';\n\nclass Comments extends OffsetBasedAPI {\n    /**\n     * API URL for comments on a file\n     *\n     * @param {string} id - A box file id\n     * @return {string} base url for files\n     */\n    getUrl(id?: string): string {\n        if (!id) {\n            throw new Error('Missing file id!');\n        }\n\n        return `${this.getBaseApiUrl()}/files/${id}/comments`;\n    }\n\n    /**\n     * API URL for comments endpoint\n     *\n     * @param {string} [id] - A box comment id\n     * @return {string} base url for comments\n     */\n    commentsUrl(id?: string): string {\n        const baseUrl = `${this.getBaseApiUrl()}/comments`;\n        return id ? `${baseUrl}/${id}` : baseUrl;\n    }\n\n    /**\n     * Formats comment data for use in components.\n     *\n     * @param {string} [id] - An individual comment entry from the API\n     * @return {Task} A task\n     */\n    format(comment: Object): Comment {\n        return {\n            ...comment,\n            tagged_message: comment.tagged_message !== '' ? comment.tagged_message : comment.message,\n        };\n    }\n\n    /**\n     * Formats the comments api response to usable data\n     * @param {Object} data the api response data\n     */\n    successHandler = (data: Object): void => {\n        if (this.isDestroyed() || typeof this.successCallback !== 'function') {\n            return;\n        }\n\n        // There is no response data when deleting a comment\n        if (!data) {\n            this.successCallback();\n            return;\n        }\n\n        // We don't have entries when updating/creating a comment\n        if (!data.entries) {\n            this.successCallback(this.format(data));\n            return;\n        }\n\n        const comments = data.entries.map(this.format);\n        this.successCallback({ ...data, entries: comments });\n    };\n\n    /**\n     * API for creating a comment on a file\n     *\n     * @param {BoxItem} file - File object for which we are creating a comment\n     * @param {string} message - Comment message\n     * @param {string} taggedMessage - Comment message with @mentions\n     * @param {Function} successCallback - Success callback\n     * @param {Function} errorCallback - Error callback\n     * @return {void}\n     */\n    createComment({\n        file,\n        message,\n        taggedMessage,\n        successCallback,\n        errorCallback,\n    }: {\n        errorCallback: ElementsErrorCallback,\n        file: BoxItem,\n        message?: string,\n        successCallback: Function,\n        taggedMessage?: string,\n    }): void {\n        this.errorCode = ERROR_CODE_CREATE_COMMENT;\n        const { id = '', permissions } = file;\n\n        try {\n            this.checkApiCallValidity(PERMISSION_CAN_COMMENT, permissions, id);\n        } catch (e) {\n            errorCallback(e, this.errorCode);\n            return;\n        }\n\n        const requestData = {\n            data: {\n                item: {\n                    id,\n                    type: 'file',\n                },\n                message,\n                tagged_message: taggedMessage,\n            },\n            params: {\n                fields: COMMENTS_FIELDS_TO_FETCH.toString(),\n            },\n        };\n\n        this.post({\n            id,\n            url: this.commentsUrl(),\n            data: requestData,\n            successCallback,\n            errorCallback,\n        });\n    }\n\n    /**\n     * API for updating a comment on a file\n     *\n     * @param {BoxItem} file - File object for which we are updating a comment\n     * @param {string} commentId - Comment to be edited\n     * @param {string} message - Comment message\n     * @param {BoxCommentPermission} permissions - The known permissions of the comment we're updating\n     * @param {Function} successCallback - Success callback\n     * @param {Function} errorCallback - Error callback\n     * @return {void}\n     */\n    updateComment({\n        file,\n        commentId,\n        message,\n        tagged_message,\n        permissions,\n        successCallback,\n        errorCallback,\n    }: {\n        commentId: string,\n        errorCallback: ElementsErrorCallback,\n        file: BoxItem,\n        message: string,\n        permissions: BoxCommentPermission,\n        successCallback: Function,\n        tagged_message?: string,\n    }): void {\n        this.errorCode = ERROR_CODE_UPDATE_COMMENT;\n        const { id = '' } = file;\n\n        try {\n            this.checkApiCallValidity(PERMISSION_CAN_EDIT, permissions, id);\n        } catch (e) {\n            errorCallback(e, this.errorCode);\n            return;\n        }\n\n        const requestData = {\n            data: { message, tagged_message },\n        };\n\n        this.put({\n            id,\n            url: this.commentsUrl(commentId),\n            data: requestData,\n            successCallback,\n            errorCallback,\n        });\n    }\n\n    /**\n     * API for deleting a comment on a file\n     *\n     * @param {BoxItem} file - File object for which we are deleting a comment\n     * @param {string} commentId - Id of the comment we are deleting\n     * @param {BoxCommentPermission} permissions - The known permissions of the comment we're deleting\n     * @param {Function} successCallback - Success callback\n     * @param {Function} errorCallback - Error callback\n     * @return {void}\n     */\n    deleteComment({\n        file,\n        commentId,\n        permissions,\n        successCallback,\n        errorCallback,\n    }: {\n        commentId: string,\n        errorCallback: ElementsErrorCallback,\n        file: BoxItem,\n        permissions: BoxCommentPermission,\n        successCallback: Function,\n    }): void {\n        this.errorCode = ERROR_CODE_DELETE_COMMENT;\n        const { id = '' } = file;\n\n        try {\n            this.checkApiCallValidity(PERMISSION_CAN_DELETE, permissions, id);\n        } catch (e) {\n            errorCallback(e, this.errorCode);\n            return;\n        }\n\n        this.delete({\n            id,\n            url: this.commentsUrl(commentId),\n            successCallback,\n            errorCallback,\n        });\n    }\n\n    /**\n     * API for fetching comments on a file\n     *\n     * @param {string} fileId - the file id\n     * @param {BoxItemPermission} permissions - the permissions for the file\n     * @param {Function} successCallback - the success callback\n     * @param {Function} errorCallback - the error callback\n     * @param {array} fields - the fields to fetch\n     * @param {number} offset - the offset from the start to start fetching at\n     * @param {number} limit - the number of items to fetch\n     * @param {boolean} shouldFetchAll - true if should get all the pages before calling the sucessCallback\n     * @returns {void}\n     */\n    getComments(\n        fileId: string,\n        permissions: BoxItemPermission,\n        successCallback: Function,\n        errorCallback: (e: ElementsXhrError, code: string) => void,\n        fields: Array<string> = COMMENTS_FIELDS_TO_FETCH,\n        offset?: number,\n        limit?: number,\n        shouldFetchAll?: boolean,\n    ): void {\n        this.errorCode = ERROR_CODE_FETCH_COMMENTS;\n        try {\n            this.checkApiCallValidity(PERMISSION_CAN_COMMENT, permissions, fileId);\n        } catch (e) {\n            errorCallback(e, this.errorCode);\n            return;\n        }\n\n        this.offsetGet(fileId, successCallback, errorCallback, offset, limit, fields, shouldFetchAll);\n    }\n}\n\nexport default Comments;\n"],"mappings":"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","ignoreList":[]}