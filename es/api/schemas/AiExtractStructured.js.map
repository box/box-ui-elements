{"version":3,"file":"AiExtractStructured.js","names":["AiAgentExtractStructured","AiAgentReference","AiItemBase"],"sources":["../../../src/api/schemas/AiExtractStructured.js"],"sourcesContent":["/**\n * @flow\n * @author Box\n */\n\nimport { AiAgentExtractStructured } from './AiAgentExtractStructured';\nimport { AiAgentReference } from './AiAgentReference';\nimport { AiItemBase } from './AiItemBase';\n\nexport type AiExtractStructuredMetadataTemplateTypeField = 'metadata_template';\n\nexport interface AiExtractStructuredMetadataTemplateField {\n    /**\n     * The name of the metadata template.\n     */\n    +template_key?: string;\n    /**\n     * Value is always `metadata_template`.\n     */\n    +type?: AiExtractStructuredMetadataTemplateTypeField;\n    /**\n     * The scope of the metadata template can either be global or\n    enterprise_*. The global scope is used for templates that are\n    available to any Box enterprise. The enterprise_* scope represents\n    templates that have been created within a specific enterprise,\n    where * will be the ID of that enterprise.\n     */\n    +scope?: string;\n}\n\nexport interface AiExtractStructuredFieldsOptionsField {\n    /**\n     * A unique identifier for the field.\n     */\n    +key: string;\n}\n\nexport interface AiExtractStructuredFieldsField {\n    /**\n     * A unique identifier for the field.\n     */\n    +key: string;\n    /**\n     * A description of the field.\n     */\n    +description?: string;\n    /**\n     * The display name of the field.\n     */\n    +display_name?: string;\n    /**\n     * Context about the key that may include how to find and how to format it.\n     */\n    +prompt?: string;\n    /**\n     * The type of the field. Can include but is not limited to string, float, date, enum, and multiSelect.\n     */\n    +type?: string;\n    /**\n     * A list of options for this field. This is most often used in combination with the enum and multiSelect field types.\n     */\n    +options?: $ReadOnlyArray<AiExtractStructuredFieldsOptionsField>;\n}\n\nexport interface AiExtractStructured {\n    /**\n     * The items to be processed by the LLM, often files.\n     */\n    +items: $ReadOnlyArray<AiItemBase>;\n    /**\n     * The metadata template containing the fields to extract. Cannot be used\n    in combination with `fields`.\n     */\n    +metadata_template?: AiExtractStructuredMetadataTemplateField;\n    /**\n     * The fields to be extracted from the items. Cannot be used in combination\n    with `metadata_template`.\n     */\n    +fields?: $ReadOnlyArray<AiExtractStructuredFieldsField>;\n    /**\n     * The JSON blob that contains overrides for the agent config.\n     */\n    +agent_config?: string;\n    /**\n     * * AI agent definition to use for extraction.\n     * – `AiAgentExtractStructured`: customise Basic-Text / Long-Text agents\n     * – `AiAgentReference`        : reference a custom AI-Agent by ID\n     */\n    +ai_agent?: AiAgentExtractStructured | AiAgentReference;\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,SAASA,wBAAwB,QAAQ,4BAA4B;AACrE,SAASC,gBAAgB,QAAQ,oBAAoB;AACrD,SAASC,UAAU,QAAQ,cAAc","ignoreList":[]}