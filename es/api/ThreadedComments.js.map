{"version":3,"file":"ThreadedComments.js","names":["MarkerBasedApi","PERMISSION_CAN_COMMENT","PERMISSION_CAN_DELETE","PERMISSION_CAN_EDIT","ERROR_CODE_CREATE_COMMENT","ERROR_CODE_UPDATE_COMMENT","ERROR_CODE_DELETE_COMMENT","ERROR_CODE_FETCH_COMMENT","ERROR_CODE_FETCH_COMMENTS","PERMISSION_CAN_RESOLVE","ERROR_CODE_FETCH_REPLIES","ERROR_CODE_CREATE_REPLY","formatComment","ThreadedComments","constructor","args","_defineProperty","data","isDestroyed","successCallback","entries","comments","map","_objectSpread","getUrl","fileId","getBaseApiUrl","getUrlForId","commentId","getUrlWithRepliesForId","createComment","file","message","errorCallback","errorCode","id","permissions","checkApiCallValidity","e","post","url","updateComment","status","requestData","put","deleteComment","delete","getComment","get","getComments","marker","limit","shouldFetchAll","repliesCount","markerGet","replies_count","getCommentReplies","createCommentReply"],"sources":["../../src/api/ThreadedComments.js"],"sourcesContent":["/**\n * @flow\n * @file Helper for the box threadedComments API\n * @author Box\n */\n\nimport MarkerBasedApi from './MarkerBasedAPI';\nimport {\n    PERMISSION_CAN_COMMENT,\n    PERMISSION_CAN_DELETE,\n    PERMISSION_CAN_EDIT,\n    ERROR_CODE_CREATE_COMMENT,\n    ERROR_CODE_UPDATE_COMMENT,\n    ERROR_CODE_DELETE_COMMENT,\n    ERROR_CODE_FETCH_COMMENT,\n    ERROR_CODE_FETCH_COMMENTS,\n    PERMISSION_CAN_RESOLVE,\n    ERROR_CODE_FETCH_REPLIES,\n    ERROR_CODE_CREATE_REPLY,\n} from '../constants';\nimport { formatComment } from './utils';\n\nimport type { ElementsXhrError, ElementsErrorCallback } from '../common/types/api';\nimport type { BoxItem, BoxItemPermission } from '../common/types/core';\nimport type {\n    BoxCommentPermission,\n    Comment,\n    FeedItemStatus,\n    ThreadedComments as ThreadedCommentsType,\n} from '../common/types/feed';\n\nclass ThreadedComments extends MarkerBasedApi {\n    /**\n     * API URL for comments\n     *\n     * @param {string} [fileId]\n     * @return {string} base url for comments\n     */\n    getUrl(fileId?: string): string {\n        return `${this.getBaseApiUrl()}/undoc/comments${fileId ? `?file_id=${fileId}` : ''}`;\n    }\n\n    /**\n     * API URL for specific comment\n     *\n     * @param {string} [commentId]\n     * @return {string} base url for specific comment\n     */\n    getUrlForId(commentId: string): string {\n        return `${this.getUrl()}/${commentId}`;\n    }\n\n    /**\n     * API URL for specific comment\n     *\n     * @param {string} commentId\n     * @param {string} [fileId]\n     * @return {string}  base url for specific comment replies\n     */\n    getUrlWithRepliesForId(commentId: string, fileId?: string): string {\n        return `${this.getUrlForId(commentId)}/replies${fileId ? `?file_id=${fileId}` : ''}`;\n    }\n\n    /**\n     * Formats the threaded comments api response to usable data\n     * @param {Object} data the api response data\n     */\n    successHandler = (data: Object): void => {\n        if (this.isDestroyed() || typeof this.successCallback !== 'function') {\n            return;\n        }\n\n        // There is no response data when deleting a comment\n        if (!data) {\n            this.successCallback();\n            return;\n        }\n\n        // We don't have entries when updating/creating a comment\n        if (!data.entries) {\n            this.successCallback(formatComment(data));\n            return;\n        }\n\n        const comments = data.entries.map(formatComment);\n        this.successCallback({ ...data, entries: comments });\n    };\n\n    /**\n     * API for creating a comment on a file\n     *\n     * @param {BoxItem} file - File object for which we are creating a comment\n     * @param {string} message - Comment message\n     * @param {Function} successCallback - Success callback\n     * @param {Function} errorCallback - Error callback\n     * @return {void}\n     */\n    createComment({\n        file,\n        message,\n        successCallback,\n        errorCallback,\n    }: {\n        errorCallback: ElementsErrorCallback,\n        file: BoxItem,\n        message?: string,\n        successCallback: (comment: Comment) => void,\n    }): void {\n        this.errorCode = ERROR_CODE_CREATE_COMMENT;\n        const { id, permissions } = file;\n\n        try {\n            this.checkApiCallValidity(PERMISSION_CAN_COMMENT, permissions, id);\n        } catch (e) {\n            errorCallback(e, this.errorCode);\n            return;\n        }\n\n        this.post({\n            id,\n            url: this.getUrl(id),\n            data: {\n                data: { message },\n            },\n            successCallback,\n            errorCallback,\n        });\n    }\n\n    /**\n     * API for updating a comment\n     *\n     * @param {string} fileId - File id for which we are updating a comment\n     * @param {string} commentId - Comment to be edited\n     * @param {FeedItemStatus} status - Comment status\n     * @param {string} message - Comment message\n     * @param {BoxCommentPermission} permissions - The known permissions of the comment we're updating\n     * @param {Function} successCallback - Success callback\n     * @param {Function} errorCallback - Error callback\n     * @return {void}\n     */\n    updateComment({\n        fileId,\n        commentId,\n        status,\n        message,\n        permissions,\n        successCallback,\n        errorCallback,\n    }: {\n        commentId: string,\n        errorCallback: ElementsErrorCallback,\n        fileId: string,\n        message?: string,\n        permissions: BoxCommentPermission,\n        status?: FeedItemStatus,\n        successCallback: (comment: Comment) => void,\n    }): void {\n        this.errorCode = ERROR_CODE_UPDATE_COMMENT;\n\n        if (message) {\n            try {\n                this.checkApiCallValidity(PERMISSION_CAN_EDIT, permissions, fileId);\n            } catch (e) {\n                errorCallback(e, this.errorCode);\n                return;\n            }\n        }\n\n        if (status) {\n            try {\n                this.checkApiCallValidity(PERMISSION_CAN_RESOLVE, permissions, fileId);\n            } catch (e) {\n                errorCallback(e, this.errorCode);\n                return;\n            }\n        }\n\n        const requestData = {\n            data: { status, message },\n        };\n\n        this.put({\n            id: fileId,\n            url: this.getUrlForId(commentId),\n            data: requestData,\n            successCallback,\n            errorCallback,\n        });\n    }\n\n    /**\n     * API for deleting a comment or reply\n     *\n     * @param {string} fileId - Id of an object for which we are deleting a comment\n     * @param {string} commentId - Id of the comment we are deleting\n     * @param {BoxCommentPermission} permissions - The known permissions of the comment we're deleting\n     * @param {Function} successCallback - Success callback\n     * @param {Function} errorCallback - Error callback\n     * @return {void}\n     */\n    deleteComment({\n        fileId,\n        commentId,\n        permissions,\n        successCallback,\n        errorCallback,\n    }: {\n        commentId: string,\n        errorCallback: ElementsErrorCallback,\n        fileId: string,\n        permissions: BoxCommentPermission,\n        successCallback: Function,\n    }): void {\n        this.errorCode = ERROR_CODE_DELETE_COMMENT;\n\n        try {\n            this.checkApiCallValidity(PERMISSION_CAN_DELETE, permissions, fileId);\n        } catch (e) {\n            errorCallback(e, this.errorCode);\n            return;\n        }\n\n        this.delete({\n            id: fileId,\n            url: this.getUrlForId(commentId),\n            successCallback,\n            errorCallback,\n        });\n    }\n\n    /**\n     * API for fetching comment\n     *\n     * @param {string} commentId - comment id\n     * @param {string} fileId - the file id\n     * @param {BoxItemPermission} permissions - the permissions for the file\n     * @param {Function} successCallback - the success callback\n     * @param {Function} errorCallback - the error callback\n     * @returns {void}\n     */\n    getComment({\n        commentId,\n        errorCallback,\n        fileId,\n        permissions,\n        successCallback,\n    }: {\n        commentId: string,\n        errorCallback: (e: ElementsXhrError, code: string) => void,\n        fileId: string,\n        permissions: BoxItemPermission,\n        successCallback: (comment: Comment) => void,\n    }): void {\n        this.errorCode = ERROR_CODE_FETCH_COMMENT;\n        try {\n            this.checkApiCallValidity(PERMISSION_CAN_COMMENT, permissions, fileId);\n        } catch (e) {\n            errorCallback(e, this.errorCode);\n            return;\n        }\n\n        this.get({\n            id: fileId,\n            errorCallback,\n            successCallback,\n            url: this.getUrlForId(commentId),\n        });\n    }\n\n    /**\n     * API for fetching comments\n     *\n     * @param {string} fileId - the file id\n     * @param {BoxItemPermission} permissions - the permissions for the file\n     * @param {Function} successCallback - the success callback\n     * @param {Function} errorCallback - the error callback\n     * @param {array} fields - the fields to fetch\n     * @param {string} marker the marker from the start to start fetching at\n     * @param {number} limit - the number of items to fetch\n     * @param {boolean} shouldFetchAll - true if should get all the pages before calling the sucessCallback\n     * @param {number} repliesCount - number of replies to return, by deafult all replies all returned\n     *  @returns {void}\n     */\n    getComments({\n        fileId,\n        permissions,\n        successCallback,\n        errorCallback,\n        marker,\n        limit,\n        shouldFetchAll,\n        repliesCount,\n    }: {\n        errorCallback: (e: ElementsXhrError, code: string) => void,\n        fileId: string,\n        limit?: number,\n        marker?: string,\n        permissions: BoxItemPermission,\n        repliesCount?: number,\n        shouldFetchAll?: boolean,\n        successCallback: (threadedComments: ThreadedCommentsType) => void,\n    }): void {\n        this.errorCode = ERROR_CODE_FETCH_COMMENTS;\n        try {\n            this.checkApiCallValidity(PERMISSION_CAN_COMMENT, permissions, fileId);\n        } catch (e) {\n            errorCallback(e, this.errorCode);\n            return;\n        }\n\n        this.markerGet({\n            id: fileId,\n            successCallback,\n            errorCallback,\n            marker,\n            limit,\n            requestData: {\n                ...(repliesCount ? { replies_count: repliesCount } : null),\n            },\n            shouldFetchAll,\n        });\n    }\n\n    /**\n     * @param {string} fileId - the file id\n     * @param {string} commentId - id of a Comment\n     * @param {BoxItemPermission} permissions - The known permissions of the comment\n     * @param {Function} successCallback - the success callback\n     * @param {Function} errorCallback - the error callback\n     */\n    getCommentReplies({\n        fileId,\n        commentId,\n        permissions,\n        successCallback,\n        errorCallback,\n    }: {\n        commentId: string,\n        errorCallback: (e: ElementsXhrError, code: string) => void,\n        fileId: string,\n        permissions: BoxItemPermission,\n        successCallback: (comments: ThreadedCommentsType) => void,\n    }): void {\n        this.errorCode = ERROR_CODE_FETCH_REPLIES;\n\n        try {\n            this.checkApiCallValidity(PERMISSION_CAN_COMMENT, permissions, fileId);\n        } catch (e) {\n            errorCallback(e, this.errorCode);\n            return;\n        }\n\n        this.get({\n            id: fileId,\n            errorCallback,\n            successCallback,\n            url: this.getUrlWithRepliesForId(commentId),\n        });\n    }\n\n    /**\n     * @param {string} fileId - the file id\n     * @param {string} commentId - id of a Comment for which we createing Reply\n     * @param {BoxItemPermission} permissions - The known permissions of the comment\n     * @param {Function} successCallback - the success callback\n     * @param {Function} errorCallback - the error callback\n     * @param {string} message - message of the Reply\n     */\n    createCommentReply({\n        fileId,\n        commentId,\n        permissions,\n        successCallback,\n        errorCallback,\n        message,\n    }: {\n        commentId: string,\n        errorCallback: (e: ElementsXhrError, code: string) => void,\n        fileId: string,\n        message: string,\n        permissions: BoxItemPermission,\n        successCallback: (comment: Comment) => void,\n    }): void {\n        this.errorCode = ERROR_CODE_CREATE_REPLY;\n\n        try {\n            this.checkApiCallValidity(PERMISSION_CAN_COMMENT, permissions, fileId);\n        } catch (e) {\n            errorCallback(e, this.errorCode);\n            return;\n        }\n\n        this.post({\n            id: fileId,\n            data: { data: { message } },\n            errorCallback,\n            successCallback,\n            url: this.getUrlWithRepliesForId(commentId, fileId),\n        });\n    }\n}\n\nexport default ThreadedComments;\n"],"mappings":"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","ignoreList":[]}