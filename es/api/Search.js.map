{"version":3,"file":"Search.js","names":["flatten","FOLDER_FIELDS_TO_FETCH","getBadItemError","Base","FileAPI","FolderAPI","WebLinkAPI","CACHE_PREFIX_SEARCH","FIELD_RELEVANCE","FIELD_REPRESENTATIONS","X_REP_HINT_HEADER_DIMENSIONS_DEFAULT","SORT_DESC","ERROR_CODE_SEARCH","Search","constructor","args","_defineProperty","data","isDestroyed","entries","total_count","limit","offset","Array","isArray","flattened","options","itemCache","concat","getCache","set","key","item_collection","_objectSpread","finish","error","errorCallback","errorCode","getEncodedQuery","query","encodeURIComponent","getCacheKey","id","getUrl","getBaseApiUrl","isLoaded","cache","has","search","get","collection","items","map","percentLoaded","sortBy","sortDirection","totalCount","successCallback","searchRequest","Promise","reject","fields","requestFields","xhr","url","params","ancestor_folder_ids","toString","headers","includes","then","searchSuccessHandler","catch","searchErrorHandler","forceFetch","unset"],"sources":["../../src/api/Search.js"],"sourcesContent":["/**\n * @flow\n * @file Helper for the box search api\n * @author Box\n */\n\nimport flatten from '../utils/flatten';\nimport { FOLDER_FIELDS_TO_FETCH } from '../utils/fields';\nimport { getBadItemError } from '../utils/error';\nimport Base from './Base';\nimport FileAPI from './File';\nimport FolderAPI from './Folder';\nimport WebLinkAPI from './WebLink';\nimport {\n    CACHE_PREFIX_SEARCH,\n    FIELD_RELEVANCE,\n    FIELD_REPRESENTATIONS,\n    X_REP_HINT_HEADER_DIMENSIONS_DEFAULT,\n    SORT_DESC,\n    ERROR_CODE_SEARCH,\n} from '../constants';\nimport type { RequestOptions, ElementsErrorCallback } from '../common/types/api';\nimport type { FlattenedBoxItem, FlattenedBoxItemCollection, Collection, BoxItemCollection } from '../common/types/core';\nimport type APICache from '../utils/Cache';\n\nclass Search extends Base {\n    /**\n     * @property {number}\n     */\n    limit: number;\n\n    /**\n     * @property {number}\n     */\n    offset: number;\n\n    /**\n     * @property {string}\n     */\n    id: string;\n\n    /**\n     * @property {string}\n     */\n    key: string;\n\n    /**\n     * @property {string}\n     */\n    query: string;\n\n    /**\n     * @property {Function}\n     */\n    successCallback: Function;\n\n    /**\n     * @property {Function}\n     */\n    errorCallback: ElementsErrorCallback;\n\n    /**\n     * @property {Array}\n     */\n    itemCache: string[];\n\n    /**\n     * Creates a key for the cache\n     *\n     * @param {string} id folder id\n     * @param {string} query search string\n     * @return {string} key\n     */\n    getEncodedQuery(query: string): string {\n        return encodeURIComponent(query);\n    }\n\n    /**\n     * Creates a key for the cache\n     *\n     * @param {string} id folder id\n     * @param {string} query search string\n     * @return {string} key\n     */\n    getCacheKey(id: string, query: string): string {\n        return `${CACHE_PREFIX_SEARCH}${id}|${query}`;\n    }\n\n    /**\n     * URL for search api\n     *\n     * @param {string} [id] optional file id\n     * @return {string} base url for files\n     */\n    getUrl(): string {\n        return `${this.getBaseApiUrl()}/search`;\n    }\n\n    /**\n     * Tells if a search results has its items all loaded\n     *\n     * @return {boolean} if items are loaded\n     */\n    isLoaded(): boolean {\n        const cache: APICache = this.getCache();\n        return cache.has(this.key);\n    }\n\n    /**\n     * Returns the results\n     *\n     * @return {void}\n     */\n    finish(): void {\n        if (this.isDestroyed()) {\n            return;\n        }\n\n        const cache: APICache = this.getCache();\n        const search: FlattenedBoxItem = cache.get(this.key);\n        const { item_collection }: FlattenedBoxItem = search;\n        if (!item_collection) {\n            throw getBadItemError();\n        }\n\n        const { entries, total_count }: FlattenedBoxItemCollection = item_collection;\n        if (!Array.isArray(entries) || typeof total_count !== 'number') {\n            throw getBadItemError();\n        }\n\n        const collection: Collection = {\n            id: this.id,\n            items: entries.map((key: string) => cache.get(key)),\n            offset: this.offset,\n            percentLoaded: 100,\n            sortBy: FIELD_RELEVANCE, // Results are always sorted by relevance\n            sortDirection: SORT_DESC, // Results are always sorted descending\n            totalCount: total_count,\n        };\n        this.successCallback(collection);\n    }\n\n    /**\n     * Handles the folder search response\n     *\n     * @param {Object} response\n     * @return {void}\n     */\n    searchSuccessHandler = ({ data }: { data: BoxItemCollection }): void => {\n        if (this.isDestroyed()) {\n            return;\n        }\n\n        const { entries, total_count, limit, offset }: BoxItemCollection = data;\n        if (\n            !Array.isArray(entries) ||\n            typeof total_count !== 'number' ||\n            typeof limit !== 'number' ||\n            typeof offset !== 'number'\n        ) {\n            throw getBadItemError();\n        }\n\n        const flattened: string[] = flatten(\n            entries,\n            new FolderAPI(this.options),\n            new FileAPI(this.options),\n            new WebLinkAPI(this.options),\n        );\n        this.itemCache = (this.itemCache || []).concat(flattened);\n\n        this.getCache().set(this.key, {\n            item_collection: { ...data, entries: this.itemCache },\n        });\n\n        this.finish();\n    };\n\n    /**\n     * Handles the search error\n     *\n     * @param {Error} error fetch error\n     * @return {void}\n     */\n    searchErrorHandler = (error: Error): void => {\n        if (this.isDestroyed()) {\n            return;\n        }\n\n        this.errorCallback(error, this.errorCode);\n    };\n\n    /**\n     * Does the network request\n     *\n     * @param {RequestOptions} options - options for request\n     * @return {void}\n     */\n    searchRequest(options: RequestOptions = {}): Promise<void> {\n        if (this.isDestroyed()) {\n            return Promise.reject();\n        }\n\n        const { fields } = options;\n        const requestFields = fields || FOLDER_FIELDS_TO_FETCH;\n\n        this.errorCode = ERROR_CODE_SEARCH;\n        return this.xhr\n            .get({\n                url: this.getUrl(),\n                params: {\n                    offset: this.offset,\n                    query: this.query,\n                    ancestor_folder_ids: this.id,\n                    limit: this.limit,\n                    fields: requestFields.toString(),\n                },\n                headers: requestFields.includes(FIELD_REPRESENTATIONS)\n                    ? {\n                          'X-Rep-Hints': X_REP_HINT_HEADER_DIMENSIONS_DEFAULT,\n                      }\n                    : {},\n            })\n            .then(this.searchSuccessHandler)\n            .catch(this.searchErrorHandler);\n    }\n\n    /**\n     * Gets search results\n     *\n     * @param {string} id - folder id\n     * @param {string} query - search string\n     * @param {number} limit - maximum number of items to retrieve\n     * @param {number} offset - starting index from which to retrieve items\n     * @param {Function} successCallback - Function to call with results\n     * @param {Function} errorCallback - Function to call with errors\n     * @param {boolean|void} [options.forceFetch] - Bypasses the cache\n     * @return {void}\n     */\n    search(\n        id: string,\n        query: string,\n        limit: number,\n        offset: number,\n        successCallback: Function,\n        errorCallback: ElementsErrorCallback,\n        options: Object = {},\n    ): void {\n        if (this.isDestroyed()) {\n            return;\n        }\n\n        // Save references\n        this.limit = limit;\n        this.offset = offset;\n        this.query = query;\n        this.id = id;\n        this.key = this.getCacheKey(id, this.getEncodedQuery(this.query));\n        this.successCallback = successCallback;\n        this.errorCallback = errorCallback;\n\n        // Clear the cache if needed\n        if (options.forceFetch) {\n            this.getCache().unset(this.key);\n        }\n\n        // Return the Cache value if it exists\n        if (this.isLoaded()) {\n            this.finish();\n            return;\n        }\n\n        // Make the XHR request\n        this.searchRequest(options);\n    }\n}\n\nexport default Search;\n"],"mappings":";;;;;AAAA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,OAAO,MAAM,kBAAkB;AACtC,SAASC,sBAAsB,QAAQ,iBAAiB;AACxD,SAASC,eAAe,QAAQ,gBAAgB;AAChD,OAAOC,IAAI,MAAM,QAAQ;AACzB,OAAOC,OAAO,MAAM,QAAQ;AAC5B,OAAOC,SAAS,MAAM,UAAU;AAChC,OAAOC,UAAU,MAAM,WAAW;AAClC,SACIC,mBAAmB,EACnBC,eAAe,EACfC,qBAAqB,EACrBC,oCAAoC,EACpCC,SAAS,EACTC,iBAAiB,QACd,cAAc;AAKrB,MAAMC,MAAM,SAASV,IAAI,CAAC;EAAAW,YAAA,GAAAC,IAAA;IAAA,SAAAA,IAAA;IAqHtB;AACJ;AACA;AACA;AACA;AACA;IALIC,eAAA,+BAMuB,CAAC;MAAEC;IAAkC,CAAC,KAAW;MACpE,IAAI,IAAI,CAACC,WAAW,CAAC,CAAC,EAAE;QACpB;MACJ;MAEA,MAAM;QAAEC,OAAO;QAAEC,WAAW;QAAEC,KAAK;QAAEC;MAA0B,CAAC,GAAGL,IAAI;MACvE,IACI,CAACM,KAAK,CAACC,OAAO,CAACL,OAAO,CAAC,IACvB,OAAOC,WAAW,KAAK,QAAQ,IAC/B,OAAOC,KAAK,KAAK,QAAQ,IACzB,OAAOC,MAAM,KAAK,QAAQ,EAC5B;QACE,MAAMpB,eAAe,CAAC,CAAC;MAC3B;MAEA,MAAMuB,SAAmB,GAAGzB,OAAO,CAC/BmB,OAAO,EACP,IAAId,SAAS,CAAC,IAAI,CAACqB,OAAO,CAAC,EAC3B,IAAItB,OAAO,CAAC,IAAI,CAACsB,OAAO,CAAC,EACzB,IAAIpB,UAAU,CAAC,IAAI,CAACoB,OAAO,CAC/B,CAAC;MACD,IAAI,CAACC,SAAS,GAAG,CAAC,IAAI,CAACA,SAAS,IAAI,EAAE,EAAEC,MAAM,CAACH,SAAS,CAAC;MAEzD,IAAI,CAACI,QAAQ,CAAC,CAAC,CAACC,GAAG,CAAC,IAAI,CAACC,GAAG,EAAE;QAC1BC,eAAe,EAAAC,aAAA,CAAAA,aAAA,KAAOhB,IAAI;UAAEE,OAAO,EAAE,IAAI,CAACQ;QAAS;MACvD,CAAC,CAAC;MAEF,IAAI,CAACO,MAAM,CAAC,CAAC;IACjB,CAAC;IAED;AACJ;AACA;AACA;AACA;AACA;IALIlB,eAAA,6BAMsBmB,KAAY,IAAW;MACzC,IAAI,IAAI,CAACjB,WAAW,CAAC,CAAC,EAAE;QACpB;MACJ;MAEA,IAAI,CAACkB,aAAa,CAACD,KAAK,EAAE,IAAI,CAACE,SAAS,CAAC;IAC7C,CAAC;EAAA;EApKD;AACJ;AACA;;EAGI;AACJ;AACA;;EAGI;AACJ;AACA;;EAGI;AACJ;AACA;;EAGI;AACJ;AACA;;EAGI;AACJ;AACA;;EAGI;AACJ;AACA;;EAGI;AACJ;AACA;;EAGI;AACJ;AACA;AACA;AACA;AACA;AACA;EACIC,eAAeA,CAACC,KAAa,EAAU;IACnC,OAAOC,kBAAkB,CAACD,KAAK,CAAC;EACpC;;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;EACIE,WAAWA,CAACC,EAAU,EAAEH,KAAa,EAAU;IAC3C,OAAO,GAAGhC,mBAAmB,GAAGmC,EAAE,IAAIH,KAAK,EAAE;EACjD;;EAEA;AACJ;AACA;AACA;AACA;AACA;EACII,MAAMA,CAAA,EAAW;IACb,OAAO,GAAG,IAAI,CAACC,aAAa,CAAC,CAAC,SAAS;EAC3C;;EAEA;AACJ;AACA;AACA;AACA;EACIC,QAAQA,CAAA,EAAY;IAChB,MAAMC,KAAe,GAAG,IAAI,CAACjB,QAAQ,CAAC,CAAC;IACvC,OAAOiB,KAAK,CAACC,GAAG,CAAC,IAAI,CAAChB,GAAG,CAAC;EAC9B;;EAEA;AACJ;AACA;AACA;AACA;EACIG,MAAMA,CAAA,EAAS;IACX,IAAI,IAAI,CAAChB,WAAW,CAAC,CAAC,EAAE;MACpB;IACJ;IAEA,MAAM4B,KAAe,GAAG,IAAI,CAACjB,QAAQ,CAAC,CAAC;IACvC,MAAMmB,MAAwB,GAAGF,KAAK,CAACG,GAAG,CAAC,IAAI,CAAClB,GAAG,CAAC;IACpD,MAAM;MAAEC;IAAkC,CAAC,GAAGgB,MAAM;IACpD,IAAI,CAAChB,eAAe,EAAE;MAClB,MAAM9B,eAAe,CAAC,CAAC;IAC3B;IAEA,MAAM;MAAEiB,OAAO;MAAEC;IAAwC,CAAC,GAAGY,eAAe;IAC5E,IAAI,CAACT,KAAK,CAACC,OAAO,CAACL,OAAO,CAAC,IAAI,OAAOC,WAAW,KAAK,QAAQ,EAAE;MAC5D,MAAMlB,eAAe,CAAC,CAAC;IAC3B;IAEA,MAAMgD,UAAsB,GAAG;MAC3BR,EAAE,EAAE,IAAI,CAACA,EAAE;MACXS,KAAK,EAAEhC,OAAO,CAACiC,GAAG,CAAErB,GAAW,IAAKe,KAAK,CAACG,GAAG,CAAClB,GAAG,CAAC,CAAC;MACnDT,MAAM,EAAE,IAAI,CAACA,MAAM;MACnB+B,aAAa,EAAE,GAAG;MAClBC,MAAM,EAAE9C,eAAe;MAAE;MACzB+C,aAAa,EAAE5C,SAAS;MAAE;MAC1B6C,UAAU,EAAEpC;IAChB,CAAC;IACD,IAAI,CAACqC,eAAe,CAACP,UAAU,CAAC;EACpC;EAoDA;AACJ;AACA;AACA;AACA;AACA;EACIQ,aAAaA,CAAChC,OAAuB,GAAG,CAAC,CAAC,EAAiB;IACvD,IAAI,IAAI,CAACR,WAAW,CAAC,CAAC,EAAE;MACpB,OAAOyC,OAAO,CAACC,MAAM,CAAC,CAAC;IAC3B;IAEA,MAAM;MAAEC;IAAO,CAAC,GAAGnC,OAAO;IAC1B,MAAMoC,aAAa,GAAGD,MAAM,IAAI5D,sBAAsB;IAEtD,IAAI,CAACoC,SAAS,GAAGzB,iBAAiB;IAClC,OAAO,IAAI,CAACmD,GAAG,CACVd,GAAG,CAAC;MACDe,GAAG,EAAE,IAAI,CAACrB,MAAM,CAAC,CAAC;MAClBsB,MAAM,EAAE;QACJ3C,MAAM,EAAE,IAAI,CAACA,MAAM;QACnBiB,KAAK,EAAE,IAAI,CAACA,KAAK;QACjB2B,mBAAmB,EAAE,IAAI,CAACxB,EAAE;QAC5BrB,KAAK,EAAE,IAAI,CAACA,KAAK;QACjBwC,MAAM,EAAEC,aAAa,CAACK,QAAQ,CAAC;MACnC,CAAC;MACDC,OAAO,EAAEN,aAAa,CAACO,QAAQ,CAAC5D,qBAAqB,CAAC,GAChD;QACI,aAAa,EAAEC;MACnB,CAAC,GACD,CAAC;IACX,CAAC,CAAC,CACD4D,IAAI,CAAC,IAAI,CAACC,oBAAoB,CAAC,CAC/BC,KAAK,CAAC,IAAI,CAACC,kBAAkB,CAAC;EACvC;;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIzB,MAAMA,CACFN,EAAU,EACVH,KAAa,EACblB,KAAa,EACbC,MAAc,EACdmC,eAAyB,EACzBrB,aAAoC,EACpCV,OAAe,GAAG,CAAC,CAAC,EAChB;IACJ,IAAI,IAAI,CAACR,WAAW,CAAC,CAAC,EAAE;MACpB;IACJ;;IAEA;IACA,IAAI,CAACG,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACC,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACiB,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACG,EAAE,GAAGA,EAAE;IACZ,IAAI,CAACX,GAAG,GAAG,IAAI,CAACU,WAAW,CAACC,EAAE,EAAE,IAAI,CAACJ,eAAe,CAAC,IAAI,CAACC,KAAK,CAAC,CAAC;IACjE,IAAI,CAACkB,eAAe,GAAGA,eAAe;IACtC,IAAI,CAACrB,aAAa,GAAGA,aAAa;;IAElC;IACA,IAAIV,OAAO,CAACgD,UAAU,EAAE;MACpB,IAAI,CAAC7C,QAAQ,CAAC,CAAC,CAAC8C,KAAK,CAAC,IAAI,CAAC5C,GAAG,CAAC;IACnC;;IAEA;IACA,IAAI,IAAI,CAACc,QAAQ,CAAC,CAAC,EAAE;MACjB,IAAI,CAACX,MAAM,CAAC,CAAC;MACb;IACJ;;IAEA;IACA,IAAI,CAACwB,aAAa,CAAChC,OAAO,CAAC;EAC/B;AACJ;AAEA,eAAeb,MAAM","ignoreList":[]}