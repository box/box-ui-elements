{"version":3,"file":"MetadataQuery.js","names":["Base","CACHE_PREFIX_METADATA_QUERY","ERROR_CODE_METADATA_QUERY","MetadataQuery","constructor","args","_defineProperty","data","cache","getCache","set","key","finish","getCacheKey","id","getUrl","getBaseApiUrl","isLoaded","has","isDestroyed","metadataQueryData","get","successCallback","queryMetadataRequest","query","errorCode","xhr","post","url","then","queryMetadataSuccessHandler","catch","errorHandler","queryMetadata","errorCallback","options","context","forceFetch","unset"],"sources":["../../src/api/MetadataQuery.js"],"sourcesContent":["/**\n * @flow\n * @file Helper for the box metadata query API\n * @author Box\n */\n\nimport Base from './Base';\nimport { CACHE_PREFIX_METADATA_QUERY, ERROR_CODE_METADATA_QUERY } from '../constants';\nimport type { ElementsErrorCallback } from '../common/types/api';\nimport type { MetadataQuery as MetadataQueryType, MetadataQueryResponseData } from '../common/types/metadataQueries';\nimport type APICache from '../utils/Cache';\n\nclass MetadataQuery extends Base {\n    /**\n     * @property {string}\n     */\n    key: string;\n\n    /**\n     * @property {Function}\n     */\n    successCallback: Function;\n\n    /**\n     * @property {Function}\n     */\n    errorCallback: ElementsErrorCallback;\n\n    /**\n     * Creates a key for the metadata cache\n     *\n     * @param {string} id - metadata template\n     * @return {string} key\n     */\n    getCacheKey(id: string): string {\n        return `${CACHE_PREFIX_METADATA_QUERY}${id}`;\n    }\n\n    /**\n     * API URL for metadata query\n     * @return {string} base url for files\n     */\n    getUrl(): string {\n        return `${this.getBaseApiUrl()}/metadata_queries/execute_read`;\n    }\n\n    /**\n     * Returns true for cache hit for metadata query results\n     *\n     * @return {boolean} if query results are loaded\n     */\n    isLoaded(): boolean {\n        const cache: APICache = this.getCache();\n        return cache.has(this.key);\n    }\n\n    /**\n     * Returns the results using successCallback\n     *\n     * @return {void}\n     */\n    finish(): void {\n        if (this.isDestroyed()) {\n            return;\n        }\n\n        const cache: APICache = this.getCache();\n        const metadataQueryData = cache.get(this.key);\n        this.successCallback(metadataQueryData);\n    }\n\n    /**\n     * @param {Object} response\n     */\n    queryMetadataSuccessHandler = ({ data }: { data: MetadataQueryResponseData }): void => {\n        const cache: APICache = this.getCache();\n        cache.set(this.key, data);\n        this.finish();\n    };\n\n    /**\n     * Does the network request to metadata query API\n     * @param {Object} query query object with SQL Clauses like properties\n     * @return {void}\n     */\n    queryMetadataRequest(query: MetadataQueryType): void {\n        if (this.isDestroyed()) {\n            return;\n        }\n\n        this.errorCode = ERROR_CODE_METADATA_QUERY;\n        this.xhr\n            .post({\n                url: this.getUrl(),\n                data: query,\n            })\n            .then(this.queryMetadataSuccessHandler)\n            .catch(this.errorHandler);\n    }\n\n    /**\n     * API for querying enterprise metadata\n     * @param {Object} query - metadata query object\n     * @param {Function} successCallback - Function to call with results\n     * @param {Function} errorCallback - Function to call with errors\n     * @param {boolean|void} [options.forceFetch] - Bypasses the cache\n     * @return {void}\n     */\n    queryMetadata(\n        query: MetadataQueryType,\n        successCallback: Function,\n        errorCallback: ElementsErrorCallback,\n        options: Object = {},\n    ): void {\n        if (this.isDestroyed()) {\n            return;\n        }\n\n        const { context = {} } = options;\n        this.key = this.getCacheKey(context.id);\n        this.successCallback = successCallback;\n        this.errorCallback = errorCallback;\n\n        // Clear the cache if needed\n        if (options.forceFetch) {\n            this.getCache().unset(this.key);\n        }\n\n        // Return the Cache value if it exists\n        if (this.isLoaded()) {\n            this.finish();\n            return;\n        }\n\n        // Make the XHR request\n        this.queryMetadataRequest(query);\n    }\n}\n\nexport default MetadataQuery;\n"],"mappings":"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","ignoreList":[]}