{"version":3,"file":"OffsetBasedAPI.js","names":["getTypedFileId","Base","DEFAULT_FETCH_START","DEFAULT_FETCH_END","OffsetBasedApi","getQueryParameters","offset","limit","fields","queryParams","length","toString","hasMoreItems","totalCount","undefined","offsetGetRequest","id","shouldFetchAll","isDestroyed","params","url","getUrl","data","xhr","get","entries","_objectSpread","concat","total_count","nextOffset","successHandler","error","errorHandler","offsetGet","successCallback","errorCallback"],"sources":["../../src/api/OffsetBasedAPI.js"],"sourcesContent":["/**\n * @flow\n * @file class for Box offset based API's to inherit common functionality from\n * @author Box\n */\nimport { getTypedFileId } from '../utils/file';\nimport Base from './Base';\nimport { DEFAULT_FETCH_START, DEFAULT_FETCH_END } from '../constants';\nimport type { ElementsErrorCallback } from '../common/types/api';\n\ntype Params = {\n    fields?: string,\n    limit: number,\n    offset: number,\n};\n\ntype Data = {\n    entries: Array<any>,\n    total_count: number,\n};\n\nclass OffsetBasedApi extends Base {\n    /**\n     * @property {Data}\n     */\n    data: Data;\n\n    /**\n     * Gets query params for the API\n     *\n     * @param {number} offset the offset from the start to start fetching at\n     * @param {number} limit the number of items to fetch\n     * @param {array} fields the fields to fetch\n     * @return the query params object\n     */\n    getQueryParameters(offset: number, limit: number, fields?: Array<string>): Object {\n        const queryParams: Params = {\n            offset,\n            limit,\n        };\n\n        if (fields && fields.length > 0) {\n            queryParams.fields = fields.toString();\n        }\n\n        return queryParams;\n    }\n\n    /**\n     * Determines if the API has more items to fetch\n     *\n     * @param {number} offset the offset from the start to start fetching at\n     * @param {number} totalCount the total number of items\n     * @return {boolean} true if there are more items\n     */\n    hasMoreItems(offset: number, totalCount?: number): boolean {\n        return totalCount === undefined || offset < totalCount;\n    }\n\n    /**\n     * Helper for get\n     *\n     * @param {string} id the file id\n     * @param {number} offset the offset from the start to start fetching at\n     * @param {number} limit the number of items to fetch\n     * @param {array} fields the fields to fetch\n     * @param {boolean} shouldFetchAll true if should get all the pages before calling the sucessCallback\n     * @private\n     */\n    async offsetGetRequest(\n        id: string,\n        offset: number,\n        limit: number,\n        shouldFetchAll: boolean,\n        fields?: Array<string>,\n    ): Promise<void> {\n        if (this.isDestroyed()) {\n            return;\n        }\n\n        // Make the XHR request\n        try {\n            const params = this.getQueryParameters(offset, limit, fields);\n            const url = this.getUrl(id);\n\n            const { data }: { data: Data } = await this.xhr.get({\n                url,\n                id: getTypedFileId(id),\n                params,\n            });\n\n            const entries = this.data ? this.data.entries : [];\n            this.data = {\n                ...data,\n                entries: entries.concat(data.entries),\n            };\n            const totalCount = data.total_count;\n            const nextOffset = offset + limit;\n            if (shouldFetchAll && this.hasMoreItems(nextOffset, totalCount)) {\n                this.offsetGetRequest(id, nextOffset, limit, shouldFetchAll, fields);\n                return;\n            }\n\n            this.successHandler(this.data);\n        } catch (error) {\n            this.errorHandler(error);\n        }\n    }\n\n    /**\n     * Offset based API get\n     *\n     * @param {string} id the file id\n     * @param {Function} successCallback the success callback\n     * @param {Function} errorCallback the error callback\n     * @param {number} offset the offset from the start to start fetching at\n     * @param {number} limit the number of items to fetch\n     * @param {array} fields the fields to fetch\n     * @param {boolean} shouldFetchAll true if should get all the pages before calling the sucessCallback\n     */\n    async offsetGet(\n        id: string,\n        successCallback: Function,\n        errorCallback: ElementsErrorCallback,\n        offset: number = DEFAULT_FETCH_START,\n        limit: number = DEFAULT_FETCH_END,\n        fields?: Array<string>,\n        shouldFetchAll: boolean = true,\n    ): Promise<void> {\n        this.successCallback = successCallback;\n        this.errorCallback = errorCallback;\n\n        return this.offsetGetRequest(id, offset, limit, shouldFetchAll, fields);\n    }\n}\n\nexport default OffsetBasedApi;\n"],"mappings":"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","ignoreList":[]}