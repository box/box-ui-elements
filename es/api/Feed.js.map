{"version":3,"file":"Feed.js","names":["noop","uniqueId","getBadItemError","getBadUserError","getMissingItemTextOrStatus","isUserCorrectableError","commonMessages","messages","sortFeedItems","FEED_FILE_VERSIONS_FIELDS_TO_FETCH","Base","AnnotationsAPI","CommentsAPI","ThreadedCommentsAPI","FileActivitiesAPI","VersionsAPI","TasksNewAPI","GroupsAPI","TaskCollaboratorsAPI","TaskLinksAPI","AppActivityAPI","ACTION_TYPE_CREATED","ACTION_TYPE_RESTORED","ACTION_TYPE_PROMOTED","ACTION_TYPE_TRASHED","ERROR_CODE_CREATE_TASK","ERROR_CODE_UPDATE_TASK","ERROR_CODE_GROUP_EXCEEDS_LIMIT","FEED_ITEM_TYPE_ANNOTATION","FEED_ITEM_TYPE_COMMENT","FEED_ITEM_TYPE_TASK","FEED_ITEM_TYPE_VERSION","FILE_ACTIVITY_TYPE_ANNOTATION","FILE_ACTIVITY_TYPE_APP_ACTIVITY","FILE_ACTIVITY_TYPE_COMMENT","FILE_ACTIVITY_TYPE_TASK","FILE_ACTIVITY_TYPE_VERSION","HTTP_STATUS_CODE_CONFLICT","IS_ERROR_DISPLAYED","PERMISSION_CAN_VIEW_ANNOTATIONS","PERMISSION_CAN_COMMENT","TASK_NEW_APPROVED","TASK_NEW_COMPLETED","TASK_NEW_REJECTED","TASK_NEW_NOT_STARTED","TYPED_ID_FEED_PREFIX","TASK_MAX_GROUP_ASSIGNEES","collapseFeedState","TASK_NEW_INITIAL_STATUS","getItemWithFilteredReplies","item","replyId","replies","rest","_objectWithoutProperties","_excluded","_objectSpread","filter","id","getItemWithPendingReply","reply","_excluded2","parseReplies","parsedReplies","map","tagged_message","message","getParsedFileActivitiesResponse","response","permissions","entries","length","data","parsedData","source","activity_type","taskItem","assigned_to","assignedToEntries","entry","assignedToEntry","role","toUpperCase","status","completion_rule","task_type","created_by","target","commentItem","annotationItem","appActivityItem","can_delete","created_at","occurred_at","versionsItem","type","action_by","collaborators","collaborator","end","number","version_end","start","version_start","version_number","uploader_display_name","action_type","modified_at","modified_by","trashed_at","trashed_by","restored_at","restored_by","promoted_from","promoted_by","version_promoted","reverse","Feed","constructor","options","_defineProperty","file","annotationId","text","successCallback","errorCallback","annotationsAPI","feedItemChanges","updateFeedItem","isPending","updateAnnotation","annotation","total_reply_count","annotationBase","_excluded3","isDestroyed","e","code","updateCommentErrorCallback","createFeedError","commentUpdateErrorMessage","feedErrorCallback","error","parentId","updateReplyItem","repliesFetchErrorMessage","successCallBack","deleteAnnotation","deleteFeedItem","bind","deleteCommentErrorCallback","resolve","comment","taskId","taskCollaboratorId","taskCollaboratorStatus","collaboratorsApi","taskCollaboratorsAPI","push","taskCollaboratorPayload","handleError","errorMessage","taskApproveErrorMessage","taskCompleteErrorMessage","taskRejectErrorMessage","taskActionErrorTitle","updateTaskCollaborator","taskCollaborator","taskCollab","updateTaskCollaboratorSuccessCallback","updatedCollaborator","tasksNewAPI","getTask","task","groupInfoPromises","addedAssignees","assignee","groupId","getGroupCount","group","groupCounts","Promise","all","hasAnyGroupCountExceeded","some","groupInfo","total_count","warning","reject","updateTaskWithDeps","taskData","commentId","commentsAPI","deleteComment","threadedCommentsAPI","fileId","deleteReplySuccessCallback","deleteReplyErrorCallback","modifyFeedItemRepliesCountBy","deleteReplyItem","commentDeleteErrorMessage","currentUser","assignees","taskType","dueAt","completionRule","uuid","dueAtString","dueAtDate","Date","toISOString","pendingTask","due_at","description","avatar_url","can_update","limit","next_marker","can_create_task_collaborator","can_create_task_link","task_links","taskPayload","then","createTaskWithDeps","taskWithDepsData","addPendingItem","catch","deleteTask","taskDeleteErrorMessage","cachedItems","getCachedItems","feedItems","items","feedItem","setCachedItems","errors","hasError","console","itemBase","date","pendingFeedItem","feedItemsWithPendingItem","commentBase","pendingReply","updatedFeedItems","commentData","commentCreateConflictMessage","commentCreateErrorMessage","updates","replyUpdates","getItemWithUpdatedReply","updatedItem","hasMention","taggedMessage","createComment","createCommentSuccessCallback","createCommentErrorCallback","updateComment","_excluded4","undefined","updateReplyErrorCallback","n","find","itemId","newReplyCount","appActivityId","appActivityAPI","deleteAppActivity","deleteAppActivityErrorCallback","appActivityDeleteErrorMessage","taskLinksAPI","addAnnotation","newAnnotation","getCacheKey","cache","getCache","cacheKey","get","set","shouldRefreshCache","onError","shouldShowAnnotations","shouldShowAppActivity","shouldShowReplies","shouldShowTasks","shouldShowVersions","shouldUseUAA","logAPIParity","annotationsPromise","fetchAnnotations","commentsPromise","fetchThreadedComments","fetchComments","tasksPromise","fetchTasksNew","appActivityPromise","fetchAppActivity","versionsPromise","fetchVersions","currentVersionPromise","fetchCurrentVersion","annotationActivityType","appActivityActivityType","taskActivityType","versionsActivityType","commentActivityType","filteredActivityTypes","fileActivitiesPromise","fetchFileActivities","handleFeedItems","v2Promises","fetchV2FeedItems","promises","versions","currentVersion","versionsWithCurrent","versionsAPI","addCurrentVersion","compareV2AndUaaFeedItems","uaaFeedItems","uaaResponse","v2FeedItems","transformedV2FeedItems","transformedUAAFeedItems","shouldFetchReplies","getAnnotations","fetchFeedItemErrorCallback","getComments","fetchThreadedComment","getComment","fetchThreadedCommentSuccessCallback","activityTypes","fileActivitiesAPI","getActivities","fileID","fetchReplies","commentFeedItemId","commentFeedItemType","isRepliesLoading","successCallbackFn","errorCallbackFn","fetchRepliesErrorCallback","getAnnotationReplies","getCommentReplies","getVersions","file_version","getVersion","getTasksForFile","err","shouldDisplayError","createTaskCollaboratorsforGroup","createTaskCollaborator","user","deleteTaskCollaborator","createTaskLink","title","errorOccured","createReply","parentType","addPendingReply","createReplySuccessCallback","createReplyErrorCallback","createAnnotationReply","createCommentReply","destroyTaskCollaborators","Array","isArray","forEach","api","destroy","destroyTaskLinks","getAppActivity"],"sources":["../../src/api/Feed.js"],"sourcesContent":["/**\n * @flow\n * @file Helper for activity feed API's\n * @author Box\n */\nimport noop from 'lodash/noop';\nimport uniqueId from 'lodash/uniqueId';\nimport type { MessageDescriptor } from 'react-intl';\nimport { getBadItemError, getBadUserError, getMissingItemTextOrStatus, isUserCorrectableError } from '../utils/error';\nimport commonMessages from '../elements/common/messages';\nimport messages from './messages';\nimport { sortFeedItems } from '../utils/sorter';\nimport { FEED_FILE_VERSIONS_FIELDS_TO_FETCH } from '../utils/fields';\nimport Base from './Base';\nimport AnnotationsAPI from './Annotations';\nimport CommentsAPI from './Comments';\nimport ThreadedCommentsAPI from './ThreadedComments';\nimport FileActivitiesAPI from './FileActivities';\nimport VersionsAPI from './Versions';\nimport TasksNewAPI from './tasks/TasksNew';\nimport GroupsAPI from './Groups';\nimport TaskCollaboratorsAPI from './tasks/TaskCollaborators';\nimport TaskLinksAPI from './tasks/TaskLinks';\nimport AppActivityAPI from './AppActivity';\nimport {\n    ACTION_TYPE_CREATED,\n    ACTION_TYPE_RESTORED,\n    ACTION_TYPE_PROMOTED,\n    ACTION_TYPE_TRASHED,\n    ERROR_CODE_CREATE_TASK,\n    ERROR_CODE_UPDATE_TASK,\n    ERROR_CODE_GROUP_EXCEEDS_LIMIT,\n    FEED_ITEM_TYPE_ANNOTATION,\n    FEED_ITEM_TYPE_COMMENT,\n    FEED_ITEM_TYPE_TASK,\n    FEED_ITEM_TYPE_VERSION,\n    FILE_ACTIVITY_TYPE_ANNOTATION,\n    FILE_ACTIVITY_TYPE_APP_ACTIVITY,\n    FILE_ACTIVITY_TYPE_COMMENT,\n    FILE_ACTIVITY_TYPE_TASK,\n    FILE_ACTIVITY_TYPE_VERSION,\n    HTTP_STATUS_CODE_CONFLICT,\n    IS_ERROR_DISPLAYED,\n    PERMISSION_CAN_VIEW_ANNOTATIONS,\n    PERMISSION_CAN_COMMENT,\n    TASK_NEW_APPROVED,\n    TASK_NEW_COMPLETED,\n    TASK_NEW_REJECTED,\n    TASK_NEW_NOT_STARTED,\n    TYPED_ID_FEED_PREFIX,\n    TASK_MAX_GROUP_ASSIGNEES,\n} from '../constants';\nimport type {\n    TaskCompletionRule,\n    TaskCollabAssignee,\n    TaskCollabStatus,\n    TaskLink,\n    TaskNew,\n    TaskType,\n    TaskPayload,\n    TaskUpdatePayload,\n} from '../common/types/tasks';\nimport type { ElementsXhrError, ErrorResponseData, APIOptions } from '../common/types/api';\nimport type {\n    SelectorItems,\n    SelectorItem,\n    UserMini,\n    GroupMini,\n    BoxItem,\n    BoxItemPermission,\n    BoxItemVersion,\n    FileVersions,\n    User,\n} from '../common/types/core';\nimport type {\n    Annotation,\n    AnnotationPermission,\n    Annotations,\n    AppActivityItems,\n    BoxCommentPermission,\n    Comment,\n    CommentFeedItemType,\n    Comments,\n    FeedItem,\n    FeedItems,\n    FeedItemStatus,\n    FileActivity,\n    FileActivityTypes,\n    Task,\n    Tasks,\n    ThreadedComments as ThreadedCommentsType,\n} from '../common/types/feed';\nimport { collapseFeedState } from '../elements/content-sidebar/activity-feed/activity-feed/activityFeedUtils';\n\nconst TASK_NEW_INITIAL_STATUS = TASK_NEW_NOT_STARTED;\n\ntype FeedItemsCache = {\n    errors: ErrorResponseData[],\n    items: FeedItems,\n};\n\ntype ErrorCallback = (e: ElementsXhrError, code: string, contextInfo?: Object) => void;\n\nconst getItemWithFilteredReplies = <T: { replies?: Array<Comment> }>(item: T, replyId: string): T => {\n    const { replies = [], ...rest } = item;\n    return { replies: replies.filter(({ id }) => id !== replyId), ...rest };\n};\n\nconst getItemWithPendingReply = <T: { replies?: Array<Comment> }>(item: T, reply: Comment): T => {\n    const { replies = [], ...rest } = item;\n    return { replies: [...replies, reply], ...rest };\n};\n\nconst parseReplies = (replies: Comment[]): Comment[] => {\n    const parsedReplies = [...replies];\n\n    return parsedReplies.map(reply => {\n        return { ...reply, tagged_message: reply.tagged_message || reply.message || '' };\n    });\n};\n\nexport const getParsedFileActivitiesResponse = (\n    response?: { entries: FileActivity[] },\n    permissions: BoxItemPermission = {},\n) => {\n    if (!response || !response.entries || !response.entries.length) {\n        return [];\n    }\n\n    const data = response.entries;\n\n    const parsedData: Array<Object> = data\n        .map(item => {\n            if (!item.source) {\n                return null;\n            }\n\n            const source = { ...item.source };\n\n            switch (item.activity_type) {\n                case FILE_ACTIVITY_TYPE_TASK: {\n                    const taskItem = { ...source[FILE_ACTIVITY_TYPE_TASK] };\n                    // UAA follows a lowercased enum naming convention, convert to uppercase to align with task api\n                    if (taskItem.assigned_to?.entries) {\n                        const assignedToEntries = taskItem.assigned_to.entries.map(entry => {\n                            const assignedToEntry = { ...entry };\n\n                            assignedToEntry.role = entry.role.toUpperCase();\n                            assignedToEntry.status = entry.status.toUpperCase();\n\n                            return assignedToEntry;\n                        });\n                        // $FlowFixMe Using the toUpperCase method makes Flow assume role and status is a string type, which is incompatible with string literal\n                        taskItem.assigned_to.entries = assignedToEntries;\n                    }\n                    if (taskItem.completion_rule) {\n                        taskItem.completion_rule = taskItem.completion_rule.toUpperCase();\n                    }\n                    if (taskItem.status) {\n                        taskItem.status = taskItem.status.toUpperCase();\n                    }\n                    if (taskItem.task_type) {\n                        taskItem.task_type = taskItem.task_type.toUpperCase();\n                    }\n                    // $FlowFixMe File Activities only returns a created_by user, Flow type fix is needed\n                    taskItem.created_by = { target: taskItem.created_by };\n\n                    return taskItem;\n                }\n                case FILE_ACTIVITY_TYPE_COMMENT: {\n                    const commentItem = { ...source[FILE_ACTIVITY_TYPE_COMMENT] };\n\n                    if (commentItem.replies && commentItem.replies.length) {\n                        const replies = parseReplies(commentItem.replies);\n\n                        commentItem.replies = replies;\n                    }\n\n                    commentItem.tagged_message = commentItem.tagged_message || commentItem.message || '';\n\n                    return commentItem;\n                }\n                case FILE_ACTIVITY_TYPE_ANNOTATION: {\n                    const annotationItem = { ...source[FILE_ACTIVITY_TYPE_ANNOTATION] };\n\n                    if (annotationItem.replies && annotationItem.replies.length) {\n                        const replies = parseReplies(annotationItem.replies);\n\n                        annotationItem.replies = replies;\n                    }\n\n                    return annotationItem;\n                }\n                case FILE_ACTIVITY_TYPE_APP_ACTIVITY: {\n                    const appActivityItem = { ...source[FILE_ACTIVITY_TYPE_APP_ACTIVITY] };\n                    const { can_delete } = permissions;\n\n                    appActivityItem.created_at = appActivityItem.occurred_at;\n                    appActivityItem.permissions = { can_delete };\n\n                    return appActivityItem;\n                }\n\n                case FILE_ACTIVITY_TYPE_VERSION: {\n                    const versionsItem = { ...source[FILE_ACTIVITY_TYPE_VERSION] };\n\n                    versionsItem.type = FEED_ITEM_TYPE_VERSION;\n                    if (versionsItem.action_by) {\n                        const collaborators = {};\n\n                        versionsItem.action_by.map(collaborator => {\n                            collaborators[collaborator.id] = { ...collaborator };\n                            return collaborator;\n                        });\n\n                        versionsItem.collaborators = collaborators;\n                    }\n                    if (versionsItem.end?.number) {\n                        versionsItem.version_end = versionsItem.end.number;\n                        versionsItem.id = versionsItem.end.id;\n                    }\n                    if (versionsItem.start?.number) {\n                        versionsItem.version_start = versionsItem.start.number;\n                    }\n\n                    if (versionsItem.version_start === versionsItem.version_end) {\n                        versionsItem.version_number = versionsItem.version_start;\n                        versionsItem.uploader_display_name = versionsItem.start?.uploader_display_name;\n\n                        if (\n                            versionsItem.action_type === ACTION_TYPE_CREATED &&\n                            versionsItem.start?.created_at &&\n                            versionsItem.start?.created_by\n                        ) {\n                            versionsItem.modified_at = versionsItem.start.created_at;\n                            versionsItem.modified_by = { ...versionsItem.start.created_by };\n                        }\n                        if (\n                            versionsItem.action_type === ACTION_TYPE_TRASHED &&\n                            versionsItem.start?.trashed_at &&\n                            versionsItem.start?.trashed_by\n                        ) {\n                            versionsItem.trashed_at = versionsItem.start.trashed_at;\n                            versionsItem.trashed_by = { ...versionsItem.start.trashed_by };\n                        }\n                        if (\n                            versionsItem.action_type === ACTION_TYPE_RESTORED &&\n                            versionsItem.start?.restored_at &&\n                            versionsItem.start?.restored_by\n                        ) {\n                            versionsItem.restored_at = versionsItem.start.restored_at;\n                            versionsItem.restored_by = { ...versionsItem.start.restored_by };\n                        }\n                        if (\n                            versionsItem.action_type === ACTION_TYPE_PROMOTED &&\n                            versionsItem.start?.promoted_from &&\n                            versionsItem.start?.promoted_by\n                        ) {\n                            versionsItem.version_promoted = versionsItem.start?.promoted_from;\n                            versionsItem.promoted_by = { ...versionsItem.start?.promoted_by };\n                        }\n                    }\n\n                    return versionsItem;\n                }\n\n                default: {\n                    return null;\n                }\n            }\n        })\n        .filter(item => !!item)\n        .reverse();\n\n    return parsedData;\n};\n\nclass Feed extends Base {\n    /**\n     * @property {AnnotationsAPI}\n     */\n    annotationsAPI: AnnotationsAPI;\n\n    /**\n     * @property {VersionsAPI}\n     */\n    versionsAPI: VersionsAPI;\n\n    /**\n     * @property {CommentsAPI}\n     */\n    commentsAPI: CommentsAPI;\n\n    /**\n     * @property {AppActivityAPI}\n     */\n    appActivityAPI: AppActivityAPI;\n\n    /**\n     * @property {TasksNewAPI}\n     */\n    tasksNewAPI: TasksNewAPI;\n\n    /**\n     * @property {TaskCollaboratorsAPI}\n     */\n    taskCollaboratorsAPI: TaskCollaboratorsAPI[];\n\n    /**\n     * @property {TaskLinksAPI}\n     */\n    taskLinksAPI: TaskLinksAPI[];\n\n    /**\n     * @property {ThreadedCommentsAPI}\n     */\n    threadedCommentsAPI: ThreadedCommentsAPI;\n\n    /**\n     * @property {FileActivitiesAPI}\n     */\n    fileActivitiesAPI: FileActivitiesAPI;\n\n    /**\n     * @property {BoxItem}\n     */\n    file: BoxItem;\n\n    /**\n     * @property {ElementsXhrError}\n     */\n    errors: ElementsXhrError[];\n\n    constructor(options: APIOptions) {\n        super(options);\n        this.taskCollaboratorsAPI = [];\n        this.taskLinksAPI = [];\n        this.errors = [];\n    }\n\n    /**\n     * Creates pending card on create_start action, then updates card on next call\n     * @param {BoxItem} file - The file to which the annotation is assigned\n     * @param {Object} currentUser - the user who performed the action\n     * @param {Annotation} annotation - the current annotation to be created\n     * @param {string} id - unique id for the incoming annotation\n     * @param {boolean} isPending - indicates the current creation process of the annotation\n     */\n    addAnnotation(file: BoxItem, currentUser: User, annotation: Annotation, id: string, isPending: boolean): void {\n        if (!file.id) {\n            throw getBadItemError();\n        }\n\n        this.file = file;\n\n        // Add the pending interstitial card\n        if (isPending) {\n            const newAnnotation = {\n                ...annotation,\n                created_by: currentUser,\n                id,\n                type: FEED_ITEM_TYPE_ANNOTATION,\n            };\n\n            this.addPendingItem(this.file.id, currentUser, newAnnotation);\n\n            return;\n        }\n        // Create action has completed, so update the existing pending item\n        this.updateFeedItem({ ...annotation, isPending: false }, id);\n    }\n\n    updateAnnotation = (\n        file: BoxItem,\n        annotationId: string,\n        text?: string,\n        status?: FeedItemStatus,\n        permissions: AnnotationPermission,\n        successCallback: (annotation: Annotation) => void,\n        errorCallback: ErrorCallback,\n    ): void => {\n        if (!file.id) {\n            throw getBadItemError();\n        }\n        if (!text && !status) {\n            throw getMissingItemTextOrStatus();\n        }\n\n        this.annotationsAPI = new AnnotationsAPI(this.options);\n\n        this.file = file;\n        this.errorCallback = errorCallback;\n\n        const feedItemChanges = {};\n        if (text) {\n            feedItemChanges.message = text;\n        }\n        if (status) {\n            feedItemChanges.status = status;\n        }\n        this.updateFeedItem({ ...feedItemChanges, isPending: true }, annotationId);\n\n        this.annotationsAPI.updateAnnotation(\n            this.file.id,\n            annotationId,\n            permissions,\n            feedItemChanges,\n            (annotation: Annotation) => {\n                const { replies, total_reply_count, ...annotationBase } = annotation;\n                this.updateFeedItem(\n                    {\n                        // Do not update replies and total_reply_count props as their current values are not included in the response\n                        ...annotationBase,\n                        isPending: false,\n                    },\n                    annotationId,\n                );\n                if (!this.isDestroyed()) {\n                    successCallback(annotation);\n                }\n            },\n            (e: ErrorResponseData, code: string) => {\n                this.updateCommentErrorCallback(e, code, annotationId);\n            },\n        );\n    };\n\n    /**\n     * Error callback for updating a comment\n     *\n     * @param {ElementsXhrError} e - the error returned by the API\n     * @param {string} code - the error code\n     * @param {string} id - the id of either an annotation or comment\n     * @return {void}\n     */\n    updateCommentErrorCallback = (e: ElementsXhrError, code: string, id: string) => {\n        this.updateFeedItem(this.createFeedError(messages.commentUpdateErrorMessage), id);\n        this.feedErrorCallback(true, e, code);\n    };\n\n    /**\n     * Error callback for updating a reply\n     *\n     * @param {ElementsXhrError} error - the error returned by the API\n     * @param {string} code - the error code\n     * @param {string} id - the id of the reply (comment)\n     * @param {string} parentId - the id of either the parent item (an annotation or comment)\n     * @return {void}\n     */\n    updateReplyErrorCallback = (error: ElementsXhrError, code: string, id: string, parentId: string) => {\n        this.updateReplyItem(this.createFeedError(messages.commentUpdateErrorMessage), parentId, id);\n        this.feedErrorCallback(true, error, code);\n    };\n\n    /**\n     * Error callback for fetching replies\n     *\n     * @param {ElementsXhrError} error - the error returned by the API\n     * @param {string} code - the error code\n     * @param {string} id - the id of either an annotation or comment\n     * @return {void}\n     */\n    fetchRepliesErrorCallback = (error: ElementsXhrError, code: string, id: string) => {\n        this.updateFeedItem(this.createFeedError(messages.repliesFetchErrorMessage), id);\n        this.feedErrorCallback(true, error, code);\n    };\n\n    deleteAnnotation = (\n        file: BoxItem,\n        annotationId: string,\n        permissions: AnnotationPermission,\n        successCallBack: Function,\n        errorCallback: Function,\n    ): void => {\n        this.annotationsAPI = new AnnotationsAPI(this.options);\n\n        if (!file.id) {\n            throw getBadItemError();\n        }\n\n        this.file = file;\n        this.errorCallback = errorCallback;\n\n        this.updateFeedItem({ isPending: true }, annotationId);\n        this.annotationsAPI.deleteAnnotation(\n            this.file.id,\n            annotationId,\n            permissions,\n            this.deleteFeedItem.bind(this, annotationId, successCallBack),\n            (error: ElementsXhrError, code: string) => {\n                // Reusing comment error handler since annotations are treated as comments to user\n                this.deleteCommentErrorCallback(error, code, annotationId);\n            },\n        );\n    };\n\n    /**\n     * Creates a key for the cache\n     *\n     * @param {string} id folder id\n     * @return {string} key\n     */\n    getCacheKey(id: string): string {\n        return `${TYPED_ID_FEED_PREFIX}${id}`;\n    }\n\n    /**\n     * Gets the items from the cache\n     *\n     * @param {string} id the cache id\n     */\n    getCachedItems(id: string): ?FeedItemsCache {\n        const cache = this.getCache();\n        const cacheKey = this.getCacheKey(id);\n        return cache.get(cacheKey);\n    }\n\n    /**\n     * Sets the items in the cache\n     *\n     * @param {string} id - the cache id\n     * @param {Array} items - the feed items to cache\n     */\n    setCachedItems(id: string, items: FeedItems) {\n        const cache = this.getCache();\n        const cacheKey = this.getCacheKey(id);\n        cache.set(cacheKey, {\n            errors: this.errors,\n            items,\n        });\n    }\n\n    /**\n     * Gets the feed items\n     *\n     * @param {BoxItem} file - The file to which the task is assigned\n     * @param {boolean} shouldRefreshCache - Optionally updates the cache\n     * @param {Function} successCallback - the success callback  which is called after data fetching is complete\n     * @param {Function} errorCallback - the error callback which is called after data fetching is complete if there was an error\n     * @param {Function} onError - the function to be called immediately after an error occurs\n     * @param {Object} [options]- feature flips, etc\n     * @param {Object} [options.shouldShowAppActivity] - feature flip the new app activity api\n     */\n    feedItems(\n        file: BoxItem,\n        shouldRefreshCache: boolean,\n        successCallback: Function,\n        errorCallback: (feedItems: FeedItems, errors: ElementsXhrError[]) => void,\n        onError: ErrorCallback,\n        {\n            shouldShowAnnotations = false,\n            shouldShowAppActivity = false,\n            shouldShowReplies = false,\n            shouldShowTasks = true,\n            shouldShowVersions = true,\n            shouldUseUAA = false,\n        }: {\n            shouldShowAnnotations?: boolean,\n            shouldShowAppActivity?: boolean,\n            shouldShowReplies?: boolean,\n            shouldShowTasks?: boolean,\n            shouldShowVersions?: boolean,\n            shouldUseUAA?: boolean,\n        } = {},\n        logAPIParity?: Function,\n    ): void {\n        const { id, permissions = {} } = file;\n        const cachedItems = this.getCachedItems(id);\n        if (cachedItems) {\n            const { errors, items } = cachedItems;\n            if (errors.length) {\n                errorCallback(items, errors);\n            } else {\n                successCallback(items);\n            }\n\n            if (!shouldRefreshCache) {\n                return;\n            }\n        }\n\n        this.file = file;\n        this.errors = [];\n        this.errorCallback = onError;\n\n        // Using the UAA File Activities endpoint replaces the need for these calls\n        const annotationsPromise = shouldShowAnnotations\n            ? this.fetchAnnotations(permissions, shouldShowReplies)\n            : Promise.resolve();\n        const commentsPromise = () => {\n            return shouldShowReplies ? this.fetchThreadedComments(permissions) : this.fetchComments(permissions);\n        };\n        const tasksPromise = shouldShowTasks ? this.fetchTasksNew() : Promise.resolve();\n        const appActivityPromise = shouldShowAppActivity ? this.fetchAppActivity(permissions) : Promise.resolve();\n        const versionsPromise = shouldShowVersions ? this.fetchVersions() : Promise.resolve();\n        const currentVersionPromise = shouldShowVersions ? this.fetchCurrentVersion() : Promise.resolve();\n\n        const annotationActivityType =\n            shouldShowAnnotations && permissions[PERMISSION_CAN_VIEW_ANNOTATIONS]\n                ? [FILE_ACTIVITY_TYPE_ANNOTATION]\n                : [];\n        const appActivityActivityType = shouldShowAppActivity ? [FILE_ACTIVITY_TYPE_APP_ACTIVITY] : [];\n        const taskActivityType = shouldShowTasks ? [FILE_ACTIVITY_TYPE_TASK] : [];\n        const versionsActivityType = shouldShowVersions ? [FILE_ACTIVITY_TYPE_VERSION] : [];\n        const commentActivityType = permissions[PERMISSION_CAN_COMMENT] ? [FILE_ACTIVITY_TYPE_COMMENT] : [];\n        const filteredActivityTypes = [\n            ...annotationActivityType,\n            ...appActivityActivityType,\n            ...commentActivityType,\n            ...taskActivityType,\n            ...versionsActivityType,\n        ];\n\n        const fileActivitiesPromise =\n            // Only fetch when activity types are explicitly stated\n            shouldUseUAA && filteredActivityTypes.length\n                ? this.fetchFileActivities(permissions, filteredActivityTypes, shouldShowReplies)\n                : Promise.resolve();\n\n        const handleFeedItems = (feedItems: FeedItems) => {\n            if (!this.isDestroyed()) {\n                this.setCachedItems(id, feedItems);\n                if (this.errors.length) {\n                    errorCallback(feedItems, this.errors);\n                } else {\n                    successCallback(feedItems);\n                }\n            }\n        };\n\n        const v2Promises = [\n            versionsPromise,\n            currentVersionPromise,\n            commentsPromise(),\n            tasksPromise,\n            appActivityPromise,\n            annotationsPromise,\n        ];\n\n        const fetchV2FeedItems = async promises => {\n            return Promise.all(promises).then(\n                ([versions: ?FileVersions, currentVersion: ?BoxItemVersion, ...feedItems]) => {\n                    const versionsWithCurrent = currentVersion\n                        ? this.versionsAPI.addCurrentVersion(currentVersion, versions, this.file)\n                        : undefined;\n                    return sortFeedItems(versionsWithCurrent, ...feedItems);\n                },\n            );\n        };\n\n        const compareV2AndUaaFeedItems = async (uaaFeedItems, uaaResponse) => {\n            fetchV2FeedItems(v2Promises).then(v2FeedItems => {\n                const transformedV2FeedItems = collapseFeedState(v2FeedItems);\n                const transformedUAAFeedItems = collapseFeedState(uaaFeedItems);\n\n                if (logAPIParity) {\n                    logAPIParity({\n                        uaaResponse,\n                        uaaFeedItems: transformedUAAFeedItems,\n                        v2FeedItems: transformedV2FeedItems,\n                    });\n                }\n            });\n        };\n\n        if (shouldUseUAA) {\n            fileActivitiesPromise.then(response => {\n                const uaaFeedItems = getParsedFileActivitiesResponse(response, permissions);\n                compareV2AndUaaFeedItems(uaaFeedItems, response);\n                handleFeedItems(uaaFeedItems);\n            });\n        } else {\n            fetchV2FeedItems(v2Promises).then(v2FeedItems => {\n                handleFeedItems(v2FeedItems);\n            });\n        }\n    }\n\n    fetchAnnotations(permissions: BoxItemPermission, shouldFetchReplies?: boolean): Promise<?Annotations> {\n        this.annotationsAPI = new AnnotationsAPI(this.options);\n        return new Promise(resolve => {\n            this.annotationsAPI.getAnnotations(\n                this.file.id,\n                undefined,\n                permissions,\n                resolve,\n                this.fetchFeedItemErrorCallback.bind(this, resolve),\n                undefined,\n                undefined,\n                shouldFetchReplies,\n            );\n        });\n    }\n\n    /**\n     * Fetches the comments for a file\n     *\n     * @param {Object} permissions - the file permissions\n     * @return {Promise} - the file comments\n     */\n    fetchComments(permissions: BoxItemPermission): Promise<?Comments> {\n        this.commentsAPI = new CommentsAPI(this.options);\n        return new Promise(resolve => {\n            this.commentsAPI.getComments(\n                this.file.id,\n                permissions,\n                resolve,\n                this.fetchFeedItemErrorCallback.bind(this, resolve),\n            );\n        });\n    }\n\n    /**\n     * Fetches a comment for a file\n     *\n     * @param {BoxItem} file - The file to which the comment belongs to\n     * @param {string} commentId - comment id\n     * @param {Function} successCallback\n     * @param {ErrorCallback} errorCallback\n     * @return {Promise} - the file comments\n     */\n    fetchThreadedComment(\n        file: BoxItem,\n        commentId: string,\n        successCallback: (comment: Comment) => void,\n        errorCallback: ErrorCallback,\n    ): Promise<?Comment> {\n        const { id, permissions } = file;\n        if (!id || !permissions) {\n            throw getBadItemError();\n        }\n\n        this.threadedCommentsAPI = new ThreadedCommentsAPI(this.options);\n        return new Promise(resolve => {\n            this.threadedCommentsAPI.getComment({\n                commentId,\n                errorCallback,\n                fileId: id,\n                permissions,\n                successCallback: this.fetchThreadedCommentSuccessCallback.bind(this, resolve, successCallback),\n            });\n        });\n    }\n\n    /**\n     * Callback for successful fetch of a comment\n     *\n     * @param {Function} resolve - resolve function\n     * @param {Function} successCallback - success callback\n     * @param {Comment} comment - comment data\n     * @return {void}\n     */\n    fetchThreadedCommentSuccessCallback = (resolve: Function, successCallback: Function, comment: Comment): void => {\n        successCallback(comment);\n        resolve();\n    };\n\n    /**\n     * Fetches the comments with replies for a file\n     *\n     * @param {Object} permissions - the file permissions\n     * @return {Promise} - the file comments\n     */\n    fetchThreadedComments(permissions: BoxItemPermission): Promise<?ThreadedCommentsType> {\n        this.threadedCommentsAPI = new ThreadedCommentsAPI(this.options);\n        return new Promise(resolve => {\n            this.threadedCommentsAPI.getComments({\n                errorCallback: this.fetchFeedItemErrorCallback.bind(this, resolve),\n                fileId: this.file.id,\n                permissions,\n                successCallback: resolve,\n            });\n        });\n    }\n\n    /**\n     * Fetches the file activities for a file\n     *\n     * @param {BoxItemPermission} permissions - the file permissions\n     * @param {FileActivityTypes[]} activityTypes - the activity types to filter by\n     * @param {boolean} shouldShowReplies - specify if replies should be included in the response\n     * @return {Promise} - the file comments\n     */\n    fetchFileActivities(\n        permissions: BoxItemPermission,\n        activityTypes: FileActivityTypes[],\n        shouldShowReplies?: boolean = false,\n    ): Promise<Object> {\n        this.fileActivitiesAPI = new FileActivitiesAPI(this.options);\n        return new Promise(resolve => {\n            this.fileActivitiesAPI.getActivities({\n                errorCallback: this.fetchFeedItemErrorCallback.bind(this, resolve),\n                fileID: this.file.id,\n                permissions,\n                successCallback: resolve,\n                activityTypes,\n                shouldShowReplies,\n            });\n        });\n    }\n\n    /**\n     * Fetches replies (comments) of a comment or annotation\n     *\n     * @param {BoxItem} file - The file to which the comment or annotation belongs to\n     * @param {string} commentFeedItemId - ID of the comment or annotation\n     * @param {CommentFeedItemType} commentFeedItemType - Type of the comment or annotation\n     * @param {Function} successCallback\n     * @param {ErrorCallback} errorCallback\n     * @return {void}\n     */\n    fetchReplies(\n        file: BoxItem,\n        commentFeedItemId: string,\n        commentFeedItemType: CommentFeedItemType,\n        successCallback: (comments: Array<Comment>) => void,\n        errorCallback: ErrorCallback,\n    ): void {\n        const { id, permissions } = file;\n        if (!id || !permissions) {\n            throw getBadItemError();\n        }\n\n        this.file = file;\n        this.errorCallback = errorCallback;\n\n        this.updateFeedItem({ isRepliesLoading: true }, commentFeedItemId);\n\n        const successCallbackFn = ({ entries }: ThreadedCommentsType) => {\n            this.updateFeedItem(\n                { isRepliesLoading: false, replies: entries, total_reply_count: entries.length },\n                commentFeedItemId,\n            );\n            successCallback(entries);\n        };\n        const errorCallbackFn = (error: ErrorResponseData, code: string) => {\n            this.fetchRepliesErrorCallback(error, code, commentFeedItemId);\n        };\n\n        if (commentFeedItemType === FEED_ITEM_TYPE_ANNOTATION) {\n            this.annotationsAPI = new AnnotationsAPI(this.options);\n\n            this.annotationsAPI.getAnnotationReplies(\n                file.id,\n                commentFeedItemId,\n                permissions,\n                successCallbackFn,\n                errorCallbackFn,\n            );\n        } else if (commentFeedItemType === FEED_ITEM_TYPE_COMMENT) {\n            this.threadedCommentsAPI = new ThreadedCommentsAPI(this.options);\n\n            this.threadedCommentsAPI.getCommentReplies({\n                fileId: file.id,\n                commentId: commentFeedItemId,\n                permissions,\n                successCallback: successCallbackFn,\n                errorCallback: errorCallbackFn,\n            });\n        }\n    }\n\n    /**\n     * Fetches the versions for a file\n     *\n     * @return {Promise} - the file versions\n     */\n    fetchVersions(): Promise<?FileVersions> {\n        this.versionsAPI = new VersionsAPI(this.options);\n\n        return new Promise(resolve => {\n            this.versionsAPI.getVersions(\n                this.file.id,\n                resolve,\n                this.fetchFeedItemErrorCallback.bind(this, resolve),\n                undefined,\n                undefined,\n                FEED_FILE_VERSIONS_FIELDS_TO_FETCH,\n            );\n        });\n    }\n\n    /**\n     * Fetches the current version for a file\n     *\n     * @return {Promise} - the file versions\n     */\n    fetchCurrentVersion(): Promise<?BoxItemVersion> {\n        this.versionsAPI = new VersionsAPI(this.options);\n\n        return new Promise(resolve => {\n            const { file_version = {} } = this.file;\n            this.versionsAPI.getVersion(\n                this.file.id,\n                file_version.id,\n                resolve,\n                this.fetchFeedItemErrorCallback.bind(this, resolve),\n            );\n        });\n    }\n\n    /**\n     * Fetches the tasks for a file\n     *\n     * @return {Promise} - the feed items\n     */\n    fetchTasksNew(): Promise<?Tasks> {\n        this.tasksNewAPI = new TasksNewAPI(this.options);\n\n        return new Promise(resolve => {\n            this.tasksNewAPI.getTasksForFile({\n                file: { id: this.file.id },\n                successCallback: resolve,\n                errorCallback: (err, code) => this.fetchFeedItemErrorCallback(resolve, err, code),\n            });\n        });\n    }\n\n    /**\n     * Error callback for fetching feed items.\n     * Should only call the error callback if the response is a 401, 429 or >= 500\n     *\n     * @param {Function} resolve - the function which will be called on error\n     * @param {Object} e - the axios error\n     * @param {string} code - the error code\n     * @return {void}\n     */\n    fetchFeedItemErrorCallback(resolve: Function, e: ElementsXhrError, code: string) {\n        const { status } = e;\n        const shouldDisplayError = isUserCorrectableError(status);\n        this.feedErrorCallback(shouldDisplayError, e, code);\n        resolve();\n    }\n\n    /**\n     * Updates a task assignment\n     *\n     * @param {BoxItem} file - The file to which the task is assigned\n     * @param {string} taskId - ID of task to be updated\n     * @param {string} taskCollaboratorId - Task assignment ID\n     * @param {TaskCollabStatus} taskCollaboratorStatus - New task assignment status\n     * @param {Function} successCallback - the function which will be called on success\n     * @param {Function} errorCallback - the function which will be called on error\n     * @return {void}\n     */\n    updateTaskCollaborator = (\n        file: BoxItem,\n        taskId: string,\n        taskCollaboratorId: string,\n        taskCollaboratorStatus: TaskCollabStatus,\n        successCallback: Function,\n        errorCallback: ErrorCallback,\n    ): void => {\n        if (!file.id) {\n            throw getBadItemError();\n        }\n\n        this.file = file;\n        this.errorCallback = errorCallback;\n        this.updateFeedItem({ isPending: true }, taskId);\n        const collaboratorsApi = new TaskCollaboratorsAPI(this.options);\n        this.taskCollaboratorsAPI.push(collaboratorsApi);\n        const taskCollaboratorPayload = {\n            id: taskCollaboratorId,\n            status: taskCollaboratorStatus,\n        };\n        const handleError = (e: ElementsXhrError, code: string) => {\n            let errorMessage;\n            switch (taskCollaboratorStatus) {\n                case TASK_NEW_APPROVED:\n                    errorMessage = messages.taskApproveErrorMessage;\n                    break;\n                case TASK_NEW_COMPLETED:\n                    errorMessage = messages.taskCompleteErrorMessage;\n                    break;\n                case TASK_NEW_REJECTED:\n                    errorMessage = messages.taskRejectErrorMessage;\n                    break;\n                default:\n                    errorMessage = messages.taskCompleteErrorMessage;\n            }\n            this.updateFeedItem(this.createFeedError(errorMessage, messages.taskActionErrorTitle), taskId);\n            this.feedErrorCallback(true, e, code);\n        };\n        collaboratorsApi.updateTaskCollaborator({\n            file,\n            taskCollaborator: taskCollaboratorPayload,\n            successCallback: (taskCollab: TaskCollabAssignee) => {\n                this.updateTaskCollaboratorSuccessCallback(taskId, file, taskCollab, successCallback, handleError);\n            },\n            errorCallback: handleError,\n        });\n    };\n\n    /**\n     * Updates the task assignment state of the updated task\n     *\n     * @param {string} taskId - Box task id\n     * @param {TaskAssignment} updatedCollaborator - New task assignment from API\n     * @param {Function} successCallback - the function which will be called on success\n     * @return {void}\n     */\n    updateTaskCollaboratorSuccessCallback = (\n        taskId: string,\n        file: { id: string },\n        updatedCollaborator: TaskCollabAssignee,\n        successCallback: Function,\n        errorCallback: Function,\n    ): void => {\n        this.tasksNewAPI = new TasksNewAPI(this.options);\n        this.tasksNewAPI.getTask({\n            id: taskId,\n            file,\n            successCallback: task => {\n                this.updateFeedItem({ ...task, isPending: false }, taskId);\n                successCallback(updatedCollaborator);\n            },\n            errorCallback,\n        });\n    };\n\n    /**\n     * Updates a task in the new API\n     *\n     * @param {BoxItem} file - The file to which the task is assigned\n     * @param {string} task - The update task payload object\n     * @param {Function} successCallback - the function which will be called on success\n     * @param {Function} errorCallback - the function which will be called on error\n     * @return {void}\n     */\n    updateTaskNew = async (\n        file: BoxItem,\n        task: TaskUpdatePayload,\n        successCallback: () => void = noop,\n        errorCallback: ErrorCallback = noop,\n    ) => {\n        if (!file.id) {\n            throw getBadItemError();\n        }\n\n        this.file = file;\n        this.errorCallback = errorCallback;\n        this.tasksNewAPI = new TasksNewAPI(this.options);\n        this.updateFeedItem({ isPending: true }, task.id);\n\n        try {\n            // create request for the size of each group by ID\n            // TODO: use async/await for both creating and editing tasks\n            const groupInfoPromises: Array<Promise<any>> = task.addedAssignees\n                .filter(\n                    (assignee: SelectorItem<UserMini | GroupMini>) => assignee.item && assignee.item.type === 'group',\n                )\n                .map(assignee => assignee.id)\n                .map(groupId => {\n                    return new GroupsAPI(this.options).getGroupCount({\n                        file,\n                        group: { id: groupId },\n                    });\n                });\n\n            const groupCounts: Array<{ total_count: number }> = await Promise.all(groupInfoPromises);\n            const hasAnyGroupCountExceeded: boolean = groupCounts.some(\n                groupInfo => groupInfo.total_count > TASK_MAX_GROUP_ASSIGNEES,\n            );\n            const warning = {\n                code: ERROR_CODE_GROUP_EXCEEDS_LIMIT,\n                type: 'warning',\n            };\n\n            if (hasAnyGroupCountExceeded) {\n                this.feedErrorCallback(false, warning, ERROR_CODE_GROUP_EXCEEDS_LIMIT);\n                return;\n            }\n\n            await new Promise((resolve, reject) => {\n                this.tasksNewAPI.updateTaskWithDeps({\n                    file,\n                    task,\n                    successCallback: resolve,\n                    errorCallback: reject,\n                });\n            });\n\n            await new Promise((resolve, reject) => {\n                this.tasksNewAPI.getTask({\n                    file,\n                    id: task.id,\n                    successCallback: (taskData: Task) => {\n                        this.updateFeedItem(\n                            {\n                                ...taskData,\n                                isPending: false,\n                            },\n                            task.id,\n                        );\n\n                        resolve();\n                    },\n                    errorCallback: (e: ElementsXhrError) => {\n                        this.updateFeedItem({ isPending: false }, task.id);\n                        this.feedErrorCallback(false, e, ERROR_CODE_UPDATE_TASK);\n                        reject();\n                    },\n                });\n            });\n\n            // everything succeeded, so call the passed in success callback\n            if (!this.isDestroyed()) {\n                successCallback();\n            }\n        } catch (e) {\n            this.updateFeedItem({ isPending: false }, task.id);\n            this.feedErrorCallback(false, e, ERROR_CODE_UPDATE_TASK);\n        }\n    };\n\n    /**\n     * Deletes a comment.\n     *\n     * @param {BoxItem} file - The file to which the comment belongs to\n     * @param {string} commentId - Comment ID\n     * @param {BoxCommentPermission} permissions - Permissions for the comment\n     * @param {Function} successCallback - the function which will be called on success\n     * @param {Function} errorCallback - the function which will be called on error\n     * @return {void}\n     */\n    deleteComment = (\n        file: BoxItem,\n        commentId: string,\n        permissions: BoxCommentPermission,\n        successCallback: Function,\n        errorCallback: ErrorCallback,\n    ): void => {\n        this.commentsAPI = new CommentsAPI(this.options);\n        if (!file.id) {\n            throw getBadItemError();\n        }\n\n        this.file = file;\n        this.errorCallback = errorCallback;\n        this.updateFeedItem({ isPending: true }, commentId);\n\n        this.commentsAPI.deleteComment({\n            file,\n            commentId,\n            permissions,\n            successCallback: this.deleteFeedItem.bind(this, commentId, successCallback),\n            errorCallback: (e: ElementsXhrError, code: string) => {\n                this.deleteCommentErrorCallback(e, code, commentId);\n            },\n        });\n    };\n\n    /**\n     * Deletes a threaded comment (using ThreadedComments API).\n     *\n     * @param {BoxItem} file - The file to which the comment belongs to\n     * @param {string} commentId - Comment ID\n     * @param {BoxCommentPermission} permissions - Permissions for the comment\n     * @param {Function} successCallback - the function which will be called on success\n     * @param {Function} errorCallback - the function which will be called on error\n     * @return {void}\n     */\n    deleteThreadedComment = (\n        file: BoxItem,\n        commentId: string,\n        permissions: BoxCommentPermission,\n        successCallback: Function,\n        errorCallback: ErrorCallback,\n    ): void => {\n        if (!file.id) {\n            throw getBadItemError();\n        }\n\n        this.file = file;\n        this.errorCallback = errorCallback;\n        this.updateFeedItem({ isPending: true }, commentId);\n\n        this.threadedCommentsAPI = new ThreadedCommentsAPI(this.options);\n\n        this.threadedCommentsAPI.deleteComment({\n            fileId: file.id,\n            commentId,\n            permissions,\n            successCallback: this.deleteFeedItem.bind(this, commentId, successCallback),\n            errorCallback: (e: ElementsXhrError, code: string) => {\n                this.deleteCommentErrorCallback(e, code, commentId);\n            },\n        });\n    };\n\n    /**\n     * Deletes a reply (using ThreadedComments API).\n     *\n     * @param {BoxItem} file - The file to which the comment belongs to\n     * @param {string} id - id of the reply (comment)\n     * @param {string} parentId - id of the parent feed item\n     * @param {BoxCommentPermission} permissions - Permissions for the comment\n     * @param {Function} successCallback - the function which will be called on success\n     * @param {Function} errorCallback - the function which will be called on error\n     * @return {void}\n     */\n    deleteReply = (\n        file: BoxItem,\n        id: string,\n        parentId: string,\n        permissions: BoxCommentPermission,\n        successCallback: () => void,\n        errorCallback: ErrorCallback,\n    ): void => {\n        if (!file.id) {\n            throw getBadItemError();\n        }\n\n        this.file = file;\n        this.errorCallback = errorCallback;\n        this.updateReplyItem({ isPending: true }, parentId, id);\n\n        this.threadedCommentsAPI = new ThreadedCommentsAPI(this.options);\n\n        this.threadedCommentsAPI.deleteComment({\n            fileId: file.id,\n            commentId: id,\n            permissions,\n            successCallback: this.deleteReplySuccessCallback.bind(this, id, parentId, successCallback),\n            errorCallback: (e: ElementsXhrError, code: string) => {\n                this.deleteReplyErrorCallback(e, code, id, parentId);\n            },\n        });\n    };\n\n    /**\n     * Callback for successful deletion of a reply.\n     *\n     * @param {string} id - ID of the reply\n     * @param {string} parentId - ID of the parent feed item\n     * @param {Function} successCallback - success callback\n     * @return {void}\n     */\n    deleteReplySuccessCallback = (id: string, parentId: string, successCallback: Function): void => {\n        this.modifyFeedItemRepliesCountBy(parentId, -1);\n        this.deleteReplyItem(id, parentId, successCallback);\n    };\n\n    /**\n     * Error callback for deleting a comment\n     *\n     * @param {ElementsXhrError} e - the error returned by the API\n     * @param {string} code - the error code\n     * @param {string} commentId - the comment id\n     * @return {void}\n     */\n    deleteCommentErrorCallback = (e: ElementsXhrError, code: string, commentId: string) => {\n        this.updateFeedItem(this.createFeedError(messages.commentDeleteErrorMessage), commentId);\n        this.feedErrorCallback(true, e, code);\n    };\n\n    /**\n     * Error callback for deleting a reply\n     *\n     * @param {ElementsXhrError} error - the error returned by the API\n     * @param {string} code - the error code\n     * @param {string} id - the reply (comment) id\n     * @param {string} parentId - the comment id of the parent feed item\n     * @return {void}\n     */\n    deleteReplyErrorCallback = (error: ElementsXhrError, code: string, id: string, parentId: string) => {\n        this.updateReplyItem(this.createFeedError(messages.commentDeleteErrorMessage), parentId, id);\n        this.feedErrorCallback(true, error, code);\n    };\n\n    /**\n     * Creates a task.\n     *\n     * @param {BoxItem} file - The file to which the task is assigned\n     * @param {Object} currentUser - the user who performed the action\n     * @param {string} message - Task text\n     * @param {Array} assignees - List of assignees\n     * @param {number} dueAt - Task's due date\n     * @param {Function} successCallback - the function which will be called on success\n     * @param {Function} errorCallback - the function which will be called on error\n     * @return {void}\n     */\n    createTaskNew = (\n        file: BoxItem,\n        currentUser: User,\n        message: string,\n        assignees: SelectorItems<>,\n        taskType: TaskType,\n        dueAt: ?string,\n        completionRule: TaskCompletionRule,\n        successCallback: Function,\n        errorCallback: ErrorCallback,\n    ): void => {\n        if (!file.id) {\n            throw getBadItemError();\n        }\n\n        this.file = file;\n        this.errorCallback = errorCallback;\n        const uuid = uniqueId('task_');\n        let dueAtString;\n        if (dueAt) {\n            const dueAtDate: Date = new Date(dueAt);\n            dueAtString = dueAtDate.toISOString();\n        }\n\n        // TODO: make pending task generator a function\n        const pendingTask: TaskNew = {\n            created_by: {\n                type: 'task_collaborator',\n                target: currentUser,\n                id: uniqueId(),\n                role: 'CREATOR',\n                status: TASK_NEW_INITIAL_STATUS,\n            },\n            completion_rule: completionRule,\n            created_at: new Date().toISOString(),\n            due_at: dueAtString,\n            id: uuid,\n            description: message,\n            type: FEED_ITEM_TYPE_TASK,\n            assigned_to: {\n                entries: assignees.map((assignee: SelectorItem<UserMini | GroupMini>) => ({\n                    id: uniqueId(),\n                    target: { ...assignee, avatar_url: '', type: 'user' },\n                    status: TASK_NEW_INITIAL_STATUS,\n                    permissions: {\n                        can_delete: false,\n                        can_update: false,\n                    },\n                    role: 'ASSIGNEE',\n                    type: 'task_collaborator',\n                })),\n                limit: 10,\n                next_marker: null,\n            },\n            permissions: {\n                can_update: false,\n                can_delete: false,\n                can_create_task_collaborator: false,\n                can_create_task_link: false,\n            },\n            task_links: {\n                entries: [\n                    {\n                        id: uniqueId(),\n                        type: 'task_link',\n                        target: {\n                            type: 'file',\n                            ...file,\n                        },\n                        permissions: {\n                            can_delete: false,\n                            can_update: false,\n                        },\n                    },\n                ],\n                limit: 1,\n                next_marker: null,\n            },\n            task_type: taskType,\n            status: TASK_NEW_NOT_STARTED,\n        };\n\n        const taskPayload: TaskPayload = {\n            description: message,\n            due_at: dueAtString,\n            task_type: taskType,\n            completion_rule: completionRule,\n        };\n\n        // create request for the size of each group by ID\n        const groupInfoPromises: Array<Promise<any>> = assignees\n            .filter((assignee: SelectorItem<UserMini | GroupMini>) => (assignee.item && assignee.item.type) === 'group')\n            .map(assignee => assignee.id)\n            .map(groupId => {\n                return new GroupsAPI(this.options).getGroupCount({\n                    file,\n                    group: { id: groupId },\n                });\n            });\n\n        // Fetch each group size in parallel --> return an array of group sizes\n        Promise.all(groupInfoPromises)\n            .then((groupCounts: Array<{ total_count: number }>) => {\n                const hasAnyGroupCountExceeded: boolean = groupCounts.some(\n                    groupInfo => groupInfo.total_count > TASK_MAX_GROUP_ASSIGNEES,\n                );\n                const warning = {\n                    code: ERROR_CODE_GROUP_EXCEEDS_LIMIT,\n                    type: 'warning',\n                };\n                if (hasAnyGroupCountExceeded) {\n                    this.feedErrorCallback(false, warning, ERROR_CODE_GROUP_EXCEEDS_LIMIT);\n                    return;\n                }\n\n                this.tasksNewAPI = new TasksNewAPI(this.options);\n                this.tasksNewAPI.createTaskWithDeps({\n                    file,\n                    task: taskPayload,\n                    assignees,\n                    successCallback: (taskWithDepsData: any) => {\n                        this.addPendingItem(this.file.id, currentUser, pendingTask);\n                        this.updateFeedItem(\n                            {\n                                ...taskWithDepsData,\n                                task_links: {\n                                    entries: taskWithDepsData.task_links,\n                                    next_marker: null,\n                                    limit: 1,\n                                },\n                                assigned_to: {\n                                    entries: taskWithDepsData.assigned_to,\n                                    next_marker: null,\n                                    limit: taskWithDepsData.assigned_to.length,\n                                },\n                                isPending: false,\n                            },\n                            uuid,\n                        );\n                        successCallback(taskWithDepsData);\n                    },\n                    errorCallback: (e: ElementsXhrError, code: string) => {\n                        this.feedErrorCallback(false, e, code);\n                    },\n                });\n            })\n            .catch(error => {\n                this.feedErrorCallback(false, error, ERROR_CODE_CREATE_TASK);\n            });\n    };\n\n    /**\n     * Creates a task group via the API.\n     *\n     * @param {BoxItem} file - The file to which the task is assigned\n     * @param {Task|TaskUpdatePayload} task - The newly created or existing task from the API\n     * @param {SelectorItem} assignee - The user assigned to this task\n     * @param {Function} errorCallback - Task create error callback\n     * @return {Promise<TaskAssignment>}\n     */\n    createTaskCollaboratorsforGroup(\n        file: BoxItem,\n        task: Task | TaskUpdatePayload,\n        assignee: SelectorItem<UserMini | GroupMini>,\n    ): Promise<Array<TaskCollabAssignee>> {\n        if (!file.id) {\n            throw getBadItemError();\n        }\n\n        this.file = file;\n        return new Promise((resolve, reject) => {\n            const taskCollaboratorsAPI = new TaskCollaboratorsAPI(this.options);\n            this.taskCollaboratorsAPI.push(taskCollaboratorsAPI);\n            taskCollaboratorsAPI.createTaskCollaboratorsforGroup({\n                file,\n                task,\n                group: assignee,\n                successCallback: resolve,\n                errorCallback: (e: ElementsXhrError) => {\n                    reject(e);\n                },\n            });\n        });\n    }\n\n    /**\n     * Creates a task collaborator via the API.\n     *\n     * @param {BoxItem} file - The file to which the task is assigned\n     * @param {Task|TaskUpdatePayload} task - The newly created or existing task from the API\n     * @param {SelectorItem} assignee - The user assigned to this task\n     * @param {Function} errorCallback - Task create error callback\n     * @return {Promise<TaskAssignment>}\n     */\n    createTaskCollaborator(\n        file: BoxItem,\n        task: Task | TaskUpdatePayload,\n        assignee: SelectorItem<UserMini | GroupMini>,\n    ): Promise<TaskCollabAssignee> {\n        if (!file.id) {\n            throw getBadItemError();\n        }\n\n        this.file = file;\n        return new Promise((resolve, reject) => {\n            const taskCollaboratorsAPI = new TaskCollaboratorsAPI(this.options);\n            this.taskCollaboratorsAPI.push(taskCollaboratorsAPI);\n\n            taskCollaboratorsAPI.createTaskCollaborator({\n                file,\n                task,\n                user: assignee,\n                successCallback: resolve,\n                errorCallback: (e: ElementsXhrError) => {\n                    reject(e);\n                },\n            });\n        });\n    }\n\n    /**\n     * Deletes a task collaborator via the API.\n     *\n     * @param {BoxItem} file - The file to which the task is assigned\n     * @param {Task|TaskUpdatePayload} task - The newly deleted or existing task from the API\n     * @param {TaskCollabAssignee} assignee - The user assigned to this task\n     * @param {Function} errorCallback - Task delete error callback\n     * @return {Promise<TaskAssignment>}\n     */\n    deleteTaskCollaborator(\n        file: BoxItem,\n        task: Task | TaskUpdatePayload,\n        assignee: TaskCollabAssignee,\n    ): Promise<TaskCollabAssignee> {\n        if (!file.id) {\n            throw getBadItemError();\n        }\n\n        this.file.id = file.id;\n        return new Promise((resolve, reject) => {\n            const taskCollaboratorsAPI = new TaskCollaboratorsAPI(this.options);\n            this.taskCollaboratorsAPI.push(taskCollaboratorsAPI);\n\n            taskCollaboratorsAPI.deleteTaskCollaborator({\n                file,\n                task,\n                taskCollaborator: { id: assignee.id },\n                successCallback: resolve,\n                errorCallback: (e: ElementsXhrError) => {\n                    reject(e);\n                },\n            });\n        });\n    }\n\n    /**\n     * Creates a task link via the API.\n     *\n     * @param {BoxItem} file - The file to which the task is assigned\n     * @param {Task} task - The newly created task from the API\n     * @param {Function} errorCallback - Task create error callback\n     * @return {Promise<TaskAssignment}\n     */\n    createTaskLink(file: BoxItem, task: Task): Promise<TaskLink> {\n        if (!file.id) {\n            throw getBadItemError();\n        }\n\n        this.file = file;\n        return new Promise((resolve, reject) => {\n            const taskLinksAPI = new TaskLinksAPI(this.options);\n            this.taskLinksAPI.push(taskLinksAPI);\n\n            taskLinksAPI.createTaskLink({\n                file,\n                task,\n                successCallback: resolve,\n                errorCallback: reject,\n            });\n        });\n    }\n\n    /**\n     * Deletes a task in the new API\n     *\n     * @param {BoxItem} file - The file to which the task is assigned\n     * @param {string} taskId - The task's id\n     * @param {Function} successCallback - the function which will be called on success\n     * @param {Function} errorCallback - the function which will be called on error\n     * @return {void}\n     */\n    deleteTaskNew = (\n        file: BoxItem,\n        task: TaskNew,\n        successCallback: (taskId: string) => void = noop,\n        errorCallback: ErrorCallback = noop,\n    ) => {\n        if (!file.id) {\n            throw getBadItemError();\n        }\n\n        this.file = file;\n        this.errorCallback = errorCallback;\n        this.tasksNewAPI = new TasksNewAPI(this.options);\n        this.updateFeedItem({ isPending: true }, task.id);\n\n        this.tasksNewAPI.deleteTask({\n            file,\n            task,\n            successCallback: this.deleteFeedItem.bind(this, task.id, successCallback),\n            errorCallback: (e: ElementsXhrError, code: string) => {\n                this.updateFeedItem(this.createFeedError(messages.taskDeleteErrorMessage), task.id);\n                this.feedErrorCallback(true, e, code);\n            },\n        });\n    };\n\n    /**\n     * Deletes a feed item from the cache\n     *\n     * @param {string} id - The id of the feed item to be deleted\n     * @param {Function} successCallback - function to be called after the delete\n     */\n    deleteFeedItem = (id: string, successCallback: Function = noop) => {\n        const cachedItems = this.getCachedItems(this.file.id);\n        if (cachedItems) {\n            const feedItems = cachedItems.items.filter(feedItem => feedItem.id !== id);\n            this.setCachedItems(this.file.id, feedItems);\n\n            if (!this.isDestroyed()) {\n                successCallback(id);\n            }\n        }\n    };\n\n    /**\n     * Deletes a reply from the cache\n     *\n     * @param {string} id - The id of the feed item to be deleted\n     * @param {string} parentId - The id of the parent feed item\n     * @param {Function} successCallback - function to be called after the delete\n     */\n    deleteReplyItem = (\n        id: string,\n        parentId: string,\n        successCallback: (id: string, parentId: string) => void = noop,\n    ) => {\n        const cachedItems = this.getCachedItems(this.file.id) || { items: [], errors: [] };\n        const feedItems = cachedItems.items.map(item => {\n            if (item.id !== parentId) {\n                return item;\n            }\n            if (item.type === FEED_ITEM_TYPE_ANNOTATION) {\n                return getItemWithFilteredReplies<Annotation>(item, id);\n            }\n            if (item.type === FEED_ITEM_TYPE_COMMENT) {\n                return getItemWithFilteredReplies<Comment>(item, id);\n            }\n            return item;\n        });\n        this.setCachedItems(this.file.id, feedItems);\n\n        if (!this.isDestroyed()) {\n            successCallback(id, parentId);\n        }\n    };\n\n    /**\n     * Network error callback\n     *\n     * @param {boolean} hasError - true if the UI should display an error\n     * @param {ElementsXhrError} e - the error returned by the API\n     * @param {string} code - the error code for the error which occured\n     * @return {void}\n     */\n    feedErrorCallback = (hasError: boolean = false, e: ElementsXhrError, code: string): void => {\n        if (hasError) {\n            this.errors.push({ ...e, code });\n        }\n\n        if (!this.isDestroyed() && this.errorCallback) {\n            this.errorCallback(e, code, {\n                error: e,\n                [IS_ERROR_DISPLAYED]: hasError,\n            });\n        }\n\n        console.error(e); // eslint-disable-line no-console\n    };\n\n    /**\n     * Add a placeholder pending feed item.\n     *\n     * @param {string} id - the file id\n     * @param {Object} currentUser - the user who performed the action\n     * @param {Object} itemBase - Base properties for item to be added to the feed as pending.\n     * @return {void}\n     */\n    addPendingItem = (id: string, currentUser: User, itemBase: Object): Comment | Task | TaskNew | BoxItemVersion => {\n        if (!currentUser) {\n            throw getBadUserError();\n        }\n\n        const date = new Date().toISOString();\n        const pendingFeedItem = {\n            created_at: date,\n            created_by: currentUser,\n            modified_at: date,\n            isPending: true,\n            ...itemBase,\n        };\n        const cachedItems = this.getCachedItems(this.file.id);\n        const feedItems = cachedItems ? cachedItems.items : [];\n        const feedItemsWithPendingItem = [...feedItems, pendingFeedItem];\n        this.setCachedItems(id, feedItemsWithPendingItem);\n\n        return pendingFeedItem;\n    };\n\n    /**\n     * Add a placeholder pending comment (reply).\n     *\n     * @param {string} parentId - id of parent comment or annotation\n     * @param {Object} currentUser - the user who performed the action\n     * @param {Object} commentBase - Base properties for reply (comment) to be added to the feed as pending.\n     * @return {Comment} - newly created pending reply\n     */\n    addPendingReply = (parentId: string, currentUser: User, commentBase: Object): Comment => {\n        if (!this.file.id) {\n            throw getBadItemError();\n        }\n        if (!currentUser) {\n            throw getBadUserError();\n        }\n\n        const date = new Date().toISOString();\n        const pendingReply: Comment = {\n            created_at: date,\n            created_by: currentUser,\n            modified_at: date,\n            isPending: true,\n            ...commentBase,\n        };\n\n        const cachedItems = this.getCachedItems(this.file.id);\n        if (cachedItems) {\n            const updatedFeedItems = cachedItems.items.map(item => {\n                if (item.id === parentId && item.type === FEED_ITEM_TYPE_COMMENT) {\n                    return getItemWithPendingReply<Comment>(item, pendingReply);\n                }\n                if (item.id === parentId && item.type === FEED_ITEM_TYPE_ANNOTATION) {\n                    return getItemWithPendingReply<Annotation>(item, pendingReply);\n                }\n                return item;\n            });\n\n            this.setCachedItems(this.file.id, updatedFeedItems);\n        }\n\n        return pendingReply;\n    };\n\n    /**\n     * Callback for successful creation of a Comment.\n     *\n     * @param {Comment} commentData - API returned Comment\n     * @param {string} id - ID of the feed item to update with the new comment data\n     * @return {void}\n     */\n    createCommentSuccessCallback = (commentData: Comment, id: string, successCallback: Function): void => {\n        const { message = '', tagged_message = '' } = commentData;\n        // Comment component uses tagged_message only\n        commentData.tagged_message = tagged_message || message;\n\n        this.updateFeedItem(\n            {\n                ...commentData,\n                isPending: false,\n            },\n            id,\n        );\n\n        if (!this.isDestroyed()) {\n            successCallback(commentData);\n        }\n    };\n\n    /**\n     * Callback for failed creation of a Comment.\n     *\n     * @param {Object} e - The axios error\n     * @param {string} code - the error code\n     * @param {string} id - ID of the feed item to update\n     * @return {void}\n     */\n    createCommentErrorCallback = (e: ElementsXhrError, code: string, id: string) => {\n        const errorMessage =\n            e.status === HTTP_STATUS_CODE_CONFLICT\n                ? messages.commentCreateConflictMessage\n                : messages.commentCreateErrorMessage;\n        this.updateFeedItem(this.createFeedError(errorMessage), id);\n        this.feedErrorCallback(false, e, code);\n    };\n\n    /**\n     * Callback for successful creation of a Comment.\n     *\n     * @param {Comment} commentData - API returned Comment\n     * @param {string} parentId - ID of the parent feed item\n     * @param {string} id - ID of the reply to update with the new comment data\n     * @param {Function} successCallback - success callback\n     * @return {void}\n     */\n    createReplySuccessCallback = (\n        commentData: Comment,\n        parentId: string,\n        id: string,\n        successCallback: Function,\n    ): void => {\n        this.updateReplyItem(\n            {\n                ...commentData,\n                isPending: false,\n            },\n            parentId,\n            id,\n        );\n\n        if (!this.isDestroyed()) {\n            successCallback(commentData);\n        }\n    };\n\n    /**\n     * Callback for failed creation of a reply.\n     *\n     * @param {ElementsXhrError} error - The axios error\n     * @param {string} code - the error code\n     * @param {string} parentId - ID of the parent feed item\n     * @param {string} id - ID of the feed item to update\n     * @return {void}\n     */\n    createReplyErrorCallback = (error: ElementsXhrError, code: string, parentId: string, id: string) => {\n        const errorMessage =\n            error.status === HTTP_STATUS_CODE_CONFLICT\n                ? messages.commentCreateConflictMessage\n                : messages.commentCreateErrorMessage;\n        this.updateReplyItem(this.createFeedError(errorMessage), parentId, id);\n        this.feedErrorCallback(false, error, code);\n    };\n\n    /**\n     * Constructs an error object that renders to an inline feed error\n     *\n     * @param {string} message - The error message body.\n     * @param {string} title - The error message title.\n     * @return {Object} An error message object\n     */\n    createFeedError(message: MessageDescriptor, title: MessageDescriptor = commonMessages.errorOccured) {\n        return {\n            error: { message, title },\n        };\n    }\n\n    /**\n     * Replace a feed item with new feed item data.\n     *\n     * @param {Object} updates - The new data to be applied to the feed item.\n     * @param {string} id - ID of the feed item to replace.\n     * @return {void}\n     */\n    updateFeedItem = (updates: Object, id: string): ?FeedItems => {\n        if (!this.file.id) {\n            throw getBadItemError();\n        }\n\n        const cachedItems = this.getCachedItems(this.file.id);\n        if (cachedItems) {\n            const updatedFeedItems = cachedItems.items.map((item: FeedItem) => {\n                if (item.id === id) {\n                    return {\n                        ...item,\n                        ...updates,\n                    };\n                }\n\n                return item;\n            });\n\n            this.setCachedItems(this.file.id, updatedFeedItems);\n            return updatedFeedItems;\n        }\n\n        return null;\n    };\n\n    /**\n     * Replace a reply of feed item with new comment data.\n     *\n     * @param {Object} replyUpdates - New data to be applied to the reply.\n     * @param {string} parentId - ID of the parent feed item.\n     * @param {string} id - ID of the reply to replace.\n     * @return {void}\n     */\n    updateReplyItem = (replyUpdates: Object, parentId: string, id: string) => {\n        if (!this.file.id) {\n            throw getBadItemError();\n        }\n\n        const getItemWithUpdatedReply = <T: { replies?: Array<Comment> }>(\n            item: T,\n            replyId: string,\n            updates: Object,\n        ): T => {\n            const updatedItem: T = { ...item };\n            if (updatedItem.replies) {\n                updatedItem.replies = updatedItem.replies.map(reply => {\n                    if (reply.id === replyId) {\n                        return {\n                            ...reply,\n                            ...updates,\n                        };\n                    }\n                    return reply;\n                });\n            }\n            return updatedItem;\n        };\n\n        const cachedItems = this.getCachedItems(this.file.id);\n        if (cachedItems) {\n            const updatedFeedItems = cachedItems.items.map((item: FeedItem) => {\n                if (item.id === parentId && item.type === FEED_ITEM_TYPE_COMMENT) {\n                    return getItemWithUpdatedReply<Comment>(item, id, replyUpdates);\n                }\n                if (item.id === parentId && item.type === FEED_ITEM_TYPE_ANNOTATION) {\n                    return getItemWithUpdatedReply<Annotation>(item, id, replyUpdates);\n                }\n                return item;\n            });\n\n            this.setCachedItems(this.file.id, updatedFeedItems);\n        }\n    };\n\n    /**\n     * Create a comment, and make a pending item to be replaced once the API is successful.\n     *\n     * @param {BoxItem} file - The file to which the task is assigned\n     * @param {Object} currentUser - the user who performed the action\n     * @param {string} text - the comment text\n     * @param {boolean} hasMention - true if there is an @mention in the text\n     * @param {Function} successCallback - the success callback\n     * @param {Function} errorCallback - the error callback\n     * @return {void}\n     */\n    createComment = (\n        file: BoxItem,\n        currentUser: User,\n        text: string,\n        hasMention: boolean,\n        successCallback: Function,\n        errorCallback: ErrorCallback,\n    ): void => {\n        const uuid = uniqueId('comment_');\n        const commentData = {\n            id: uuid,\n            tagged_message: text,\n            type: FEED_ITEM_TYPE_COMMENT,\n        };\n\n        if (!file.id) {\n            throw getBadItemError();\n        }\n\n        this.file = file;\n        this.errorCallback = errorCallback;\n        this.addPendingItem(this.file.id, currentUser, commentData);\n\n        const message = {};\n        if (hasMention) {\n            message.taggedMessage = text;\n        } else {\n            message.message = text;\n        }\n\n        this.commentsAPI = new CommentsAPI(this.options);\n\n        this.commentsAPI.createComment({\n            file,\n            ...message,\n            successCallback: (comment: Comment) => {\n                this.createCommentSuccessCallback(comment, uuid, successCallback);\n            },\n            errorCallback: (e: ErrorResponseData, code: string) => {\n                this.createCommentErrorCallback(e, code, uuid);\n            },\n        });\n    };\n\n    /**\n     * Create a threaded comment (using ThreadedComments API),\n     * and make a pending item to be replaced once the API is successful.\n     *\n     * @param {BoxItem} file - The file to which the task is assigned\n     * @param {Object} currentUser - the user who performed the action\n     * @param {string} text - the comment text\n     * @param {Function} successCallback - the success callback\n     * @param {Function} errorCallback - the error callback\n     * @return {void}\n     */\n    createThreadedComment = (\n        file: BoxItem,\n        currentUser: User,\n        text: string,\n        successCallback: Function,\n        errorCallback: ErrorCallback,\n    ): void => {\n        if (!file.id) {\n            throw getBadItemError();\n        }\n\n        const uuid = uniqueId('comment_');\n        const commentData = {\n            id: uuid,\n            tagged_message: text,\n            type: FEED_ITEM_TYPE_COMMENT,\n        };\n\n        this.file = file;\n        this.errorCallback = errorCallback;\n        this.addPendingItem(this.file.id, currentUser, commentData);\n\n        this.threadedCommentsAPI = new ThreadedCommentsAPI(this.options);\n\n        this.threadedCommentsAPI.createComment({\n            file,\n            message: text,\n            successCallback: (comment: Comment) => {\n                this.createCommentSuccessCallback(comment, uuid, successCallback);\n            },\n            errorCallback: (e: ErrorResponseData, code: string) => {\n                this.createCommentErrorCallback(e, code, uuid);\n            },\n        });\n    };\n\n    /**\n     * Create a reply to annotation or comment, and make a pending item to be replaced once the API is successful.\n     *\n     * @param {BoxItem} file - The file to which the task is assigned\n     * @param {Object} currentUser - the user who performed the action\n     * @param {string} parentId - id of the parent item\n     * @param {CommentFeedItemType} parentType - type of the parent item\n     * @param {string} text - the comment text\n     * @param {Function} successCallback - the success callback\n     * @param {Function} errorCallback - the error callback\n     * @return {void}\n     */\n    createReply(\n        file: BoxItem,\n        currentUser: User,\n        parentId: string,\n        parentType: CommentFeedItemType,\n        text: string,\n        successCallback: Function,\n        errorCallback: ErrorCallback,\n    ): void {\n        const { id, permissions } = file;\n        if (!id || !permissions) {\n            throw getBadItemError();\n        }\n\n        const uuid = uniqueId('comment_');\n        const commentData = {\n            id: uuid,\n            tagged_message: text,\n            type: FEED_ITEM_TYPE_COMMENT,\n        };\n\n        this.file = file;\n        this.errorCallback = errorCallback;\n        this.addPendingReply(parentId, currentUser, commentData);\n        this.modifyFeedItemRepliesCountBy(parentId, 1);\n\n        const successCallbackFn = (comment: Comment) => {\n            this.createReplySuccessCallback(comment, parentId, uuid, successCallback);\n        };\n        const errorCallbackFn = (error: ErrorResponseData, code: string) => {\n            this.createReplyErrorCallback(error, code, parentId, uuid);\n        };\n\n        if (parentType === FEED_ITEM_TYPE_ANNOTATION) {\n            this.annotationsAPI = new AnnotationsAPI(this.options);\n\n            this.annotationsAPI.createAnnotationReply(\n                file.id,\n                parentId,\n                permissions,\n                text,\n                successCallbackFn,\n                errorCallbackFn,\n            );\n        } else if (parentType === FEED_ITEM_TYPE_COMMENT) {\n            this.threadedCommentsAPI = new ThreadedCommentsAPI(this.options);\n\n            this.threadedCommentsAPI.createCommentReply({\n                fileId: file.id,\n                commentId: parentId,\n                permissions,\n                message: text,\n                successCallback: successCallbackFn,\n                errorCallback: errorCallbackFn,\n            });\n        }\n    }\n\n    /**\n     * Update a comment\n     *\n     * @param {BoxItem} file - The file to which the task is assigned\n     * @param {string} commentId - Comment ID\n     * @param {string} text - the comment text\n     * @param {boolean} hasMention - true if there is an @mention in the text\n     * @param {BoxCommentPermission} permissions - Permissions to attach to the app activity items\n     * @param {Function} successCallback - the success callback\n     * @param {Function} errorCallback - the error callback\n     * @return {void}\n     */\n    updateComment = (\n        file: BoxItem,\n        commentId: string,\n        text: string,\n        hasMention: boolean,\n        permissions: BoxCommentPermission,\n        successCallback: Function,\n        errorCallback: ErrorCallback,\n    ): void => {\n        const commentData = {\n            tagged_message: text,\n        };\n\n        if (!file.id) {\n            throw getBadItemError();\n        }\n\n        this.file = file;\n        this.errorCallback = errorCallback;\n        this.updateFeedItem({ ...commentData, isPending: true }, commentId);\n\n        const message = {};\n        if (hasMention) {\n            message.tagged_message = text;\n        } else {\n            message.message = text;\n        }\n\n        this.commentsAPI = new CommentsAPI(this.options);\n\n        this.commentsAPI.updateComment({\n            file,\n            commentId,\n            permissions,\n            ...message,\n            successCallback: (comment: Comment) => {\n                // use the request payload instead of response in the\n                // feed item update because response may not contain\n                // the tagged version of the message\n                this.updateFeedItem(\n                    {\n                        ...message,\n                        isPending: false,\n                    },\n                    commentId,\n                );\n                if (!this.isDestroyed()) {\n                    successCallback(comment);\n                }\n            },\n            errorCallback: (e: ErrorResponseData, code: string) => {\n                this.updateCommentErrorCallback(e, code, commentId);\n            },\n        });\n    };\n\n    /**\n     * Update a threaded comment\n     *\n     * @param {BoxItem} file - The file to which the task is assigned\n     * @param {string} commentId - Comment ID\n     * @param {string} text - the comment text\n     * @param {FeedItemStatus} status - status of the comment\n     * @param {BoxCommentPermission} permissions - Permissions to attach to the app activity items\n     * @param {Function} successCallback - the success callback\n     * @param {Function} errorCallback - the error callback\n     * @return {void}\n     */\n    updateThreadedComment = (\n        file: BoxItem,\n        commentId: string,\n        text?: string,\n        status?: FeedItemStatus,\n        permissions: BoxCommentPermission,\n        successCallback: Function,\n        errorCallback: ErrorCallback,\n    ): void => {\n        if (!file.id) {\n            throw getBadItemError();\n        }\n        if (!text && !status) {\n            throw getMissingItemTextOrStatus();\n        }\n\n        const commentData = {};\n        if (text) {\n            commentData.tagged_message = text;\n        }\n        if (status) {\n            commentData.status = status;\n        }\n\n        this.file = file;\n        this.errorCallback = errorCallback;\n        this.updateFeedItem({ ...commentData, isPending: true }, commentId);\n\n        this.threadedCommentsAPI = new ThreadedCommentsAPI(this.options);\n\n        this.threadedCommentsAPI.updateComment({\n            fileId: file.id,\n            commentId,\n            permissions,\n            message: text,\n            status,\n            successCallback: (comment: Comment) => {\n                const { replies, total_reply_count, ...commentBase } = comment;\n                this.updateFeedItem(\n                    {\n                        // Do not update replies and total_reply_count props as their current values are not included in the response\n                        ...commentBase,\n                        isPending: false,\n                    },\n                    commentId,\n                );\n                if (!this.isDestroyed()) {\n                    successCallback(comment);\n                }\n            },\n            errorCallback: (e: ErrorResponseData, code: string) => {\n                this.updateCommentErrorCallback(e, code, commentId);\n            },\n        });\n    };\n\n    /**\n     * Update a reply\n     *\n     * @param {BoxItem} file - The file to which the reply with its parent is assigned\n     * @param {string} id - id of the reply\n     * @param {string} parentId - id of the parent item\n     * @param {string} text - the updated text\n     * @param {BoxCommentPermission} permissions - Permissions to attach to the app activity items\n     * @param {Function} successCallback - the success callback\n     * @param {Function} errorCallback - the error callback\n     * @return {void}\n     */\n    updateReply = (\n        file: BoxItem,\n        id: string,\n        parentId: string,\n        text: string,\n        permissions: BoxCommentPermission,\n        successCallback: (comment: Comment) => void,\n        errorCallback: ErrorCallback,\n    ): void => {\n        if (!file.id) {\n            throw getBadItemError();\n        }\n\n        this.file = file;\n        this.errorCallback = errorCallback;\n        this.updateReplyItem({ tagged_message: text, isPending: true }, parentId, id);\n\n        this.threadedCommentsAPI = new ThreadedCommentsAPI(this.options);\n\n        this.threadedCommentsAPI.updateComment({\n            fileId: file.id,\n            commentId: id,\n            permissions,\n            message: text,\n            undefined,\n            successCallback: (comment: Comment) => {\n                this.updateReplyItem(\n                    {\n                        ...comment,\n                        isPending: false,\n                    },\n                    parentId,\n                    id,\n                );\n                if (!this.isDestroyed()) {\n                    successCallback(comment);\n                }\n            },\n            errorCallback: (error: ErrorResponseData, code: string) => {\n                this.updateReplyErrorCallback(error, code, id, parentId);\n            },\n        });\n    };\n\n    /**\n     * Modify feed item replies count\n     *\n     * @param {string} id - id of the item\n     * @param {number} n - number to modify the count by\n     * @return {void}\n     */\n    modifyFeedItemRepliesCountBy = (id: string, n: number) => {\n        if (!this.file.id) {\n            throw getBadItemError();\n        }\n\n        const { items: feedItems = [] } = this.getCachedItems(this.file.id) || {};\n        const feedItem = feedItems.find(({ id: itemId }) => itemId === id);\n\n        if (!feedItem || (feedItem.type !== 'annotation' && feedItem.type !== 'comment')) {\n            return;\n        }\n\n        const newReplyCount = (feedItem.total_reply_count || 0) + n;\n        if (newReplyCount >= 0) {\n            this.updateFeedItem({ total_reply_count: newReplyCount }, id);\n        }\n    };\n\n    destroyTaskCollaborators() {\n        if (Array.isArray(this.taskCollaboratorsAPI)) {\n            this.taskCollaboratorsAPI.forEach(api => api.destroy());\n            this.taskCollaboratorsAPI = [];\n        }\n    }\n\n    destroyTaskLinks() {\n        if (Array.isArray(this.taskLinksAPI)) {\n            this.taskLinksAPI.forEach(api => api.destroy());\n            this.taskLinksAPI = [];\n        }\n    }\n\n    /**\n     * Fetches app activities for a file\n     * @param {BoxItemPermission} permissions - Permissions to attach to the app activity items\n     *\n     * @return {Promise} - the feed items\n     */\n    fetchAppActivity(permissions: BoxItemPermission): Promise<?AppActivityItems> {\n        this.appActivityAPI = new AppActivityAPI(this.options);\n\n        return new Promise(resolve => {\n            this.appActivityAPI.getAppActivity(\n                this.file.id,\n                permissions,\n                resolve,\n                this.fetchFeedItemErrorCallback.bind(this, resolve),\n            );\n        });\n    }\n\n    /**\n     * Deletes an app activity item.\n     *\n     * @param {BoxItem} file - The file to which the app activity belongs to\n     * @param {string} appActivityId - The app activity item id to delete\n     * @param {Function} successCallback - the function which will be called on success\n     * @param {Function} errorCallback - the function which will be called on error\n     * @return {void}\n     */\n    deleteAppActivity = (\n        file: BoxItem,\n        appActivityId: string,\n        successCallback: Function,\n        errorCallback: ErrorCallback,\n    ): void => {\n        const { id } = file;\n        if (!id) {\n            throw getBadItemError();\n        }\n\n        this.appActivityAPI = new AppActivityAPI(this.options);\n\n        this.file = file;\n        this.errorCallback = errorCallback;\n        this.updateFeedItem({ isPending: true }, appActivityId);\n\n        this.appActivityAPI.deleteAppActivity({\n            id,\n            appActivityId,\n            successCallback: this.deleteFeedItem.bind(this, appActivityId, successCallback),\n            errorCallback: (e: ElementsXhrError, code: string) => {\n                this.deleteAppActivityErrorCallback(e, code, appActivityId);\n            },\n        });\n    };\n\n    /**\n     * Error callback for deleting an app activity item\n     *\n     * @param {ElementsXhrError} e - the error returned by the API\n     * @param {string} code - the error code\n     * @param {string} id - the app activity id\n     * @return {void}\n     */\n    deleteAppActivityErrorCallback = (e: ElementsXhrError, code: string, id: string) => {\n        this.updateFeedItem(this.createFeedError(messages.appActivityDeleteErrorMessage), id);\n        this.feedErrorCallback(true, e, code);\n    };\n\n    /**\n     * Destroys all the task feed API's\n     *\n     * @return {void}\n     */\n    destroy() {\n        super.destroy();\n\n        if (this.annotationsAPI) {\n            this.annotationsAPI.destroy();\n            delete this.annotationsAPI;\n        }\n\n        if (this.commentsAPI) {\n            this.commentsAPI.destroy();\n            delete this.commentsAPI;\n        }\n\n        if (this.threadedCommentsAPI) {\n            this.threadedCommentsAPI.destroy();\n            delete this.threadedCommentsAPI;\n        }\n\n        if (this.versionsAPI) {\n            this.versionsAPI.destroy();\n            delete this.versionsAPI;\n        }\n\n        if (this.appActivityAPI) {\n            this.appActivityAPI.destroy();\n            delete this.appActivityAPI;\n        }\n\n        if (this.tasksNewAPI) {\n            this.tasksNewAPI.destroy();\n            delete this.tasksNewAPI;\n        }\n\n        this.destroyTaskCollaborators();\n        this.destroyTaskLinks();\n    }\n}\n\nexport default Feed;\n"],"mappings":"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","ignoreList":[]}