{"version":3,"file":"BaseUpload.js","names":["Base","DEFAULT_RETRY_DELAY_MS","MS_IN_S","DEFAULT_HOSTNAME_UPLOAD","DEFAULT_HOSTNAME_UPLOAD_APP","DEFAULT_HOSTNAME_UPLOAD_GOV","MAX_RETRY","MAX_REACHABILITY_RETRY","BaseUpload","constructor","args","_defineProperty","isDestroyed","url","getBaseApiUrl","fileId","replace","isUploadFallbackLogicEnabled","unreachableHostUrls","uploadsReachability","getUnreachableHostsUrls","length","join","size","name","file","attributes","fileName","parent","id","folderId","description","fileDescription","xhr","options","data","successHandler","response","preflightSuccessReachabilityHandler","preflightSuccessHandler","errorHandler","preflightErrorHandler","upload_url","uploadHost","getUploadHostFromUrl","isHostReachable","isReachable","reachabilityRetryCount","makePreflightRequest","error","errorData","retryCount","errorCallback","status","overwrite","conflictFileId","context_info","conflicts","conflictCallback","extension","substr","lastIndexOf","Date","now","code","retryAfterMs","headers","retryAfterSec","parseInt","get","Number","isNaN","retryTimeout","setTimeout","message","readFile","reader","blob","Promise","resolve","reject","readAsArrayBuffer","onload","buffer","result","readCompleteTimestamp","onerror","uploadUrl","splitUrl","split"],"sources":["../../../src/api/uploads/BaseUpload.js"],"sourcesContent":["/**\n * @flow\n * @file Base helper for the Box Upload APIs\n * @author Box\n */\n\nimport Base from '../Base';\nimport {\n    DEFAULT_RETRY_DELAY_MS,\n    MS_IN_S,\n    DEFAULT_HOSTNAME_UPLOAD,\n    DEFAULT_HOSTNAME_UPLOAD_APP,\n    DEFAULT_HOSTNAME_UPLOAD_GOV,\n} from '../../constants';\n\nconst MAX_RETRY = 5;\n// Note: We may have to change this number if we add a lot more fast upload hosts.\nconst MAX_REACHABILITY_RETRY = 10;\n\nclass BaseUpload extends Base {\n    errorCallback: Function;\n\n    file: File;\n\n    fileId: ?string;\n\n    fileName: string;\n\n    fileDescription: ?string;\n\n    folderId: string;\n\n    overwrite: boolean | 'error';\n\n    conflictCallback: ?(fileName: string) => string;\n\n    preflightSuccessHandler: Function;\n\n    retryCount: number = 0;\n\n    reachabilityRetryCount: number = 0;\n\n    retryTimeout: TimeoutID;\n\n    isUploadFallbackLogicEnabled: boolean = false;\n\n    /**\n     * Sends an upload pre-flight request. If a file ID is available,\n     * send a pre-flight request to that file version.\n     *\n     * @private\n     * @return {void}\n     */\n    makePreflightRequest = (): void => {\n        if (this.isDestroyed()) {\n            return;\n        }\n\n        let url = `${this.getBaseApiUrl()}/files/content`;\n        if (this.fileId) {\n            url = url.replace('content', `${this.fileId}/content`);\n        }\n\n        if (this.isUploadFallbackLogicEnabled) {\n            // Add unreachable hosts to url\n            const unreachableHostUrls = this.uploadsReachability.getUnreachableHostsUrls();\n            if (unreachableHostUrls.length !== 0) {\n                url += `?unreachable_hosts=${unreachableHostUrls.join(',')}`;\n            }\n        }\n\n        const { size, name } = this.file;\n        const attributes = {\n            name: this.fileName || name,\n            parent: { id: this.folderId },\n            description: this.fileDescription,\n            size,\n        };\n\n        this.xhr.options({\n            url,\n            data: attributes,\n            successHandler: response => {\n                if (this.isUploadFallbackLogicEnabled) {\n                    this.preflightSuccessReachabilityHandler(response);\n                } else {\n                    this.preflightSuccessHandler(response);\n                }\n            },\n            errorHandler: this.preflightErrorHandler,\n        });\n    };\n\n    /**\n     * Handles successful preflight response.\n     * Performs a upload reachability test before calling preflightSuccessHandler.\n     *\n     * @param {Object} - Request options\n     * @return {Promise} Async function promise\n     */\n    preflightSuccessReachabilityHandler = async ({ data }: { data: { upload_url?: string } }): Promise<any> => {\n        if (this.isDestroyed()) {\n            return;\n        }\n\n        const { upload_url } = data;\n        // If upload_url is not available, don't make reachability test\n        if (!upload_url) {\n            this.preflightSuccessHandler({ data });\n            return;\n        }\n\n        const uploadHost = this.getUploadHostFromUrl(upload_url);\n        // The default upload host should always be reachable\n        // DEFAULT_HOSTNAME_UPLOAD is the original default upload host, while DEFAULT_HOSTNAME_UPLOAD_APP is recent.\n        // Both of these hosts will resolve to the same IP so they are interchangeable.\n        if (\n            uploadHost === `${DEFAULT_HOSTNAME_UPLOAD}/` ||\n            uploadHost === `${DEFAULT_HOSTNAME_UPLOAD_APP}/` ||\n            uploadHost === `${DEFAULT_HOSTNAME_UPLOAD_GOV}/`\n        ) {\n            this.preflightSuccessHandler({ data });\n            return;\n        }\n\n        // If upload host reachable upload file, else make a new preflight request\n        const isHostReachable = await this.uploadsReachability.isReachable(uploadHost);\n        if (isHostReachable) {\n            this.preflightSuccessHandler({ data });\n        } else if (this.reachabilityRetryCount >= MAX_REACHABILITY_RETRY) {\n            this.preflightSuccessHandler({ data: {} });\n        } else {\n            this.reachabilityRetryCount += 1;\n            this.makePreflightRequest();\n        }\n    };\n\n    /**\n     * Handles a preflight error\n     *\n     * @param {Object} error - preflight error\n     * @return {void}\n     */\n    preflightErrorHandler = (error: any): void => {\n        if (this.isDestroyed()) {\n            return;\n        }\n\n        this.fileName = this.file ? this.file.name : '';\n\n        // TODO: Normalize error object and clean up error handling\n        let errorData = error;\n        const { response } = error;\n        if (response && response.data) {\n            errorData = response.data;\n        }\n\n        if (this.retryCount >= MAX_RETRY) {\n            this.errorCallback(errorData);\n            // Automatically handle name conflict errors\n        } else if (errorData && errorData.status === 409) {\n            if (this.overwrite === 'error') {\n                this.errorCallback(errorData);\n                return;\n            }\n            if (this.overwrite) {\n                // Error response contains file ID to upload a new file version for\n                const conflictFileId = errorData.context_info.conflicts.id;\n                if (!this.fileId && !!conflictFileId) {\n                    this.fileId = conflictFileId;\n                }\n            } else if (this.conflictCallback) {\n                // conflictCallback handler for setting new file name\n                this.fileName = this.conflictCallback(this.fileName);\n            } else {\n                // Otherwise, reupload and append timestamp\n                // 'test.jpg' becomes 'test-TIMESTAMP.jpg'\n                const extension = this.fileName.substr(this.fileName.lastIndexOf('.')) || '';\n                this.fileName = `${this.fileName.substr(0, this.fileName.lastIndexOf('.'))}-${Date.now()}${extension}`;\n            }\n            this.makePreflightRequest();\n            this.retryCount += 1;\n\n            // When rate limited, retry after interval defined in header\n        } else if (errorData && (errorData.status === 429 || errorData.code === 'too_many_requests')) {\n            let retryAfterMs = DEFAULT_RETRY_DELAY_MS;\n\n            if (errorData.headers) {\n                const retryAfterSec = parseInt(\n                    errorData.headers['retry-after'] || errorData.headers.get('Retry-After'),\n                    10,\n                );\n\n                if (!Number.isNaN(retryAfterSec)) {\n                    retryAfterMs = retryAfterSec * MS_IN_S;\n                }\n            }\n\n            this.retryTimeout = setTimeout(this.makePreflightRequest, retryAfterMs);\n            this.retryCount += 1;\n\n            // If another error status that isn't name conflict or rate limiting, fail upload\n        } else if (\n            errorData &&\n            (errorData.status || errorData.message === 'Failed to fetch') &&\n            typeof this.errorCallback === 'function'\n        ) {\n            this.errorCallback(errorData);\n            // Retry with exponential backoff for other failures since these are likely to be network errors\n        } else {\n            this.retryTimeout = setTimeout(this.makePreflightRequest, 2 ** this.retryCount * MS_IN_S);\n            this.retryCount += 1;\n        }\n    };\n\n    /**\n     * Read a blob with FileReader\n     *\n     * @param {FileReader} reader\n     * @param {Blob} blob\n     * @return {Promise}\n     */\n    readFile(reader: FileReader, blob: Blob): Promise<any> {\n        return new Promise((resolve, reject) => {\n            reader.readAsArrayBuffer(blob);\n            reader.onload = () => {\n                resolve({\n                    buffer: reader.result,\n                    readCompleteTimestamp: Date.now(),\n                });\n            };\n\n            reader.onerror = reject;\n        });\n    }\n\n    /**\n     * Parse uploadHost from uploadUrl\n     *\n     * @param uploadUrl - uploadUrl from preflight response\n     * @return {string}\n     */\n    getUploadHostFromUrl(uploadUrl: string): string {\n        const splitUrl = uploadUrl.split('/');\n        const uploadHost = `${splitUrl[0]}//${splitUrl[2]}/`;\n        return uploadHost;\n    }\n}\n\nexport default BaseUpload;\n"],"mappings":"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","ignoreList":[]}