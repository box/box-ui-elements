{"version":3,"file":"BaseMultiput.js","names":["BaseUpload","DEFAULT_MULTIPUT_CONFIG","digestReadahead","initialRetryDelayMs","maxRetryDelayMs","parallelism","requestTimeoutMs","retries","BaseMultiput","constructor","options","sessionEndpoints","config","_objectSpread","shouldRetry","_defineProperty","eventType","eventInfo","data","event_type","event_info","xhr","post","url","logEvent"],"sources":["../../../src/api/uploads/BaseMultiput.js"],"sourcesContent":["/**\n * @flow\n * @file Multiput upload base class\n * @author Box\n */\nimport BaseUpload from './BaseUpload';\nimport type { MultiputConfig } from '../../common/types/upload';\nimport type { APIOptions } from '../../common/types/api';\n\nconst DEFAULT_MULTIPUT_CONFIG: MultiputConfig = {\n    digestReadahead: 5, // How many parts past those currently uploading to precompute digest for\n    initialRetryDelayMs: 5000, // Base for exponential backoff on retries\n    maxRetryDelayMs: 60000, // Upper bound for time between retries\n    parallelism: 4, // Maximum number of parts to upload at a time\n    requestTimeoutMs: 120000, // Idle timeout on part upload, overall request timeout on other requests\n    retries: 5, // How many times to retry requests such as upload part or commit. Note that total number of attempts will be retries + 1 in worst case where all attempts fail.\n};\n\nclass BaseMultiput extends BaseUpload {\n    config: MultiputConfig;\n\n    sessionEndpoints: Object;\n\n    /**\n     * [constructor]\n     *\n     * @param {Options} options\n     * @param {Object} sessionEndpoints\n     * @param {MultiputConfig} [config]\n     * @return {void}\n     */\n    constructor(options: APIOptions, sessionEndpoints: Object, config?: MultiputConfig): void {\n        super({\n            ...options,\n            shouldRetry: false, // disable XHR retries as there is already retry logic\n        });\n\n        this.config = config || DEFAULT_MULTIPUT_CONFIG;\n        this.sessionEndpoints = sessionEndpoints;\n    }\n\n    /**\n     * POST log event\n     *\n     * @param {string} eventType\n     * @param {string} [eventInfo]\n     * @return {Promise}\n     */\n    logEvent = (eventType: string, eventInfo?: string) => {\n        const data: {\n            event_info?: string,\n            event_type: string,\n        } = {\n            event_type: eventType,\n        };\n\n        if (eventInfo) {\n            data.event_info = eventInfo;\n        }\n\n        return this.xhr.post({\n            url: this.sessionEndpoints.logEvent,\n            data,\n        });\n    };\n}\n\nexport default BaseMultiput;\n"],"mappings":";;;;;AAAA;AACA;AACA;AACA;AACA;AACA,OAAOA,UAAU,MAAM,cAAc;AAIrC,MAAMC,uBAAuC,GAAG;EAC5CC,eAAe,EAAE,CAAC;EAAE;EACpBC,mBAAmB,EAAE,IAAI;EAAE;EAC3BC,eAAe,EAAE,KAAK;EAAE;EACxBC,WAAW,EAAE,CAAC;EAAE;EAChBC,gBAAgB,EAAE,MAAM;EAAE;EAC1BC,OAAO,EAAE,CAAC,CAAE;AAChB,CAAC;AAED,MAAMC,YAAY,SAASR,UAAU,CAAC;EAKlC;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACIS,WAAWA,CAACC,OAAmB,EAAEC,gBAAwB,EAAEC,MAAuB,EAAQ;IACtF,KAAK,CAAAC,aAAA,CAAAA,aAAA,KACEH,OAAO;MACVI,WAAW,EAAE,KAAK,CAAE;IAAA,EACvB,CAAC;IAMN;AACJ;AACA;AACA;AACA;AACA;AACA;IANIC,eAAA,mBAOW,CAACC,SAAiB,EAAEC,SAAkB,KAAK;MAClD,MAAMC,IAGL,GAAG;QACAC,UAAU,EAAEH;MAChB,CAAC;MAED,IAAIC,SAAS,EAAE;QACXC,IAAI,CAACE,UAAU,GAAGH,SAAS;MAC/B;MAEA,OAAO,IAAI,CAACI,GAAG,CAACC,IAAI,CAAC;QACjBC,GAAG,EAAE,IAAI,CAACZ,gBAAgB,CAACa,QAAQ;QACnCN;MACJ,CAAC,CAAC;IACN,CAAC;IA3BG,IAAI,CAACN,MAAM,GAAGA,MAAM,IAAIX,uBAAuB;IAC/C,IAAI,CAACU,gBAAgB,GAAGA,gBAAgB;EAC5C;AA0BJ;AAEA,eAAeH,YAAY","ignoreList":[]}