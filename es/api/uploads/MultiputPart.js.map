{"version":3,"file":"MultiputPart.js","names":["noop","getProp","updateQueryParameters","getBoundedExpBackoffRetryDelay","retryNumOfTimes","BaseMultiput","HTTP_PUT","PART_STATE_NOT_STARTED","PART_STATE_DIGEST_READY","PART_STATE_UPLOADING","PART_STATE_UPLOADED","MultiputPart","constructor","options","index","offset","partSize","fileSize","sessionId","sessionEndpoints","config","getNumPartsUploading","onSuccess","onProgress","onError","_defineProperty","JSON","stringify","state","uploadedBytes","numUploadRetriesPerformed","numDigestRetriesPerformed","sha1","timing","data","part","isDestroyedOrPaused","Error","blob","clientEventInfo","documentHidden","document","hidden","digest_retries","parts_uploading","headers","Digest","rangeEnd","startTimestamp","Date","now","xhr","uploadFile","url","uploadPart","method","successHandler","uploadSuccessHandler","errorHandler","uploadErrorHandler","progressHandler","uploadProgressHandler","withIdleTimeout","idleTimeoutDuration","requestTimeoutMs","consoleLog","toJSON","uploadTime","event","newUploadedBytes","parseInt","loaded","prevUploadedBytes","error","xhr_ready_state","xhr_status_text","message","eventInfo","id","eventInfoString","logEvent","resolve","reject","then","catch","retries","initialRetryDelayMs","e","retryDelayMs","maxRetryDelayMs","retryTimeout","setTimeout","retryUpload","parts","listParts","length","part_id","response","status","upload","partIndex","limit","params","endpoint","get","entries","isPaused","cancel","clearTimeout","destroy","pause","abort","unpause","reset","isDestroyed"],"sources":["../../../src/api/uploads/MultiputPart.js"],"sourcesContent":["/**\n * @flow\n * @file Multiput upload part\n * @author Box\n */\nimport noop from 'lodash/noop';\nimport getProp from 'lodash/get';\nimport { updateQueryParameters } from '../../utils/url';\nimport { getBoundedExpBackoffRetryDelay } from '../../utils/uploads';\nimport { retryNumOfTimes } from '../../utils/function';\n\nimport BaseMultiput from './BaseMultiput';\n\nimport { HTTP_PUT } from '../../constants';\n\nimport type { MultiputConfig, MultiputData } from '../../common/types/upload';\nimport type { APIOptions } from '../../common/types/api';\n\nconst PART_STATE_NOT_STARTED: 0 = 0;\nconst PART_STATE_DIGEST_READY: 1 = 1;\nconst PART_STATE_UPLOADING: 2 = 2;\nconst PART_STATE_UPLOADED: 3 = 3;\n\nclass MultiputPart extends BaseMultiput {\n    index: number;\n\n    numDigestRetriesPerformed: number;\n\n    numUploadRetriesPerformed: number;\n\n    offset: number;\n\n    sha1: string;\n\n    partSize: number;\n\n    state:\n        | typeof PART_STATE_NOT_STARTED\n        | typeof PART_STATE_DIGEST_READY\n        | typeof PART_STATE_UPLOADING\n        | typeof PART_STATE_UPLOADED;\n\n    timing: Object;\n\n    uploadedBytes: number;\n\n    onProgress: Function;\n\n    onSuccess: Function;\n\n    onError: Function;\n\n    data: MultiputData;\n\n    config: MultiputConfig;\n\n    id: string;\n\n    retryTimeout: TimeoutID;\n\n    blob: ?Blob;\n\n    rangeEnd: number;\n\n    startTimestamp: number;\n\n    getNumPartsUploading: Function;\n\n    fileSize: number;\n\n    isPaused: boolean; // For resumable uploads.  When an error happens, all parts for an upload get paused.  This\n    // is not a separate state because a paused upload transitions to the DIGEST_READY state immediately\n    // so MultiputUpload can upload the part again.\n\n    /**\n     * [constructor]\n     *\n     * @param {Options} options\n     * @param {number} index - 0-based index of this part in array of all parts\n     * @param {number} offset - Starting byte offset of this part's range\n     * @param {number} partSize - Size of this part in bytes\n     * @param {number} sessionId\n     * @param {Object} sessionEndpoints\n     * @param {MultiputConfig} config\n     * @param {Function} getNumPartsUploading\n     * @param {Function} [onSuccess]\n     * @param {Function} [onProgress]\n     * @param {Function} [onError]\n     * @return {void}\n     */\n    constructor(\n        options: APIOptions,\n        index: number,\n        offset: number,\n        partSize: number,\n        fileSize: number,\n        sessionId: string,\n        sessionEndpoints: Object,\n        config: MultiputConfig,\n        getNumPartsUploading: Function,\n        onSuccess?: Function,\n        onProgress?: Function,\n        onError?: Function,\n    ): void {\n        super(options, sessionEndpoints, config);\n\n        this.index = index;\n        this.numDigestRetriesPerformed = 0;\n        this.numUploadRetriesPerformed = 0;\n        this.offset = offset;\n        this.partSize = partSize;\n        this.fileSize = fileSize;\n        this.state = PART_STATE_NOT_STARTED;\n        this.timing = {};\n        this.uploadedBytes = 0;\n        this.data = {};\n        this.config = config;\n        this.rangeEnd = offset + partSize - 1;\n        if (this.rangeEnd > fileSize - 1) {\n            this.rangeEnd = fileSize - 1;\n        }\n        this.isPaused = false;\n\n        this.onSuccess = onSuccess || noop;\n        this.onError = onError || noop;\n        this.onProgress = onProgress || noop;\n        this.getNumPartsUploading = getNumPartsUploading;\n    }\n\n    toJSON = () =>\n        JSON.stringify({\n            index: this.index,\n            offset: this.offset,\n            partSize: this.partSize,\n            state: this.state,\n            uploadedBytes: this.uploadedBytes,\n            numUploadRetriesPerformed: this.numUploadRetriesPerformed,\n            numDigestRetriesPerformed: this.numDigestRetriesPerformed,\n            sha1: this.sha1,\n            timing: this.timing,\n        });\n\n    /**\n     * Returns file part information from the server after part upload is successful\n     *\n     * @return {Object}\n     */\n    getPart = (): Object => this.data.part || {};\n\n    /**\n     * Uploads this Part via the API. Will retry on network failures.\n     *\n     * @return {void}\n     */\n    upload = (): void => {\n        if (this.isDestroyedOrPaused()) {\n            return;\n        }\n\n        if (!this.sha1) {\n            throw new Error('Part SHA-1 unavailable');\n        }\n\n        if (!this.blob) {\n            throw new Error('Part blob unavailable');\n        }\n\n        const clientEventInfo = {\n            documentHidden: document.hidden,\n            digest_retries: this.numDigestRetriesPerformed,\n            timing: this.timing,\n            parts_uploading: this.getNumPartsUploading(),\n        };\n\n        const headers = {\n            'Content-Type': 'application/octet-stream',\n            Digest: `sha=${this.sha1}`,\n            'Content-Range': `bytes ${this.offset}-${this.rangeEnd}/${this.fileSize}`,\n            'X-Box-Client-Event-Info': JSON.stringify(clientEventInfo),\n        };\n\n        this.state = PART_STATE_UPLOADING;\n\n        this.startTimestamp = Date.now();\n        this.xhr.uploadFile({\n            url: this.sessionEndpoints.uploadPart,\n            data: this.blob,\n            headers,\n            method: HTTP_PUT,\n            successHandler: this.uploadSuccessHandler,\n            errorHandler: this.uploadErrorHandler,\n            progressHandler: this.uploadProgressHandler,\n            withIdleTimeout: true,\n            idleTimeoutDuration: this.config.requestTimeoutMs,\n        });\n    };\n\n    /**\n     * Handler for upload part success\n     *\n     * @param {Object} data\n     * @return {void}\n     */\n    uploadSuccessHandler = ({ data }: { data: Object }) => {\n        if (this.isDestroyedOrPaused()) {\n            return;\n        }\n\n        this.state = PART_STATE_UPLOADED;\n        this.consoleLog(`Upload completed: ${this.toJSON()}.`);\n        this.data = data;\n        this.blob = null;\n        this.timing.uploadTime = Date.now() - this.startTimestamp;\n\n        this.onSuccess(this);\n\n        this.uploadedBytes = this.partSize;\n    };\n\n    /**\n     * Handler for upload part progress event\n     *\n     * @param {ProgressEvent} data\n     * @return {void}\n     */\n    uploadProgressHandler = (event: ProgressEvent) => {\n        if (this.isDestroyedOrPaused()) {\n            return;\n        }\n\n        const newUploadedBytes = parseInt(event.loaded, 10);\n        const prevUploadedBytes = this.uploadedBytes;\n        this.uploadedBytes = newUploadedBytes;\n\n        this.onProgress(prevUploadedBytes, newUploadedBytes);\n    };\n\n    /**\n     * Handler for upload part error\n     *\n     * @param {Error} error\n     * @return {void}\n     */\n    uploadErrorHandler = async (error: Error) => {\n        if (this.isDestroyedOrPaused()) {\n            // Ignore abort() error by checking this.isPaused\n            return;\n        }\n\n        const xhr_ready_state = getProp(this.xhr, 'xhr.readyState', null);\n        const xhr_status_text = getProp(this.xhr, 'xhr.statusText', '');\n\n        this.consoleLog(`Upload failure ${error.message} for part ${this.toJSON()}. XHR state: ${xhr_ready_state}.`);\n\n        const eventInfo = {\n            message: error.message,\n            part: {\n                uploadedBytes: this.uploadedBytes,\n                id: this.id,\n                index: this.index,\n                offset: this.offset,\n            },\n            xhr_ready_state,\n            xhr_status_text,\n        };\n\n        const eventInfoString = JSON.stringify(eventInfo);\n\n        if (this.sessionEndpoints.logEvent) {\n            retryNumOfTimes(\n                (resolve: Function, reject: Function): void => {\n                    this.logEvent('part_failure', eventInfoString)\n                        .then(resolve)\n                        .catch(reject);\n                },\n                this.config.retries,\n                this.config.initialRetryDelayMs,\n            ).catch(e => this.consoleLog(`Failure in logEvent: ${e.message}`));\n        } else {\n            this.consoleLog('logEvent endpoint not found');\n        }\n\n        if (this.numUploadRetriesPerformed >= this.config.retries) {\n            this.onError(error, eventInfoString);\n            return;\n        }\n\n        const retryDelayMs = getBoundedExpBackoffRetryDelay(\n            this.config.initialRetryDelayMs,\n            this.config.maxRetryDelayMs,\n            this.numUploadRetriesPerformed,\n        );\n\n        this.numUploadRetriesPerformed += 1;\n        this.consoleLog(`Retrying uploading part ${this.toJSON()} in ${retryDelayMs} ms`);\n        this.retryTimeout = setTimeout(this.retryUpload, retryDelayMs);\n    };\n\n    /**\n     * Retry uploading part\n     *\n     * @return {Promise}\n     */\n    retryUpload = async (): Promise<any> => {\n        if (this.isDestroyedOrPaused()) {\n            return;\n        }\n\n        try {\n            const parts = await this.listParts(this.index, 1);\n\n            if (parts && parts.length === 1 && parts[0].offset === this.offset && parts[0].part_id) {\n                this.consoleLog(`Part ${this.toJSON()} is available on server. Not re-uploading.`);\n                this.id = parts[0].part_id;\n                this.uploadSuccessHandler({\n                    data: {\n                        part: parts[0],\n                    },\n                });\n                return;\n            }\n\n            this.consoleLog(`Part ${this.toJSON()} is not available on server. Re-uploading.`);\n            throw new Error('Part not found on the server');\n        } catch (error) {\n            const { response } = error;\n            if (response && response.status) {\n                this.consoleLog(`Error ${response.status} while listing part ${this.toJSON()}. Re-uploading.`);\n            }\n\n            this.numUploadRetriesPerformed += 1;\n            this.upload();\n        }\n    };\n\n    /**\n     * Cancels upload for this Part.\n     *\n     * @return {void}\n     */\n    cancel(): void {\n        clearTimeout(this.retryTimeout);\n        this.blob = null;\n        this.data = {};\n        this.destroy();\n    }\n\n    /**\n     * Pauses upload for this Part.\n     *\n     * @return {void}\n     */\n    pause(): void {\n        clearTimeout(this.retryTimeout); // Cancel timeout so that we don't keep retrying while paused\n        this.isPaused = true;\n        this.state = PART_STATE_DIGEST_READY;\n        this.xhr.abort(); //  This calls the error handler.\n    }\n\n    /**\n     * Unpauses upload for this Part.\n     *\n     * @return {void}\n     */\n    unpause(): void {\n        this.isPaused = false;\n        this.state = PART_STATE_UPLOADING;\n        this.retryUpload();\n    }\n\n    /**\n     * Resets upload for this Part.\n     *\n     * @return {void}\n     */\n    reset(): void {\n        this.numUploadRetriesPerformed = 0;\n        this.timing = {};\n        this.uploadedBytes = 0;\n    }\n\n    /**\n     * Checks if this Part is destroyed or paused\n     *\n     * @return {boolean}\n     */\n    isDestroyedOrPaused(): boolean {\n        return this.isDestroyed() || this.isPaused;\n    }\n\n    /**\n     * List specified parts\n     *\n     * @param {number} partIndex - Index of starting part. Optional.\n     * @param {number} limit - Number of parts to be listed. Optional.\n     * @return {Promise<Array<Object>>} Array of parts\n     */\n    listParts = async (partIndex: number, limit: number): Promise<Array<Object>> => {\n        const params = {\n            offset: partIndex,\n            limit,\n        };\n\n        const endpoint = updateQueryParameters(this.sessionEndpoints.listParts, params);\n        const response = await this.xhr.get({\n            url: endpoint,\n        });\n\n        return response.data.entries;\n    };\n}\n\nexport default MultiputPart;\nexport { PART_STATE_NOT_STARTED, PART_STATE_DIGEST_READY, PART_STATE_UPLOADING, PART_STATE_UPLOADED };\n"],"mappings":"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","ignoreList":[]}