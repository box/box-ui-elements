{"version":3,"file":"UploadsReachability.js","names":["axios","LocalStore","DEFAULT_HOSTNAME_UPLOAD","DEFAULT_HOSTNAME_UPLOAD_APP","HEADER_CONTENT_TYPE","CACHED_RESULTS_LOCAL_STORE_KEY","UploadsReachability","constructor","localStore","cachedResults","populateCachedResultsWithValidLocalStoreValues","saveCachedResultsToLocalStore","getCachedResultsFromLocalStore","getItem","setItem","isCachedHostValid","result","expirationTimestampMS","Date","now","getCachedResult","uploadHost","updateCachedResult","isHostReachable","isReachable","localStoreResults","Object","keys","forEach","getUnreachableHostsUrls","unreachableHosts","value","push","cachedResult","makeReachabilityRequest","url","headers","data","post","error"],"sources":["../../../src/api/uploads/UploadsReachability.js"],"sourcesContent":["/**\n * @flow\n * @file Helper for Box uploads reachability test\n * @author Box\n */\n\nimport axios from 'axios';\nimport LocalStore from '../../utils/LocalStore';\nimport { DEFAULT_HOSTNAME_UPLOAD, DEFAULT_HOSTNAME_UPLOAD_APP, HEADER_CONTENT_TYPE } from '../../constants';\nimport type { StringAnyMap, StringMixedMap } from '../../common/types/core';\n\nconst CACHED_RESULTS_LOCAL_STORE_KEY = 'bcu-uploads-reachability-cached-results';\n\ntype CachedResult = {\n    expirationTimestampMS: number,\n    isReachable: boolean,\n};\n\nclass UploadsReachability {\n    localStore: LocalStore;\n\n    cachedResults: { string: CachedResult };\n\n    /**\n     * [constructor]\n     */\n    constructor() {\n        this.localStore = new LocalStore();\n        this.cachedResults = {};\n\n        // Populate cachedResults with valid values from the local store, and then save the new\n        // cachedResults back to local store.\n        // This cleanup of invalid entries is not strictly necessary to maintain correctness,\n        // but if we don't do this cleanup results may accumulate in local storage forever.\n        this.populateCachedResultsWithValidLocalStoreValues();\n        this.saveCachedResultsToLocalStore();\n    }\n\n    /**\n     * Returns existing reachability results from local store\n     *\n     * @private\n     * @return {?Object} The results, or null if there was a problem reading the value from local store\n     */\n    getCachedResultsFromLocalStore() {\n        return this.localStore.getItem(CACHED_RESULTS_LOCAL_STORE_KEY);\n    }\n\n    /**\n     * Saves the cachedResults variable as a JSON string in local store.\n     *\n     * @private\n     * @return {void}\n     */\n    saveCachedResultsToLocalStore() {\n        this.localStore.setItem(CACHED_RESULTS_LOCAL_STORE_KEY, this.cachedResults);\n    }\n\n    /**\n     * Returns true if the given cached result is still valid (i.e. it has not expired yet)\n     *\n     * @private\n     * @param {StringAnyMap} result - A result object for one host\n     * @return {boolean} Whether or not the result is valid\n     */\n    isCachedHostValid(result: StringAnyMap) {\n        return result.expirationTimestampMS > Date.now();\n    }\n\n    /**\n     * Returns the cached result for the given uploadHost\n     *\n     * @private\n     * @param {string} uploadHost - The host URL\n     * @return {null|StringAnyMap} The result object or null if there isn't one\n     */\n    getCachedResult(uploadHost: string) {\n        if (uploadHost in this.cachedResults) {\n            const result = this.cachedResults[uploadHost];\n            if (this.isCachedHostValid(result)) {\n                return result;\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * Updates a cached result. Changes both the in-memory cachedResult variable and what's stored in local store\n     *\n     * @private\n     * @param {string} uploadHost - The host URL that was tested\n     * @param {boolean} isHostReachable - Whether or not the host was reachable\n     * @return {void}\n     */\n    updateCachedResult(uploadHost: string, isHostReachable: boolean) {\n        this.cachedResults[uploadHost] = {\n            isReachable: isHostReachable,\n            expirationTimestampMS: Date.now() + 1000 * 86400,\n        };\n        this.saveCachedResultsToLocalStore();\n    }\n\n    /**\n     * Adds to the cachedResults object with valid entries from local storage\n     *\n     * @private\n     * @return {void}\n     */\n    populateCachedResultsWithValidLocalStoreValues() {\n        const localStoreResults = this.getCachedResultsFromLocalStore();\n        if (!localStoreResults) {\n            return;\n        }\n\n        Object.keys(localStoreResults).forEach(uploadHost => {\n            const result = localStoreResults[uploadHost];\n            if (this.isCachedHostValid(result)) {\n                this.cachedResults[uploadHost] = result;\n            }\n        });\n    }\n\n    /**\n     * Returns the host URLs that, according to the cached reachability test results, are unreachable\n     *\n     * @return {Array} The unreachable host URLs\n     */\n    getUnreachableHostsUrls() {\n        const unreachableHosts = [];\n        if (!this.cachedResults) {\n            return unreachableHosts;\n        }\n\n        Object.keys(this.cachedResults).forEach(uploadHost => {\n            const value = this.cachedResults[uploadHost];\n            if (this.isCachedHostValid(value) && !value.isReachable) {\n                unreachableHosts.push(uploadHost);\n            }\n        });\n\n        return unreachableHosts;\n    }\n\n    /**\n     * Determines whether the given host is reachable by either making a test request to the uploadHost\n     * or returning the result of the last reachability test it did\n     *\n     * @param {string} uploadHost - The upload host URL that will be stored in the cached test result and returned in\n     * getUnreachableHostsUrls() if test fails (this is usually a prefix of the uploadUrl)\n     * @return {Promise<boolean>} Promise that resolved to true if the host is reachable, false if it is not\n     */\n    async isReachable(uploadHost: string) {\n        // The default upload host should always reachable\n        if (uploadHost === `${DEFAULT_HOSTNAME_UPLOAD}/` || uploadHost === `${DEFAULT_HOSTNAME_UPLOAD_APP}/`) {\n            return true;\n        }\n\n        const cachedResult = this.getCachedResult(uploadHost);\n        if (cachedResult) {\n            return cachedResult.isReachable;\n        }\n\n        const isHostReachable = await this.makeReachabilityRequest(uploadHost);\n        this.updateCachedResult(uploadHost, isHostReachable);\n        return isHostReachable;\n    }\n\n    /**\n     * Determines if the given uploadHost is reachable by making a test upload request to it.\n     * Does not read or modify any cached results.\n     *\n     * @param {string} uploadHost - The upload host url to make a test request against\n     * @return {Promise<boolean>}\n     */\n    async makeReachabilityRequest(uploadHost: string) {\n        const url = `${uploadHost}html5?reachability_test=run`;\n        const headers: StringMixedMap = {\n            [HEADER_CONTENT_TYPE]: 'application/x-www-form-urlencoded; charset=UTF-8',\n            'X-File-Name': 'reachability_pseudofile.txt',\n            'X-File-Size': '1234',\n        };\n        const data = 'reachability_file=test_file_data';\n\n        try {\n            await axios.post(url, data, { headers });\n        } catch (error) {\n            return false;\n        }\n\n        return true;\n    }\n}\n\nexport default UploadsReachability;\n"],"mappings":"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","ignoreList":[]}