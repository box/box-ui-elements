{"version":3,"file":"Folder.js","names":["noop","flatten","FOLDER_FIELDS_TO_FETCH","getBadItemError","Item","FileAPI","WebLinkAPI","CACHE_PREFIX_FOLDER","ERROR_CODE_FETCH_FOLDER","ERROR_CODE_CREATE_FOLDER","FIELD_REPRESENTATIONS","X_REP_HINT_HEADER_DIMENSIONS_DEFAULT","Folder","constructor","args","_defineProperty","data","isDestroyed","item_collection","entries","total_count","limit","offset","Array","isArray","flattened","options","itemCache","concat","getCache","set","key","_objectSpread","finish","cachedEntry","get","updatedCacheEntry","successCallback","id","childId","childKey","getCacheKey","cache","parent","getUrl","suffix","getBaseApiUrl","isLoaded","has","folder","name","permissions","path_collection","collection","percentLoaded","boxItem","breadcrumbs","items","map","sortBy","sortDirection","totalCount","folderRequest","fields","noPagination","successHandler","folderSuccessHandler","Promise","reject","requestFields","errorCode","params","toString","direction","toLowerCase","sort","xhr","url","headers","includes","then","catch","errorHandler","getFolderFields","errorCallback","folderDetailsSuccessHandler","getFolder","forceFetch","unset","folderCreateRequest","post","createSuccessHandler","create"],"sources":["../../src/api/Folder.js"],"sourcesContent":["/**\n * @flow\n * @file Helper for the box folder api\n * @author Box\n */\n\nimport noop from 'lodash/noop';\nimport flatten from '../utils/flatten';\nimport { FOLDER_FIELDS_TO_FETCH } from '../utils/fields';\nimport { getBadItemError } from '../utils/error';\nimport Item from './Item';\nimport FileAPI from './File';\nimport WebLinkAPI from './WebLink';\nimport {\n    CACHE_PREFIX_FOLDER,\n    ERROR_CODE_FETCH_FOLDER,\n    ERROR_CODE_CREATE_FOLDER,\n    FIELD_REPRESENTATIONS,\n    X_REP_HINT_HEADER_DIMENSIONS_DEFAULT,\n} from '../constants';\nimport type { RequestOptions, ElementsErrorCallback } from '../common/types/api';\nimport type {\n    SortBy,\n    SortDirection,\n    FlattenedBoxItem,\n    FlattenedBoxItemCollection,\n    Collection,\n    BoxItem,\n    BoxItemCollection,\n} from '../common/types/core';\nimport type APICache from '../utils/Cache';\n\nclass Folder extends Item {\n    /**\n     * @property {string}\n     */\n    id: string;\n\n    /**\n     * @property {string}\n     */\n    key: string;\n\n    /**\n     * @property {number}\n     */\n    limit: number;\n\n    /**\n     * @property {number}\n     */\n    offset: number;\n\n    /**\n     * @property {string}\n     */\n    sortBy: SortBy;\n\n    /**\n     * @property {string}\n     */\n    sortDirection: SortDirection;\n\n    /**\n     * @property {Array}\n     */\n    itemCache: string[];\n\n    /**\n     * @property {Function}\n     */\n    successCallback: Function;\n\n    /**\n     * @property {Function}\n     */\n    errorCallback: ElementsErrorCallback;\n\n    /**\n     * Creates a key for the cache\n     *\n     * @param {string} id folder id\n     * @return {string} key\n     */\n    getCacheKey(id: string): string {\n        return `${CACHE_PREFIX_FOLDER}${id}`;\n    }\n\n    /**\n     * Base URL for folder api\n     *\n     * @param {string} [id] optional file id\n     * @return {string} base url for files\n     */\n    getUrl(id?: string): string {\n        const suffix: string = id ? `/${id}` : '';\n        return `${this.getBaseApiUrl()}/folders${suffix}`;\n    }\n\n    /**\n     * Tells if a folder has its items all loaded\n     *\n     * @return {boolean} if items are loaded\n     */\n    isLoaded(): boolean {\n        const cache: APICache = this.getCache();\n        return cache.has(this.key);\n    }\n\n    /**\n     * Composes and returns the results\n     *\n     * @return {void}\n     */\n    finish(): void {\n        if (this.isDestroyed()) {\n            return;\n        }\n\n        const cache: APICache = this.getCache();\n        const folder: FlattenedBoxItem = cache.get(this.key);\n        const { id, name, permissions, path_collection, item_collection }: FlattenedBoxItem = folder;\n        if (!item_collection || !path_collection) {\n            throw getBadItemError();\n        }\n\n        const { entries, offset, total_count }: FlattenedBoxItemCollection = item_collection;\n        if (!Array.isArray(entries) || typeof total_count !== 'number') {\n            throw getBadItemError();\n        }\n\n        const collection: Collection = {\n            id,\n            name,\n            offset,\n            percentLoaded: 100,\n            permissions,\n            boxItem: folder,\n            breadcrumbs: path_collection.entries,\n            items: entries.map((key: string) => cache.get(key)),\n            sortBy: this.sortBy,\n            sortDirection: this.sortDirection,\n            totalCount: total_count,\n        };\n        this.successCallback(collection);\n    }\n\n    /**\n     * Handles the folder fetch response\n     *\n     * @param {Object} response\n     * @return {void}\n     */\n    folderSuccessHandler = ({ data }: { data: BoxItem }): void => {\n        if (this.isDestroyed()) {\n            return;\n        }\n\n        const { item_collection }: BoxItem = data;\n        if (!item_collection) {\n            throw getBadItemError();\n        }\n\n        const { entries, total_count, limit, offset }: BoxItemCollection = item_collection;\n        if (\n            !Array.isArray(entries) ||\n            typeof total_count !== 'number' ||\n            typeof limit !== 'number' ||\n            typeof offset !== 'number'\n        ) {\n            throw getBadItemError();\n        }\n\n        const flattened: string[] = flatten(\n            entries,\n            new Folder(this.options),\n            new FileAPI(this.options),\n            new WebLinkAPI(this.options),\n        );\n        this.itemCache = (this.itemCache || []).concat(flattened);\n\n        this.getCache().set(this.key, {\n            ...data,\n            item_collection: { ...item_collection, entries: this.itemCache },\n        });\n\n        this.finish();\n    };\n\n    /**\n     * Handles a request for folder details\n     *\n     * @param {Object} data - XHR response data\n     * @returns {void}\n     */\n    folderDetailsSuccessHandler = ({ data }: { data: BoxItem }): void => {\n        if (this.isDestroyed()) {\n            return;\n        }\n\n        const cachedEntry = this.getCache().get(this.key);\n        const updatedCacheEntry = { ...cachedEntry, ...data };\n\n        this.getCache().set(this.key, updatedCacheEntry);\n        this.successCallback(updatedCacheEntry);\n    };\n\n    /**\n     * Does the network request for fetching a folder\n     *\n     * @param {Array<string>|void} fields - Optionally include specific fields\n     * @return {Promise}\n     */\n    folderRequest(\n        { fields, noPagination }: RequestOptions = {},\n        successHandler?: Function = this.folderSuccessHandler,\n    ): Promise<any> {\n        if (this.isDestroyed()) {\n            return Promise.reject();\n        }\n\n        const requestFields = fields || FOLDER_FIELDS_TO_FETCH;\n\n        this.errorCode = ERROR_CODE_FETCH_FOLDER;\n        let params = { fields: requestFields.toString() };\n        if (!noPagination) {\n            params = {\n                ...params,\n                direction: this.sortDirection.toLowerCase(),\n                limit: this.limit,\n                offset: this.offset,\n                fields: requestFields.toString(),\n                sort: this.sortBy.toLowerCase(),\n            };\n        }\n\n        return this.xhr\n            .get({\n                url: this.getUrl(this.id),\n                params,\n                headers: requestFields.includes(FIELD_REPRESENTATIONS)\n                    ? {\n                          'X-Rep-Hints': X_REP_HINT_HEADER_DIMENSIONS_DEFAULT,\n                      }\n                    : {},\n            })\n            .then(successHandler)\n            .catch(this.errorHandler);\n    }\n\n    /**\n     * Gets a box folder properties. If you want to get the items, you should use `getFolder`\n     *\n     * @param {string} id - Folder id\n     * @param {Function} successCallback - Function to call with results\n     * @param {Function} errorCallback - Function to call with errors\n     * @param {Object} options - Options\n     * @returns {void}\n     */\n    getFolderFields(\n        id: string,\n        successCallback: Function,\n        errorCallback: Function,\n        options: RequestOptions = {},\n    ): void {\n        if (this.isDestroyed()) {\n            return;\n        }\n\n        // Save references\n        this.id = id;\n        this.key = this.getCacheKey(id);\n        this.successCallback = successCallback;\n        this.errorCallback = errorCallback;\n\n        this.folderRequest({ ...options, noPagination: true }, this.folderDetailsSuccessHandler);\n    }\n\n    /**\n     * Gets a box folder and its items\n     *\n     * @param {string} id - Folder id\n     * @param {number} limit - maximum number of items to retrieve\n     * @param {number} offset - starting index from which to retrieve items\n     * @param {string} sortBy - sort by field\n     * @param {string} sortDirection - sort direction\n     * @param {Function} successCallback - Function to call with results\n     * @param {Function} errorCallback - Function to call with errors\n     * @param {boolean|void} [options.fields] - Optionally include specific fields\n     * @param {boolean|void} [options.forceFetch] - Optionally Bypasses the cache\n     * @param {boolean|void} [options.refreshCache] - Optionally Updates the cache\n     * @return {void}\n     */\n    getFolder(\n        id: string,\n        limit: number,\n        offset: number,\n        sortBy: SortBy,\n        sortDirection: SortDirection,\n        successCallback: Function,\n        errorCallback: Function,\n        options: RequestOptions = {},\n    ): void {\n        if (this.isDestroyed()) {\n            return;\n        }\n\n        // Save references\n        this.id = id;\n        this.key = this.getCacheKey(id);\n        this.limit = limit;\n        this.offset = offset;\n        this.sortBy = sortBy;\n        this.sortDirection = sortDirection;\n        this.successCallback = successCallback;\n        this.errorCallback = errorCallback;\n\n        // Clear the cache if needed\n        if (options.forceFetch) {\n            this.getCache().unset(this.key);\n        }\n\n        // Return the Cache value if it exists\n        if (this.isLoaded()) {\n            this.finish();\n            return;\n        }\n\n        // Make the XHR request\n        this.folderRequest(options);\n    }\n\n    /**\n     * API to rename an Item\n     *\n     * @param {string} id - parent folder id\n     * @param {string} name - new folder name\n     * @param {Function} successCallback - success callback\n     * @param {Function} errorCallback - error callback\n     * @return {void}\n     */\n    createSuccessHandler = ({ data }: { data: BoxItem }): void => {\n        const { id: childId } = data;\n        if (this.isDestroyed() || !childId) {\n            return;\n        }\n\n        const childKey: string = this.getCacheKey(childId);\n        const cache: APICache = this.getCache();\n        const parent: FlattenedBoxItem = cache.get(this.key);\n\n        if (!parent) {\n            this.successCallback(data);\n            return;\n        }\n\n        const { item_collection }: FlattenedBoxItem = parent;\n        if (!item_collection) {\n            throw getBadItemError();\n        }\n\n        const { total_count, entries }: FlattenedBoxItemCollection = item_collection;\n        if (!Array.isArray(entries) || typeof total_count !== 'number') {\n            throw getBadItemError();\n        }\n\n        cache.set(childKey, data);\n        item_collection.entries = [childKey].concat(entries);\n        item_collection.total_count = total_count + 1;\n        this.successCallback(data);\n    };\n\n    /**\n     * Does the network request for fetching a folder\n     *\n     * @return {void}\n     */\n    folderCreateRequest(name: string): Promise<void> {\n        if (this.isDestroyed()) {\n            return Promise.reject();\n        }\n\n        this.errorCode = ERROR_CODE_CREATE_FOLDER;\n        const url = `${this.getUrl()}?fields=${FOLDER_FIELDS_TO_FETCH.toString()}`;\n        return this.xhr\n            .post({\n                url,\n                data: {\n                    name,\n                    parent: {\n                        id: this.id,\n                    },\n                },\n            })\n            .then(this.createSuccessHandler)\n            .catch(this.errorHandler);\n    }\n\n    /**\n     * API to create a folder\n     *\n     * @param {string} id - parent folder id\n     * @param {string} name - new folder name\n     * @param {Function} successCallback - success callback\n     * @param {Function} errorCallback - error callback\n     * @return {void}\n     */\n    create(id: string, name: string, successCallback: Function, errorCallback: Function = noop): void {\n        if (this.isDestroyed()) {\n            return;\n        }\n\n        this.id = id;\n        this.key = this.getCacheKey(id);\n        this.successCallback = successCallback;\n        this.errorCallback = errorCallback;\n        this.folderCreateRequest(name);\n    }\n}\n\nexport default Folder;\n"],"mappings":"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","ignoreList":[]}