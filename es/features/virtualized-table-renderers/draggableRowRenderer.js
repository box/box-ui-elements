function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
import * as React from 'react';
import classNames from 'classnames';
import { Draggable } from 'react-beautiful-dnd';
import { defaultRowRenderer } from '@box/react-virtualized/dist/es/Table/index';
import Portal from '../../components/portal';
const draggableRowRenderer = params => {
  const {
    index,
    key,
    rowData
  } = params;
  const defaultRow = defaultRowRenderer(params);
  // Keys are auto-generated by the virtualized table based on
  // the row index. We give preference to id when available since
  // the index changes (and thus also the key) when the rows are re-ordered
  const draggableId = rowData.id || key;
  return /*#__PURE__*/React.createElement(Draggable, {
    draggableId: draggableId,
    index: index,
    key: draggableId
  }, (draggableProvided, draggableSnapshot) => {
    const {
      isDragging
    } = draggableSnapshot;
    const {
      draggableProps,
      dragHandleProps,
      innerRef
    } = draggableProvided;
    const {
      style: draggableStyle
    } = draggableProps;
    const {
      className: defaultRowClassName,
      style: defaultRowStyle
    } = defaultRow.props;
    const className = classNames(defaultRowClassName, {
      'is-dragging': isDragging
    });

    // Extend row with draggable properties
    const extendedRow = /*#__PURE__*/React.cloneElement(defaultRow, _objectSpread(_objectSpread(_objectSpread({}, draggableProps), dragHandleProps), {}, {
      ref: innerRef,
      className,
      // Both virtualized Table and Draggable set inline styles on
      // elements. Styles from Draggable should take precedence
      style: _objectSpread(_objectSpread({}, defaultRowStyle), draggableStyle)
    }));

    // Use portal when dragging so that row is on top of other elements
    // and not hidden by default VirtualizedTable styles. Portal needs to
    // have table class names in order for scoped styles to take effect
    if (isDragging) {
      return /*#__PURE__*/React.createElement(Portal, {
        className: "bdl-VirtualizedTable bdl-DraggableVirtualizedTable"
      }, extendedRow);
    }
    return extendedRow;
  });
};
export default draggableRowRenderer;
//# sourceMappingURL=draggableRowRenderer.js.map