{"version":3,"file":"flowTypes.js","names":["React","constants","accessLevelValues","ANYONE_WITH_LINK","ANYONE_IN_COMPANY","PEOPLE_IN_ITEM","permissionLevelValues","CAN_EDIT","CAN_VIEW_DOWNLOAD","CAN_VIEW_ONLY","collaboratorGroupValues","COLLAB_GROUP_TYPE","COLLAB_USER_TYPE","COLLAB_PENDING_TYPE"],"sources":["../../../src/features/unified-share-modal/flowTypes.js"],"sourcesContent":["// @flow\nimport * as React from 'react';\nimport * as constants from './constants';\nimport type { BoxItemPermission, ItemType } from '../../common/types/core';\nimport type { TargetingApi } from '../targeting/types';\n\n// DRY: Invert the constants so that we can construct the appropriate enum types\nconst accessLevelValues = {\n    [constants.ANYONE_WITH_LINK]: 'ANYONE_WITH_LINK',\n    [constants.ANYONE_IN_COMPANY]: 'ANYONE_IN_COMPANY',\n    [constants.PEOPLE_IN_ITEM]: 'PEOPLE_IN_ITEM',\n};\nexport type accessLevelType = $Keys<typeof accessLevelValues>;\n\nconst permissionLevelValues = {\n    [constants.CAN_EDIT]: 'CAN_EDIT',\n    [constants.CAN_VIEW_DOWNLOAD]: 'CAN_VIEW_DOWNLOAD',\n    [constants.CAN_VIEW_ONLY]: 'CAN_VIEW_ONLY',\n};\nexport type permissionLevelType = $Keys<typeof permissionLevelValues>;\n\nconst collaboratorGroupValues = {\n    [constants.COLLAB_GROUP_TYPE]: 'COLLAB_GROUP_TYPE',\n    [constants.COLLAB_USER_TYPE]: 'COLLAB_USER_TYPE',\n    [constants.COLLAB_PENDING_TYPE]: 'COLLAB_PENDING_TYPE',\n};\nexport type collaboratorGroupType = $Keys<typeof collaboratorGroupValues>;\n\nexport type allowedAccessLevelsType = {\n    peopleInThisItem?: boolean,\n    peopleInYourCompany?: boolean,\n    peopleWithTheLink?: boolean,\n};\n\nexport type accessLevelsDisabledReasonType = {\n    peopleInThisItem?:\n        | typeof constants.DISABLED_REASON_ACCESS_POLICY\n        | typeof constants.DISABLED_REASON_MALICIOUS_CONTENT\n        | null,\n    peopleInYourCompany?:\n        | typeof constants.DISABLED_REASON_ACCESS_POLICY\n        | typeof constants.DISABLED_REASON_MALICIOUS_CONTENT\n        | null,\n    peopleWithTheLink?:\n        | typeof constants.DISABLED_REASON_ACCESS_POLICY\n        | typeof constants.DISABLED_REASON_MALICIOUS_CONTENT\n        | null,\n};\n\nexport type contactType = {\n    displayText?: string,\n    email?: string,\n    id: string,\n    isExternalUser?: boolean,\n    name?: string,\n    text?: string,\n    type: string,\n    value?: string,\n};\n\nexport type SuggestedCollab = contactType & {\n    userScore: number,\n};\n\nexport type SuggestedCollabLookup = {\n    [id: string]: SuggestedCollab,\n};\n\nexport type inviteePermissionType = {\n    default: boolean,\n    description?: string,\n    disabled?: boolean,\n    text: string,\n    value: string,\n};\n\nexport type item = {\n    bannerPolicy?: {\n        body: string,\n        colorID?: number,\n        title?: string,\n    },\n    canUserSeeClassification: boolean,\n    classification?: string,\n    description: string,\n    extension: string,\n    grantedPermissions: {\n        itemShare: boolean,\n    },\n    hideCollaborators: boolean,\n    id: string,\n    name: string,\n    ownerEmail?: string,\n    ownerID?: string,\n    permissions?: BoxItemPermission,\n    type: ItemType,\n    typedID: string,\n};\n\nexport type emailFormTrackingType = {\n    cancelButtonProps?: Object,\n    messageProps?: Object,\n    onContactAdd?: Function,\n    onContactRemove?: Function,\n    onSendClick?: Function,\n};\n\nexport type sharedLinkTrackingType = {\n    copyButtonProps?: Object,\n    onChangeSharedLinkAccessLevel?: Function,\n    onChangeSharedLinkPermissionLevel?: Function,\n    onSharedLinkAccessMenuOpen?: Function,\n    onSharedLinkCopy?: Function,\n    onToggleLink?: Function,\n    sendSharedLinkButtonProps?: Object,\n    sharedLinkAccessMenuButtonProps?: Object,\n    sharedLinkPermissionsMenuButtonProps?: Object,\n    sharedLinkSettingsButtonProps?: Object,\n};\n\nexport type collaboratorListTrackingType = {\n    doneButtonProps?: Object,\n    emailProps?: Object,\n    manageLinkProps?: Object,\n    usernameProps?: Object,\n    viewAdditionalProps?: Object,\n};\n\nexport type trackingPropsType = {\n    collaboratorListTracking: collaboratorListTrackingType,\n    inviteCollabTracking: {\n        inviteePermissionsButtonProps?: Object,\n        onEnterInviteCollabs?: Function,\n        onInviteePermissionChange?: Function,\n    },\n    inviteCollabsEmailTracking: {\n        ...emailFormTrackingType,\n        upgradeLinkProps?: Object,\n    },\n    modalTracking: {\n        collaboratorAvatarsProps?: Object,\n        ftuxConfirmButtonProps?: Object,\n        modalProps?: Object,\n        onLoad?: Function,\n        onLoadSharedLink?: Function,\n    },\n    removeLinkConfirmModalTracking: {\n        cancelButtonProps?: Object,\n        modalProps?: Object,\n        okayButtonProps?: Object,\n        onLoad?: Function,\n    },\n    removeCollaboratorConfirmModalTracking: {\n        cancelButtonProps?: Object,\n        modalProps?: Object,\n        okayButtonProps?: Object,\n        onLoad?: Function,\n    },\n    sharedLinkEmailTracking: emailFormTrackingType,\n    sharedLinkTracking: sharedLinkTrackingType,\n};\n\n// this type is a strict subset of the SharedLinkRecord data returned from the server\nexport type sharedLinkType = {\n    accessLevel: accessLevelType,\n    accessLevelsDisabledReason?: accessLevelsDisabledReasonType,\n    allowedAccessLevels: allowedAccessLevelsType,\n    canChangeAccessLevel: boolean,\n    enterpriseName: string,\n    expirationTimestamp: ?number,\n    isDownloadAllowed: boolean,\n    isDownloadSettingAvailable: boolean,\n    isEditAllowed: boolean,\n    isEditSettingAvailable: boolean,\n    isNewSharedLink: boolean,\n    isPreviewAllowed: boolean,\n    permissionLevel: permissionLevelType,\n    url: string,\n};\n\nexport type collaboratorType = {\n    collabID: number,\n    email?: string,\n    expiration?: {\n        executeAt: string,\n    },\n    hasCustomAvatar: boolean,\n    imageURL: ?string,\n    isExternalCollab?: boolean,\n    isRemovable?: boolean,\n    name: string,\n    type: collaboratorGroupType,\n    userID: ?number,\n};\n\nexport type collaboratorsListType = {\n    collaborators: Array<collaboratorType>,\n};\n\nexport type tooltipComponentIdentifierType =\n    | 'shared-link-access-menu'\n    | 'shared-link-copy-button'\n    | 'shared-link-settings'\n    | 'shared-link-toggle';\n\nexport type justificationCheckpointType =\n    | typeof constants.JUSTIFICATION_CHECKPOINT_COLLAB\n    | typeof constants.JUSTIFICATION_CHECKPOINT_CREATE_SHARED_LINK\n    | typeof constants.JUSTIFICATION_CHECKPOINT_DOWNLOAD\n    | typeof constants.JUSTIFICATION_CHECKPOINT_EXTERNAL_COLLAB;\n\nexport type justificationReasonType = {\n    description?: string,\n    id: string,\n    isDetailsRequired?: boolean,\n    title: string,\n};\nexport type getJustificationReasonsResponseType = {\n    classificationLabelId: string,\n    options?: Array<justificationReasonType>,\n};\n\n// Prop types used in the invite section of the Unified Share Form\ntype InviteSectionTypes = {\n    /** Message warning about restrictions regarding inviting collaborators to the item */\n    collaborationRestrictionWarning: React.Node,\n    /** Used to limit the number of contacts that can be added in the contacts field */\n    contactLimit?: number,\n    /** Handler function for when the user types into invite collaborators field to fetch contacts. */\n    getCollaboratorContacts: (query: string) => Promise<Array<contactType>>,\n    /** Shows a callout tooltip next to the names / email addresses input field explaining pre-populated recommendation */\n    recommendedSharingTooltipCalloutName: ?string,\n    /**\n     * Function to send collab invitations based on the given parameters object.\n     * This function should return a Promise.\n     */\n    sendInvites: (params: Object) => Promise<Object>,\n    /** Message indicating an error occurred while sending the invites. */\n    sendInvitesError: React.Node,\n    /** Function hoists contact data upon updates to the parent component. Only needed for suggested collabs. */\n    setUpdatedContacts?: (inviteCollabsContacts: Array<contactType>) => void,\n    /** Determine whether to show the First-time experience tooltip on load */\n    showCalloutForUser?: boolean,\n    /**\n     * Flag to show link to upgrade and get more access controls.\n     * Only applicable to non-file item types.\n     */\n    showUpgradeOptions: boolean,\n    /** Data for suggested collaborators shown at bottom of input box. UI doesn't render when this has length of 0. */\n    suggestedCollaborators?: SuggestedCollabLookup,\n};\n\n// Additional invite section types that related with information barrier, external collab\n// restrictions and business justifications.\nexport type CollabRestrictionType =\n    | typeof constants.COLLAB_RESTRICTION_TYPE_ACCESS_POLICY\n    | typeof constants.COLLAB_RESTRICTION_TYPE_INFORMATION_BARRIER;\n\ntype CollabRestrictionsTypes = {\n    /** The type of restriction that applies to restrictedCollabEmails */\n    collabRestrictionType?: CollabRestrictionType,\n    /** Function that fetches the array of justification reason options to display on the justification select field */\n    getJustificationReasons?: (\n        itemTypedID: string,\n        checkpoint: justificationCheckpointType,\n    ) => Promise<getJustificationReasonsResponseType>,\n    /** Determines whether or not a business justification can be provided to bypass external collab restrictions */\n    isCollabRestrictionJustificationAllowed?: boolean,\n    /** Function that is called when all restricted collaborators are removed from the email form */\n    onRemoveAllRestrictedCollabs?: () => void,\n    /** An array of all the collab email addresses that have been determined to be restricted by a security policy. */\n    restrictedCollabEmails: Array<string>,\n    /** An array of all the group ids that have been determined to be restricted by a security policy. */\n    restrictedGroups: Array<number>,\n};\n\n// Prop types used in the shared link section of the Unified Share Form\n// (Note: while there is an overlap between these types and the props passed to the Shared Link Section component,\n// they are different. See the render() function of the Unified Share Form for details.)\ntype SharedLinkSectionTypes = {\n    /** Handler function that changes shared link access level */\n    changeSharedLinkAccessLevel: (newAccessLevel: accessLevelType) => Promise<{ accessLevel: accessLevelType }>,\n    /** Handler function that changes shared link permission level */\n    changeSharedLinkPermissionLevel: (\n        newPermissionLevel: permissionLevelType,\n    ) => Promise<{ permissionLevel: permissionLevelType }>,\n    /** Whether the form should create a shared link on load */\n    createSharedLinkOnLoad?: boolean,\n    /** Handler function that adds the shared link */\n    onAddLink: () => void,\n    /** Handler for when there is an error copying to clipboard */\n    onCopyError?: () => void,\n    /** Handler for when we initiate copying from to clipboard */\n    onCopyInit?: () => void,\n    /** Handler for when successfully copying to clipboard */\n    onCopySuccess?: () => void,\n    /** Handler function that gets called whenever the user dismisses a tooltip on the given component identifier */\n    onDismissTooltip?: (componentIdentifier: tooltipComponentIdentifierType) => void,\n    /** Handler function for clicks on the settings button. If not provided, the settings button won't be rendered. */\n    onSettingsClick?: Function,\n    /** Shared link data */\n    sharedLink: sharedLinkType,\n    /** Shows a callout tooltip next to settings button with info about what can be customized */\n    showSharedLinkSettingsCallout?: boolean,\n    /** Mapping of components to the content that should be rendered in their tooltips */\n    tooltips?: { [componentIdentifier: tooltipComponentIdentifierType]: React.Node },\n};\n\n// Prop types used in the collaborator avatars section of the Unified Share Form\ntype CollaboratorAvatarsTypes = {\n    /** Flag to control the ability to remove collaborators directly within the modal */\n    canRemoveCollaborators?: boolean,\n    /** List of existing collaborators */\n    collaboratorsList?: collaboratorsListType,\n    /** User ID of currently logged in user */\n    currentUserID: string,\n    /** An action triggered when a user confirms the removal of a collaborator */\n    onRemoveCollaborator?: (collaborator: collaboratorType) => Promise<void>,\n};\n\ntype EmailFormTypes = {\n    /** Function to retrieve the URL for an avatar, given contact details */\n    getContactAvatarUrl?: (contact: contactType) => string,\n    /** Handler function for when the user types into email shared link field to fetch contacts. */\n    getSharedLinkContacts: (query: string) => Promise<Array<contactType>>,\n    /**\n     * Function to send shared link email based on the given parameters object.\n     * This function should return a Promise.\n     */\n    sendSharedLink: (params: Object) => Promise<Object>,\n    /** Message indicating an error occurred while sending the shared link. */\n    sendSharedLinkError: React.Node,\n};\n\ntype AdvancedContentInsightsUSProps = {\n    isAdvancedContentInsightsChecked?: boolean,\n    /** Handler function that gets called whenever the Advanced Content Insights toggle changes */\n    onAdvancedContentInsightsToggle?: Function,\n};\n\nexport type USMConfig = {\n    /** Whether the \"Email Shared Link\" button and form should be rendered in the USM/USF */\n    showEmailSharedLinkForm: boolean,\n    /* Whether the message section of the invite collaborator page should be rendered in the USM/USF */\n    showInviteCollaboratorMessageSection: boolean,\n};\n\n// Prop types shared by both the Unified Share Modal and the Unified Share Form\ntype BaseUnifiedShareProps = CollaboratorAvatarsTypes &\n    AdvancedContentInsightsUSProps &\n    EmailFormTypes &\n    CollabRestrictionsTypes &\n    InviteSectionTypes &\n    SharedLinkSectionTypes & {\n        /** Inline message */\n        allShareRestrictionWarning?: React.Node,\n        /** Flag to determine whether to enable invite collaborators section */\n        canInvite: boolean,\n        /** Configuration object for hiding parts of the USM */\n        config?: USMConfig,\n        /** Whether the full USM should be rendered */\n        displayInModal?: boolean,\n        /** Whether the form should focus the shared link after the URL is resolved */\n        focusSharedLinkOnLoad?: boolean,\n        /** Handler function that gets contacts by a list of emails */\n        getContactsByEmail?: ({ emails: Array<string>, itemTypedID?: string }) => Promise<Object>,\n        /** Handler function for getting intial data for form */\n        getInitialData: Function,\n        /** An array of initially selected contacts. If none are initially selected, an empty array. */\n        initiallySelectedContacts: Array<contactType>,\n        /** Intl object */\n        intl: any,\n        /** An array of invitee permissions */\n        inviteePermissions: Array<inviteePermissionType>,\n        /** Item data */\n        item: item,\n        /** Shows a callout tooltip next to the names / email addresses input field encouraging users to fill out coworkers contact info */\n        showEnterEmailsCallout?: boolean,\n        /** Whether or not a request is in progress */\n        submitting: boolean,\n        /** Object with props and handlers for tracking interactions */\n        trackingProps: trackingPropsType,\n    };\n\n// Prop types for the Unified Share Modal\nexport type USMProps = BaseUnifiedShareProps & {\n    /** Function for closing the Remove Link Confirm Modal */\n    closeConfirmModal: () => void,\n    /** Whether initial data for the USM has already been received */\n    initialDataReceived: boolean,\n    /** Whether the allow edit shared link for file FF is enabled */\n    isAllowEditSharedLinkForFileEnabled?: boolean,\n    /** Whether the USM is open */\n    isOpen?: boolean,\n    /** A custom action to be invoked instead of default behavior when collaborators avatars are clicked */\n    onCollaboratorAvatarsClick?: () => void,\n    /** Handler function that removes the shared link, used in the Remove Link Confirm Modal */\n    onRemoveLink: () => void,\n    /** Handler function for when the USM is closed */\n    onRequestClose?: Function,\n    /** Whether the FTUX tag should be rendered for the Can Edit option */\n    sharedLinkEditTagTargetingApi?: TargetingApi,\n    /** Whether the FTUX tooltip should be rendered for Editable Shared Links  */\n    sharedLinkEditTooltipTargetingApi?: TargetingApi,\n};\n\n// Prop types for the Unified Share Form, passed from the Unified Share Modal\nexport type USFProps = BaseUnifiedShareProps & {\n    /** Function for closing the FTUX tooltip */\n    handleFtuxCloseClick: () => void,\n    /** Whether the allow edit shared link for file FF is enabled */\n    isAllowEditSharedLinkForFileEnabled: boolean,\n    /** Whether the data for the USM/USF is being fetched */\n    isFetching: boolean,\n    /** A custom action to be invoked instead of default behavior when collaborators avatars are clicked */\n    onCollaboratorAvatarsClick?: () => void,\n    /** Function for opening the Remove Link Confirm Modal */\n    openConfirmModal: () => void,\n    /** Function for opening the Upgrade Plan Modal */\n    openUpgradePlanModal: () => void,\n    /** An action triggered when the remove collaborator button is clicked */\n    onRemoveCollaboratorClick?: (collaborator: collaboratorType) => void,\n    /** Whether the FTUX tag should be rendered for the Can Edit option */\n    sharedLinkEditTagTargetingApi?: TargetingApi,\n    /** Whether the FTUX tooltip should be rendered for Editable Shared Links  */\n    sharedLinkEditTooltipTargetingApi?: TargetingApi,\n    /** Whether the shared link has loaded */\n    sharedLinkLoaded: boolean,\n    /** Whether the FTUX tooltip should be rendered */\n    shouldRenderFTUXTooltip: boolean,\n    /** Whether the upgrade inline notice should be rendered\n     * NOTE (wyehdego): Remove this prop once we refactor legacy inline notice with upsellInlineNotice\n     */\n    showUpgradeInlineNotice?: boolean,\n    /** Inline Notice component to render based on user */\n    upsellInlineNotice?: React.Node | null,\n};\n\nexport type InviteCollaboratorsRequest = {\n    classificationLabelId?: string,\n    emailMessage: string,\n    emails: string,\n    groupIDs: string,\n    justificationReason?: justificationReasonType,\n    numOfInviteeGroups: number,\n    numsOfInvitees: number,\n    permission: string,\n};\n"],"mappings":"AACA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,OAAO,KAAKC,SAAS,MAAM,aAAa;AAIxC;AACA,MAAMC,iBAAiB,GAAG;EACtB,CAACD,SAAS,CAACE,gBAAgB,GAAG,kBAAkB;EAChD,CAACF,SAAS,CAACG,iBAAiB,GAAG,mBAAmB;EAClD,CAACH,SAAS,CAACI,cAAc,GAAG;AAChC,CAAC;AAGD,MAAMC,qBAAqB,GAAG;EAC1B,CAACL,SAAS,CAACM,QAAQ,GAAG,UAAU;EAChC,CAACN,SAAS,CAACO,iBAAiB,GAAG,mBAAmB;EAClD,CAACP,SAAS,CAACQ,aAAa,GAAG;AAC/B,CAAC;AAGD,MAAMC,uBAAuB,GAAG;EAC5B,CAACT,SAAS,CAACU,iBAAiB,GAAG,mBAAmB;EAClD,CAACV,SAAS,CAACW,gBAAgB,GAAG,kBAAkB;EAChD,CAACX,SAAS,CAACY,mBAAmB,GAAG;AACrC,CAAC;;AAyID;;AA4DA;;AA8BA;AACA;;AAuBA;AACA;AACA;;AA8BA;;AAuCA;;AAqCA;;AAsBA","ignoreList":[]}