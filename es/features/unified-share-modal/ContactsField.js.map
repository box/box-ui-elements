{"version":3,"file":"ContactsField.js","names":["React","FormattedMessage","injectIntl","debounce","noop","classNames","PillSelectorDropdown","ContactDatalistItem","computeSuggestedCollabs","parseEmails","commonMessages","messages","isSubstring","value","searchString","toLowerCase","indexOf","ContactsField","Component","constructor","props","_defineProperty","contacts","suggestedCollaborators","pillSelectorInputValue","state","suggestedOptions","otherOptions","setState","numSuggestedShowing","length","selectedContacts","fullContacts","filter","name","email","id","find","addSuggestedContacts","map","isExternalUser","type","text","query","getContacts","then","filteredContacts","filterContacts","catch","error","isCanceled","getContactsPromise","inputValue","validator","emails","validEmails","onInput","trimmedValue","trim","debouncedGetContacts","render","disabled","fieldRef","getContactAvatarUrl","getPillClassName","intl","label","onContactAdd","onContactRemove","onPillCreate","showContactAvatars","validateForError","groupLabel","createElement","shouldShowSuggested","pillSelectorOverlayClasses","scrollable","allowCustomPills","allowInvalidPills","className","dividerIndex","undefined","getPillImageUrl","inputProps","autoFocus","onChange","handlePillSelectorInput","onRemove","onSelect","overlayTitle","formatMessage","suggestedCollabsTitle","parseItems","handleParseItems","placeholder","pillSelectorPlaceholder","ref","selectedOptions","showAvatars","showRoundedPills","selectorOptions","key","isExternal","subtitle","title","showAvatar","ContactsFieldBase"],"sources":["../../../src/features/unified-share-modal/ContactsField.js"],"sourcesContent":["// @flow\n\nimport * as React from 'react';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport debounce from 'lodash/debounce';\nimport noop from 'lodash/noop';\nimport classNames from 'classnames';\n\nimport PillSelectorDropdown from '../../components/pill-selector-dropdown';\nimport ContactDatalistItem from '../../components/contact-datalist-item';\nimport computeSuggestedCollabs from './utils/computeSuggestedCollabs';\nimport parseEmails from '../../utils/parseEmails';\nimport commonMessages from '../../common/messages';\n\nimport messages from './messages';\nimport type { SuggestedCollabLookup, contactType as Contact } from './flowTypes';\nimport type { SelectOptionProp } from '../../components/select-field/props';\n\ntype Props = {\n    disabled: boolean,\n    error: string,\n    fieldRef?: Object,\n    getContactAvatarUrl?: (contact: Contact) => string,\n    getContacts: (query: string) => Promise<Array<Contact>>,\n    getPillClassName?: (option: SelectOptionProp) => string,\n    intl: any,\n    label: React.Node,\n    onContactAdd: Function,\n    onContactRemove: Function,\n    onInput?: Function,\n    onPillCreate?: (pills: Array<SelectOptionProp | Contact>) => void,\n    selectedContacts: Array<Contact>,\n    showContactAvatars?: boolean,\n    suggestedCollaborators?: SuggestedCollabLookup,\n    validateForError: Function,\n    validator: Function,\n};\n\ntype State = {\n    contacts: Array<Contact>,\n    numSuggestedShowing: number,\n    pillSelectorInputValue: string,\n};\n\nconst isSubstring = (value, searchString) => {\n    return value && value.toLowerCase().indexOf(searchString.toLowerCase()) !== -1;\n};\n\nclass ContactsField extends React.Component<Props, State> {\n    static defaultProps = {\n        showContactAvatars: false,\n    };\n\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            contacts: [],\n            numSuggestedShowing: 0,\n            pillSelectorInputValue: '',\n        };\n    }\n\n    addSuggestedContacts = (contacts: Array<Contact>) => {\n        const { suggestedCollaborators = {} } = this.props;\n        const { pillSelectorInputValue } = this.state;\n\n        const [suggestedOptions, otherOptions] = computeSuggestedCollabs(\n            contacts,\n            suggestedCollaborators,\n            pillSelectorInputValue,\n        );\n        this.setState({ numSuggestedShowing: suggestedOptions.length });\n        return [...suggestedOptions, ...otherOptions];\n    };\n\n    filterContacts = (contacts: Array<Contact>): Array<Contact> => {\n        const { pillSelectorInputValue } = this.state;\n        const { selectedContacts, suggestedCollaborators } = this.props;\n        if (pillSelectorInputValue && contacts) {\n            let fullContacts = contacts\n                .filter(\n                    // filter contacts whose name or email don't match input value\n                    ({ name, email }) =>\n                        isSubstring(name, pillSelectorInputValue) || isSubstring(email, pillSelectorInputValue),\n                )\n                .filter(\n                    // filter contacts who have already been selected\n                    ({ email, id }) => !selectedContacts.find(({ value }) => value === email || value === id),\n                );\n\n            if (suggestedCollaborators) {\n                fullContacts = this.addSuggestedContacts(fullContacts);\n            }\n\n            return fullContacts.map<Contact>(({ email, id, isExternalUser, name, type }) => ({\n                // map to standardized DatalistItem format\n                // TODO: refactor this so inline conversions aren't required at every usage\n                email,\n                id,\n                isExternalUser,\n                text: name,\n                type,\n                value: email || id, // if email doesn't exist, contact is a group, use id\n            }));\n        }\n\n        // return empty selector options if input value is empty\n        return [];\n    };\n\n    getContactsPromise = (query: string) => {\n        return this.props\n            .getContacts(query)\n            .then(contacts => {\n                const filteredContacts = this.filterContacts(contacts);\n                this.setState({ contacts: filteredContacts });\n            })\n            .catch(error => {\n                if (error.isCanceled) {\n                    // silently fail - this happens often when requests get cancelled\n                    // due to overlapping requests\n                    return;\n                }\n                throw error;\n            });\n    };\n\n    debouncedGetContacts = debounce(this.getContactsPromise, 200);\n\n    handleParseItems = (inputValue: string): Array<string> => {\n        const { validator } = this.props;\n\n        // ContactField allows invalid pills to be displayed in\n        // in some cases (e.g., when user is external and external\n        // collab is restricted). We don't allow, however, invalid\n        // emails from the pill selector input to be turned into pills.\n        const emails = parseEmails(inputValue);\n        const validEmails = emails.filter(email => validator(email));\n\n        return validEmails;\n    };\n\n    handlePillSelectorInput = (value: string) => {\n        const { onInput } = this.props;\n        const trimmedValue = value.trim();\n\n        this.setState({\n            pillSelectorInputValue: trimmedValue,\n        });\n\n        if (onInput) {\n            onInput(value);\n        }\n\n        if (!trimmedValue) {\n            this.setState({ contacts: [] });\n            return;\n        }\n\n        this.debouncedGetContacts(trimmedValue);\n    };\n\n    render() {\n        const {\n            disabled,\n            error,\n            fieldRef,\n            getContactAvatarUrl,\n            getPillClassName,\n            intl,\n            label,\n            onContactAdd,\n            onContactRemove,\n            onPillCreate,\n            selectedContacts,\n            showContactAvatars,\n            validateForError,\n            validator,\n        } = this.props;\n        const { contacts, numSuggestedShowing } = this.state;\n        const groupLabel = <FormattedMessage {...messages.groupLabel} />;\n        const shouldShowSuggested = numSuggestedShowing > 0;\n        const pillSelectorOverlayClasses = classNames({\n            scrollable: contacts.length > 5,\n        });\n\n        return (\n            <PillSelectorDropdown\n                allowCustomPills\n                allowInvalidPills\n                className={pillSelectorOverlayClasses}\n                dividerIndex={shouldShowSuggested ? numSuggestedShowing : undefined}\n                disabled={disabled}\n                error={error}\n                getPillClassName={getPillClassName}\n                getPillImageUrl={getContactAvatarUrl}\n                inputProps={{\n                    autoFocus: true,\n                    'data-target-id': 'PillSelectorDropdown-AddNamesOrEmailAddresses',\n                    onChange: noop,\n                }}\n                label={label}\n                onInput={this.handlePillSelectorInput}\n                onRemove={onContactRemove}\n                onSelect={onContactAdd}\n                onPillCreate={onPillCreate}\n                overlayTitle={shouldShowSuggested ? intl.formatMessage(messages.suggestedCollabsTitle) : undefined}\n                parseItems={this.handleParseItems}\n                placeholder={intl.formatMessage(commonMessages.pillSelectorPlaceholder)}\n                ref={fieldRef}\n                selectedOptions={selectedContacts}\n                showAvatars\n                showRoundedPills\n                selectorOptions={contacts}\n                validateForError={validateForError}\n                validator={validator}\n            >\n                {contacts.map(({ email, isExternalUser, text = null, id, type }) => (\n                    <ContactDatalistItem\n                        getContactAvatarUrl={getContactAvatarUrl}\n                        key={id}\n                        id={id}\n                        type={type}\n                        isExternal={isExternalUser}\n                        name={text}\n                        subtitle={email || groupLabel}\n                        title={text}\n                        showAvatar={showContactAvatars}\n                    />\n                ))}\n            </PillSelectorDropdown>\n        );\n    }\n}\n\nexport { ContactsField as ContactsFieldBase };\nexport default injectIntl(ContactsField);\n"],"mappings":"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","ignoreList":[]}