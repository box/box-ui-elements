{"version":3,"file":"EmailForm.js","names":["React","isString","partition","classNames","FormattedMessage","injectIntl","TextArea","PrimaryButton","ModalActions","Button","Tooltip","InlineNotice","PillSelectorDropdown","commonMessages","emailValidator","IconGlobe","ContactRestrictionNotice","ContactsField","hasRestrictedContacts","isRestrictedContact","messages","EmailForm","Component","constructor","props","_defineProperty","createRef","contacts","selectedContacts","onContactAdd","updateSelectedContacts","updatedContacts","validateContacts","option","index","onContactRemove","slice","removed","splice","removedContacts","remainingContacts","contact","forEach","removedContact","contactLimit","intl","contactsFieldError","undefined","length","formatMessage","contactsExceedLimitError","maxContacts","enterAtLeastOneEmailError","setState","contactsRestrictionError","selectedJustificationReason","state","isRestrictionJustificationEnabled","restrictedEmails","restrictedGroups","hasRestrictedCollabs","isMissingRequiredJustification","justificationRequiredError","restrictedContactsError","value","onContactInput","event","target","HTMLTextAreaElement","message","validateContactsRestrictions","contactsFieldRef","current","inputValue","onRequestClose","preventDefault","onSubmit","contactsError","emails","groupIDs","id","type","push","justificationReason","catch","error","invitedEmails","filterSentEmails","sentEmails","filter","includes","text","invalidEmailError","contactPill","isValid","hasRequiredJustification","isWaivedPill","componentDidUpdate","prevProps","prevState","prevIsRestrictionJustificationEnabled","prevContactsFieldError","prevContactsRestrictionError","didJustificationRequirementChange","render","cancelButtonProps","children","collabRestrictionType","config","contactsFieldAvatars","contactsFieldDisabledTooltip","contactsFieldLabel","inlineNotice","isContactsFieldEnabled","isExternalUserSelected","getContactAvatarUrl","getContacts","isExpanded","isFetchingJustificationReasons","justificationReasons","messageProps","onPillCreate","recommendedSharingTooltipCalloutName","sendButtonProps","showEnterEmailsCallout","submitting","suggestedCollaborators","ftuxTooltipProps","className","isShown","position","showCloseButton","createElement","enterEmailAddressesCalloutText","theme","recommendedSharingTooltipProps","_extends","recommendedSharingTooltipCalloutText","values","fullName","tooltipPropsToRender","contactsField","disabled","fieldRef","getPillClassName","getContactPillClassName","label","handleContactAdd","handleContactRemove","onInput","handleContactInput","validateForError","validateContactField","validator","isValidContactPill","showContactAvatars","contactsFieldWrap","hideMessageSection","showInviteCollaboratorMessageSection","shouldRenderContactRestrictionNotice","handleSubmit","content","onRemoveRestrictedContacts","handleRemoveRestrictedContacts","onSelectJustificationReason","handleSelectJustificationReason","messageTitle","onChange","handleMessageChange","placeholder","messageSelectorPlaceholder","rows","height","width","contentSharedWithExternalCollaborators","isDisabled","onClick","handleClose","cancel","isLoading","send","EmailFormBase"],"sources":["../../../src/features/unified-share-modal/EmailForm.js"],"sourcesContent":["// @flow\n\nimport * as React from 'react';\nimport isString from 'lodash/isString';\nimport partition from 'lodash/partition';\nimport classNames from 'classnames';\nimport { FormattedMessage, injectIntl } from 'react-intl';\n\nimport TextArea from '../../components/text-area';\nimport PrimaryButton from '../../components/primary-button';\nimport { ModalActions } from '../../components/modal';\nimport Button from '../../components/button';\nimport Tooltip from '../../components/tooltip';\nimport InlineNotice from '../../components/inline-notice';\nimport PillSelectorDropdown from '../../components/pill-selector-dropdown';\nimport commonMessages from '../../common/messages';\nimport { emailValidator } from '../../utils/validators';\nimport type { InlineNoticeType } from '../../common/types/core';\nimport IconGlobe from '../../icons/general/IconGlobe';\n\nimport ContactRestrictionNotice from './ContactRestrictionNotice';\nimport ContactsField from './ContactsField';\nimport hasRestrictedContacts from './utils/hasRestrictedContacts';\nimport isRestrictedContact from './utils/isRestrictedContact';\nimport messages from './messages';\nimport type { CollabRestrictionType, SuggestedCollabLookup, contactType as Contact, USMConfig } from './flowTypes';\nimport type { SelectOptionProp } from '../../components/select-field/props';\n\ntype Props = {\n    cancelButtonProps?: Object,\n    children?: React.Node,\n    collabRestrictionType?: CollabRestrictionType,\n    config?: USMConfig,\n    contactLimit?: number,\n    contactsFieldAvatars?: React.Node,\n    contactsFieldDisabledTooltip: React.Node,\n    contactsFieldLabel: React.Node,\n    getContactAvatarUrl?: (contact: Contact) => string,\n    getContacts: (query: string) => Promise<Array<Contact>>,\n    inlineNotice: {\n        content: React.Node,\n        type: InlineNoticeType,\n    },\n    intl: any,\n    isContactsFieldEnabled: boolean,\n    isExpanded: boolean,\n    isExternalUserSelected: boolean,\n    isFetchingJustificationReasons?: boolean,\n    isRestrictionJustificationEnabled: boolean,\n    justificationReasons: Array<SelectOptionProp>,\n    messageProps?: Object,\n    onContactAdd?: Function,\n    onContactInput?: Function,\n    onContactRemove?: Function,\n    onPillCreate?: (pills: Array<SelectOptionProp | Contact>) => void,\n    onRequestClose: Function,\n    onSubmit: Function,\n    openInviteCollaboratorsSection?: Function,\n    recommendedSharingTooltipCalloutName?: ?string,\n    restrictedEmails: Array<string>,\n    restrictedGroups: Array<number>,\n    selectedContacts: Array<Contact>,\n    sendButtonProps?: Object,\n    showEnterEmailsCallout: boolean,\n    submitting: boolean,\n    suggestedCollaborators?: SuggestedCollabLookup,\n    updateSelectedContacts: Function,\n};\n\ntype State = {\n    contactsFieldError: string,\n    contactsRestrictionError: string,\n    message: string,\n    selectedJustificationReason: ?SelectOptionProp,\n};\n\nclass EmailForm extends React.Component<Props, State> {\n    static defaultProps = {\n        messageProps: {},\n        contactsFieldDisabledTooltip: null,\n        isRestrictionJustificationEnabled: false,\n        justificationReasons: [],\n        restrictedEmails: [],\n        restrictedGroups: [],\n    };\n\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            contactsFieldError: '',\n            contactsRestrictionError: '',\n            message: '',\n            selectedJustificationReason: null,\n        };\n    }\n\n    contactsFieldRef: {\n        current: null | PillSelectorDropdown,\n    } = React.createRef();\n\n    componentDidUpdate(prevProps: Props, prevState: State) {\n        const { isRestrictionJustificationEnabled } = this.props;\n        const { isRestrictionJustificationEnabled: prevIsRestrictionJustificationEnabled } = prevProps;\n        const { contactsFieldError, contactsRestrictionError } = this.state;\n        const {\n            contactsFieldError: prevContactsFieldError,\n            contactsRestrictionError: prevContactsRestrictionError,\n        } = prevState;\n\n        // Only display one type of error at a time and give preference\n        // to the one triggered most recently\n        if (!prevContactsFieldError && contactsFieldError) {\n            this.setState({ contactsRestrictionError: '' });\n        }\n        if (!prevContactsRestrictionError && contactsRestrictionError) {\n            this.setState({ contactsFieldError: '' });\n        }\n\n        const didJustificationRequirementChange =\n            isRestrictionJustificationEnabled !== prevIsRestrictionJustificationEnabled;\n\n        // Clear selected justification when form state is reset\n        if (didJustificationRequirementChange && !isRestrictionJustificationEnabled) {\n            this.setState({ selectedJustificationReason: null });\n        }\n    }\n\n    handleContactAdd = (contacts: Array<Contact>) => {\n        const { selectedContacts, onContactAdd, updateSelectedContacts } = this.props;\n\n        const updatedContacts = [...selectedContacts, ...contacts];\n        updateSelectedContacts(updatedContacts);\n\n        this.validateContacts(updatedContacts);\n\n        if (onContactAdd) {\n            onContactAdd(contacts);\n        }\n    };\n\n    handleContactRemove = (option: any, index: number) => {\n        const { onContactRemove, updateSelectedContacts } = this.props;\n        const selectedContacts = this.props.selectedContacts.slice();\n        const removed = selectedContacts.splice(index, 1);\n        updateSelectedContacts(selectedContacts);\n\n        this.validateContacts(selectedContacts);\n\n        if (onContactRemove) {\n            onContactRemove(removed);\n        }\n    };\n\n    handleRemoveRestrictedContacts = () => {\n        const { onContactRemove, selectedContacts, updateSelectedContacts } = this.props;\n\n        const [removedContacts, remainingContacts] = partition(selectedContacts, (contact: Contact) =>\n            this.isRestrictedContact(contact),\n        );\n\n        updateSelectedContacts(remainingContacts);\n        this.validateContacts(remainingContacts);\n\n        if (onContactRemove) {\n            removedContacts.forEach(removedContact => {\n                onContactRemove(removedContact);\n            });\n        }\n    };\n\n    validateContacts = (selectedContacts: Array<Contact>) => {\n        const { contactLimit, intl } = this.props;\n\n        let contactsFieldError = '';\n        if (contactLimit !== undefined && selectedContacts.length > contactLimit) {\n            contactsFieldError = intl.formatMessage(messages.contactsExceedLimitError, {\n                maxContacts: contactLimit,\n            });\n        } else if (selectedContacts.length === 0) {\n            contactsFieldError = intl.formatMessage(messages.enterAtLeastOneEmailError);\n        }\n\n        this.setState({ contactsFieldError });\n\n        return contactsFieldError;\n    };\n\n    validateContactsRestrictions = () => {\n        let contactsRestrictionError = '';\n        const { selectedJustificationReason } = this.state;\n        const {\n            intl,\n            isRestrictionJustificationEnabled,\n            selectedContacts,\n            restrictedEmails,\n            restrictedGroups,\n        } = this.props;\n\n        const hasRestrictedCollabs = hasRestrictedContacts(selectedContacts, restrictedEmails, restrictedGroups);\n        const isMissingRequiredJustification = isRestrictionJustificationEnabled && !selectedJustificationReason;\n\n        if (isMissingRequiredJustification) {\n            contactsRestrictionError = intl.formatMessage(messages.justificationRequiredError);\n        } else if (hasRestrictedCollabs && !isRestrictionJustificationEnabled) {\n            contactsRestrictionError = intl.formatMessage(messages.restrictedContactsError);\n        }\n\n        this.setState({ contactsRestrictionError });\n\n        return contactsRestrictionError;\n    };\n\n    handleContactInput = (value: string) => {\n        const { onContactInput } = this.props;\n\n        if (onContactInput) {\n            onContactInput(value);\n        }\n    };\n\n    handleMessageChange = (event: SyntheticEvent<HTMLTextAreaElement>) => {\n        const { target } = event;\n\n        if (target instanceof HTMLTextAreaElement) {\n            this.setState({ message: target.value });\n        }\n    };\n\n    handleSelectJustificationReason = (selectedJustificationReason: SelectOptionProp) => {\n        this.setState({ selectedJustificationReason }, this.validateContactsRestrictions);\n    };\n\n    handleClose = () => {\n        this.setState({\n            message: '',\n            contactsFieldError: '',\n            selectedJustificationReason: null,\n        });\n\n        this.props.updateSelectedContacts([]);\n\n        /* Need to reset text in contacts field upon cancelling\n           because the field still shows if the field isn't unmounted\n           but only collapsed (like in invite collabs usage).\n           inputValue doesn't get passed down through props but is\n           internal state in pill selector. */\n        if (this.contactsFieldRef.current) {\n            this.contactsFieldRef.current.setState({ inputValue: '' });\n        }\n\n        this.props.onRequestClose();\n    };\n\n    handleSubmit = (event: SyntheticEvent<HTMLFormElement>) => {\n        event.preventDefault();\n\n        const { onSubmit, selectedContacts } = this.props;\n        const { message, contactsFieldError, selectedJustificationReason } = this.state;\n\n        if (contactsFieldError !== '') {\n            // Block submission if there's a validation error\n            return;\n        }\n\n        const contactsError = this.validateContacts(selectedContacts);\n        const contactsRestrictionError = this.validateContactsRestrictions();\n\n        if (contactsError || contactsRestrictionError) {\n            return;\n        }\n\n        const emails = [];\n        const groupIDs = [];\n        const restrictedGroups = [];\n        const restrictedEmails = [];\n\n        selectedContacts.forEach(contact => {\n            const { id, type, value } = contact;\n\n            if (type === 'group') {\n                groupIDs.push(value);\n\n                if (this.isRestrictedContact(contact)) {\n                    restrictedGroups.push(id);\n                }\n            } else {\n                if (this.isRestrictedContact(contact)) {\n                    restrictedEmails.push(value);\n                }\n                emails.push(value);\n            }\n        });\n\n        onSubmit({\n            emails,\n            groupIDs,\n            justificationReason: selectedJustificationReason,\n            message,\n            restrictedEmails,\n            restrictedGroups,\n        }).catch(error => {\n            // Remove sent emails from selected pills\n            const invitedEmails = error.invitedEmails || [];\n            this.filterSentEmails(invitedEmails);\n        });\n    };\n\n    filterSentEmails = (sentEmails: Array<string>) => {\n        this.props.updateSelectedContacts(\n            this.props.selectedContacts.filter(({ value }) => !sentEmails.includes(value)),\n        );\n    };\n\n    validateContactField = (text: string) => {\n        const { intl } = this.props;\n        let contactsFieldError = '';\n\n        if (text && !emailValidator(text)) {\n            contactsFieldError = intl.formatMessage(commonMessages.invalidEmailError);\n        }\n        this.setState({ contactsFieldError });\n    };\n\n    isValidContactPill = (contactPill: string | Contact): boolean => {\n        let isValid = true;\n        const { selectedJustificationReason } = this.state;\n        const { isRestrictionJustificationEnabled } = this.props;\n\n        if (isString(contactPill)) {\n            // If we receive a string it means we're validating unparsed\n            // pill selector input. Check that we have a valid email\n            isValid = emailValidator(contactPill);\n        } else {\n            const hasRequiredJustification = !!selectedJustificationReason && isRestrictionJustificationEnabled;\n            // Invalid emails are filtered out by ContactsField when parsing\n            // new pills, so parsed pills can currently only be invalid\n            // when user is restricted by a security policy\n            isValid = !this.isRestrictedContact(contactPill) || hasRequiredJustification;\n        }\n        return isValid;\n    };\n\n    getContactPillClassName = (contactPill: SelectOptionProp): string => {\n        const { selectedJustificationReason } = this.state;\n        const { isRestrictionJustificationEnabled } = this.props;\n\n        const hasRequiredJustification = !!selectedJustificationReason && isRestrictionJustificationEnabled;\n        const isWaivedPill = this.isRestrictedContact(contactPill) && hasRequiredJustification;\n\n        return isWaivedPill ? 'is-waived' : '';\n    };\n\n    isRestrictedContact = (contact: Contact | SelectOptionProp) => {\n        const { restrictedEmails, restrictedGroups } = this.props;\n\n        return isRestrictedContact(contact, restrictedEmails, restrictedGroups);\n    };\n\n    render() {\n        const { contactsFieldError, contactsRestrictionError, message, selectedJustificationReason } = this.state;\n\n        const {\n            cancelButtonProps,\n            children,\n            collabRestrictionType,\n            config,\n            contactsFieldAvatars,\n            contactsFieldDisabledTooltip,\n            contactsFieldLabel,\n            inlineNotice,\n            isContactsFieldEnabled,\n            isExternalUserSelected,\n            getContactAvatarUrl,\n            getContacts,\n            intl,\n            isExpanded,\n            isFetchingJustificationReasons,\n            isRestrictionJustificationEnabled,\n            justificationReasons,\n            messageProps,\n            onPillCreate,\n            recommendedSharingTooltipCalloutName,\n            restrictedEmails,\n            restrictedGroups,\n            selectedContacts,\n            sendButtonProps,\n            showEnterEmailsCallout,\n            submitting,\n            suggestedCollaborators,\n        } = this.props;\n\n        const ftuxTooltipProps = {\n            className: 'usm-ftux-tooltip',\n            isShown: showEnterEmailsCallout,\n            position: 'middle-right',\n            showCloseButton: true,\n            text: <FormattedMessage {...messages.enterEmailAddressesCalloutText} />,\n            theme: 'callout',\n        };\n\n        const recommendedSharingTooltipProps = {\n            isShown: !!recommendedSharingTooltipCalloutName,\n            position: 'middle-left',\n            text: (\n                <FormattedMessage\n                    {...messages.recommendedSharingTooltipCalloutText}\n                    values={{ fullName: recommendedSharingTooltipCalloutName }}\n                />\n            ),\n            theme: 'callout',\n        };\n\n        const tooltipPropsToRender = recommendedSharingTooltipCalloutName\n            ? recommendedSharingTooltipProps\n            : ftuxTooltipProps;\n\n        const contactsField = (\n            <div className=\"tooltip-target\">\n                <Tooltip {...tooltipPropsToRender}>\n                    <ContactsField\n                        disabled={!isContactsFieldEnabled}\n                        error={contactsFieldError}\n                        fieldRef={this.contactsFieldRef}\n                        getContacts={getContacts}\n                        getContactAvatarUrl={getContactAvatarUrl}\n                        getPillClassName={this.getContactPillClassName}\n                        label={contactsFieldLabel}\n                        onContactAdd={this.handleContactAdd}\n                        onContactRemove={this.handleContactRemove}\n                        onInput={this.handleContactInput}\n                        onPillCreate={onPillCreate}\n                        selectedContacts={selectedContacts}\n                        suggestedCollaborators={suggestedCollaborators}\n                        validateForError={this.validateContactField}\n                        validator={this.isValidContactPill}\n                        showContactAvatars\n                    />\n                </Tooltip>\n            </div>\n        );\n\n        let contactsFieldWrap;\n        if (isContactsFieldEnabled) {\n            contactsFieldWrap = contactsField;\n        } else {\n            contactsFieldWrap = (\n                <Tooltip position=\"bottom-center\" text={contactsFieldDisabledTooltip}>\n                    {contactsField}\n                </Tooltip>\n            );\n        }\n\n        const hideMessageSection = config && config.showInviteCollaboratorMessageSection === false;\n        const shouldRenderContactRestrictionNotice =\n            isExpanded && hasRestrictedContacts(selectedContacts, restrictedEmails, restrictedGroups);\n\n        return (\n            <form\n                className={classNames({\n                    'is-expanded': isExpanded,\n                })}\n                onSubmit={this.handleSubmit}\n            >\n                {inlineNotice.content && isExpanded && (\n                    <InlineNotice type={inlineNotice.type}>{inlineNotice.content}</InlineNotice>\n                )}\n                {shouldRenderContactRestrictionNotice && (\n                    <ContactRestrictionNotice\n                        collabRestrictionType={collabRestrictionType}\n                        error={contactsRestrictionError}\n                        isFetchingJustificationReasons={isFetchingJustificationReasons}\n                        isRestrictionJustificationEnabled={isRestrictionJustificationEnabled}\n                        justificationReasons={justificationReasons}\n                        onRemoveRestrictedContacts={this.handleRemoveRestrictedContacts}\n                        restrictedEmails={restrictedEmails}\n                        restrictedGroups={restrictedGroups}\n                        selectedContacts={selectedContacts}\n                        selectedJustificationReason={selectedJustificationReason}\n                        onSelectJustificationReason={this.handleSelectJustificationReason}\n                    />\n                )}\n                {contactsFieldAvatars}\n                {contactsFieldWrap}\n                {children}\n                {isExpanded && !hideMessageSection && (\n                    <TextArea\n                        data-testid=\"be-emailform-message\"\n                        label={<FormattedMessage {...messages.messageTitle} />}\n                        onChange={this.handleMessageChange}\n                        placeholder={intl.formatMessage(commonMessages.messageSelectorPlaceholder)}\n                        rows={3}\n                        value={message}\n                        {...messageProps}\n                    />\n                )}\n                {isExpanded && isExternalUserSelected && (\n                    <div className=\"security-indicator-note\">\n                        <span className=\"security-indicator-icon-globe\">\n                            <IconGlobe height={12} width={12} />\n                        </span>\n                        <FormattedMessage {...messages.contentSharedWithExternalCollaborators} />\n                    </div>\n                )}\n                {isExpanded && (\n                    <ModalActions>\n                        <Button isDisabled={submitting} onClick={this.handleClose} type=\"button\" {...cancelButtonProps}>\n                            <FormattedMessage {...commonMessages.cancel} />\n                        </Button>\n                        <PrimaryButton\n                            isDisabled={submitting}\n                            isLoading={submitting}\n                            type=\"submit\"\n                            {...sendButtonProps}\n                        >\n                            <FormattedMessage {...commonMessages.send} />\n                        </PrimaryButton>\n                    </ModalActions>\n                )}\n            </form>\n        );\n    }\n}\n\nexport { EmailForm as EmailFormBase };\nexport default injectIntl(EmailForm);\n"],"mappings":"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","ignoreList":[]}