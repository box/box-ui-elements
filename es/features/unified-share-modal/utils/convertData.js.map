{"version":3,"file":"convertData.js","names":["getTypedFileId","getTypedFolderId","checkIsExternalUser","ACCESS_COLLAB","ACCESS_COMPANY","ACCESS_NONE","ACCESS_OPEN","INVITEE_ROLE_EDITOR","PERMISSION_CAN_DOWNLOAD","PERMISSION_CAN_PREVIEW","STATUS_ACCEPTED","STATUS_INACTIVE","TYPE_FOLDER","ALLOWED_ACCESS_LEVELS","ANYONE_IN_COMPANY","ANYONE_WITH_LINK","CAN_VIEW_DOWNLOAD","CAN_VIEW_ONLY","COLLAB_GROUP_TYPE","COLLAB_USER_TYPE","DISABLED_REASON_ACCESS_POLICY","DISABLED_REASON_MALICIOUS_CONTENT","PEOPLE_IN_ITEM","bdlDarkBlue50","bdlGray20","bdlGreenLight50","bdlLightBlue50","bdlOrange50","bdlPurpleRain50","bdlWatermelonRed50","bdlYellow50","CLASSIFICATION_COLOR_ID_0","CLASSIFICATION_COLOR_ID_1","CLASSIFICATION_COLOR_ID_2","CLASSIFICATION_COLOR_ID_3","CLASSIFICATION_COLOR_ID_4","CLASSIFICATION_COLOR_ID_5","CLASSIFICATION_COLOR_ID_6","CLASSIFICATION_COLOR_ID_7","API_TO_USM_ACCESS_LEVEL_MAP","API_TO_USM_PERMISSION_LEVEL_MAP","USM_TO_API_ACCESS_LEVEL_MAP","USM_TO_API_PERMISSION_LEVEL_MAP","API_TO_USM_CLASSIFICATION_COLORS_MAP","APP_USERS_DOMAIN_REGEXP","convertAccessLevelsDisabledReasons","disabledReasons","convertedReasons","Object","entries","forEach","level","reason","convertAllowedAccessLevels","levelsFromAPI","convertedLevels","peopleInThisItem","peopleInYourCompany","peopleWithTheLink","convertItemResponse","itemAPIData","allowed_invitee_roles","allowed_shared_link_access_levels","allowed_shared_link_access_levels_disabled_reasons","classification","id","description","extension","name","owned_by","ownerID","login","ownerEmail","permissions","shared_link","shared_link_features","download_url","isDirectLinkAvailable","password","isPasswordAvailable","type","can_download","isDownloadSettingAvailable","can_invite_collaborator","canInvite","can_preview","isPreviewAllowed","can_set_share_access","canChangeAccessLevel","can_share","itemShare","classificationData","color","definition","classificationName","bannerPolicy","body","colorID","isEditAllowed","indexOf","sharedLink","directLink","effective_access","effective_permission","is_password_enabled","isPasswordEnabled","unshared_at","expirationTimestamp","url","vanity_name","vanityName","accessLevel","permissionLevel","isDownloadAllowed","canChangeDownload","canChangePassword","canChangeExpiration","accessLevelsDisabledReason","allowedAccessLevels","canChangeVanityName","Date","getTime","isDownloadAvailable","isDownloadEnabled","isNewSharedLink","item","_objectSpread","canUserSeeClassification","grantedPermissions","hideCollaborators","typedID","convertUserResponse","userAPIData","enterprise","hostname","userEnterpriseData","enterpriseName","serverURL","convertSharedLinkPermissions","newSharedLinkPermissionLevel","sharedLinkPermissions","keys","convertSharedLinkSettings","newSettings","isExpirationEnabled","convertedSettings","toISOString","vanity_url","includes","convertCollab","collab","avatarURLMap","isCurrentUserOwner","status","ownerEmailDomain","test","split","accessible_by","userID","email","collabID","expires_at","executeAt","role","avatarURL","undefined","convertedCollab","parseInt","hasCustomAvatar","imageURL","isExternalCollab","translatedRole","toUpperCase","slice","expiration","convertCollabsResponse","collabsAPIData","length","collaborators","filter","push","convertCollabsRequest","collabRequest","existingCollaboratorsList","emails","groupIDs","permission","emailArray","groupIDArray","collabSet","Set","add","toString","roleSettings","toLowerCase","groups","groupID","has","map","users","sortByName","nameA","nameB","localeCompare","convertUserContactsResponse","contactsAPIData","currentUserID","contact","sort","convertUserContactsByEmailResponse","contactsMap","convertGroupContactsResponse","can_invite_as_collaborator"],"sources":["../../../../src/features/unified-share-modal/utils/convertData.js"],"sourcesContent":["// @flow\nimport { getTypedFileId, getTypedFolderId } from '../../../utils/file';\nimport { checkIsExternalUser } from '../../../utils/parseEmails';\nimport {\n    ACCESS_COLLAB,\n    ACCESS_COMPANY,\n    ACCESS_NONE,\n    ACCESS_OPEN,\n    INVITEE_ROLE_EDITOR,\n    PERMISSION_CAN_DOWNLOAD,\n    PERMISSION_CAN_PREVIEW,\n    STATUS_ACCEPTED,\n    STATUS_INACTIVE,\n    TYPE_FOLDER,\n} from '../../../constants';\nimport {\n    ALLOWED_ACCESS_LEVELS,\n    ANYONE_IN_COMPANY,\n    ANYONE_WITH_LINK,\n    CAN_VIEW_DOWNLOAD,\n    CAN_VIEW_ONLY,\n    COLLAB_GROUP_TYPE,\n    COLLAB_USER_TYPE,\n    DISABLED_REASON_ACCESS_POLICY,\n    DISABLED_REASON_MALICIOUS_CONTENT,\n    PEOPLE_IN_ITEM,\n} from '../constants';\nimport {\n    bdlDarkBlue50,\n    bdlGray20,\n    bdlGreenLight50,\n    bdlLightBlue50,\n    bdlOrange50,\n    bdlPurpleRain50,\n    bdlWatermelonRed50,\n    bdlYellow50,\n} from '../../../styles/variables';\nimport {\n    CLASSIFICATION_COLOR_ID_0,\n    CLASSIFICATION_COLOR_ID_1,\n    CLASSIFICATION_COLOR_ID_2,\n    CLASSIFICATION_COLOR_ID_3,\n    CLASSIFICATION_COLOR_ID_4,\n    CLASSIFICATION_COLOR_ID_5,\n    CLASSIFICATION_COLOR_ID_6,\n    CLASSIFICATION_COLOR_ID_7,\n} from '../../classification/constants';\nimport type {\n    AvatarURLMap,\n    ContentSharingCollaborationsRequest,\n    ContentSharingItemAPIResponse,\n    ContentSharingItemDataType,\n    ContentSharingUserDataType,\n    ConvertCollabOptions,\n    SharedLinkSettingsOptions,\n} from '../../../elements/content-sharing/types';\nimport type {\n    BoxItemPermission,\n    Collaborations,\n    GroupCollection,\n    SharedLink,\n    User,\n    UserCollection,\n} from '../../../common/types/core';\nimport type {\n    accessLevelsDisabledReasonType,\n    allowedAccessLevelsType,\n    collaboratorsListType,\n    collaboratorType,\n    contactType,\n    InviteCollaboratorsRequest,\n} from '../flowTypes';\n\n/**\n * The following constants are used for converting API requests\n * and responses into objects expected by the USM, and vice versa\n */\nexport const API_TO_USM_ACCESS_LEVEL_MAP = {\n    [ACCESS_COLLAB]: PEOPLE_IN_ITEM,\n    [ACCESS_COMPANY]: ANYONE_IN_COMPANY,\n    [ACCESS_OPEN]: ANYONE_WITH_LINK,\n    [ACCESS_NONE]: '',\n};\nexport const API_TO_USM_PERMISSION_LEVEL_MAP = {\n    [PERMISSION_CAN_DOWNLOAD]: CAN_VIEW_DOWNLOAD,\n    [PERMISSION_CAN_PREVIEW]: CAN_VIEW_ONLY,\n};\n\nexport const USM_TO_API_ACCESS_LEVEL_MAP = {\n    [ANYONE_IN_COMPANY]: ACCESS_COMPANY,\n    [ANYONE_WITH_LINK]: ACCESS_OPEN,\n    [PEOPLE_IN_ITEM]: ACCESS_COLLAB,\n};\n\nexport const USM_TO_API_PERMISSION_LEVEL_MAP = {\n    [CAN_VIEW_DOWNLOAD]: PERMISSION_CAN_DOWNLOAD,\n    [CAN_VIEW_ONLY]: PERMISSION_CAN_PREVIEW,\n};\n\nconst API_TO_USM_CLASSIFICATION_COLORS_MAP = {\n    [bdlYellow50]: CLASSIFICATION_COLOR_ID_0,\n    [bdlOrange50]: CLASSIFICATION_COLOR_ID_1,\n    [bdlWatermelonRed50]: CLASSIFICATION_COLOR_ID_2,\n    [bdlPurpleRain50]: CLASSIFICATION_COLOR_ID_3,\n    [bdlLightBlue50]: CLASSIFICATION_COLOR_ID_4,\n    [bdlDarkBlue50]: CLASSIFICATION_COLOR_ID_5,\n    [bdlGreenLight50]: CLASSIFICATION_COLOR_ID_6,\n    [bdlGray20]: CLASSIFICATION_COLOR_ID_7,\n};\n\nconst APP_USERS_DOMAIN_REGEXP = /boxdevedition.com/;\n\n/**\n * Convert access levels disabled reasons into USM format.\n *\n * @param {{ [string]: string }} disabledReasons\n * @returns {accessLevelsDisabledReasonType | null}\n */\nexport const convertAccessLevelsDisabledReasons = (disabledReasons?: {\n    [string]: typeof DISABLED_REASON_ACCESS_POLICY | typeof DISABLED_REASON_MALICIOUS_CONTENT | null,\n}): accessLevelsDisabledReasonType | null => {\n    if (!disabledReasons) return null;\n    const convertedReasons = {};\n    Object.entries(disabledReasons).forEach(([level, reason]) => {\n        convertedReasons[API_TO_USM_ACCESS_LEVEL_MAP[level]] = reason;\n    });\n    return convertedReasons;\n};\n\n/**\n * Convert allowed access levels into USM format.\n *\n * @param {Array<string>} [levelsFromAPI]\n * @returns {allowedAccessLevelsType | null}\n */\nexport const convertAllowedAccessLevels = (levelsFromAPI?: Array<string>): allowedAccessLevelsType | null => {\n    if (!levelsFromAPI) return null;\n    const convertedLevels = {\n        peopleInThisItem: false,\n        peopleInYourCompany: false,\n        peopleWithTheLink: false,\n    };\n    levelsFromAPI.forEach(level => {\n        convertedLevels[API_TO_USM_ACCESS_LEVEL_MAP[level]] = true;\n    });\n    return convertedLevels;\n};\n\n/**\n * Convert a response from the Item API to the object that the USM expects.\n *\n * @param {BoxItem} itemAPIData\n * @returns {ContentSharingItemDataType} Object containing item and shared link information\n */\n\nexport const convertItemResponse = (itemAPIData: ContentSharingItemAPIResponse): ContentSharingItemDataType => {\n    const {\n        allowed_invitee_roles,\n        allowed_shared_link_access_levels,\n        allowed_shared_link_access_levels_disabled_reasons,\n        classification,\n        id,\n        description,\n        extension,\n        name,\n        owned_by: { id: ownerID, login: ownerEmail },\n        permissions,\n        shared_link,\n        shared_link_features: { download_url: isDirectLinkAvailable, password: isPasswordAvailable },\n        type,\n    } = itemAPIData;\n\n    const {\n        can_download: isDownloadSettingAvailable,\n        can_invite_collaborator: canInvite,\n        can_preview: isPreviewAllowed,\n        can_set_share_access: canChangeAccessLevel,\n        can_share: itemShare,\n    } = permissions;\n\n    // Convert classification data for the item if available\n    let classificationData = {};\n    if (classification) {\n        const { color, definition, name: classificationName } = classification;\n        classificationData = {\n            bannerPolicy: {\n                body: definition,\n                colorID: API_TO_USM_CLASSIFICATION_COLORS_MAP[color],\n            },\n            classification: classificationName,\n        };\n    }\n\n    const isEditAllowed = allowed_invitee_roles.indexOf(INVITEE_ROLE_EDITOR) !== -1;\n\n    // The \"canInvite\" property is necessary even if the item does not have a shared link,\n    // because it allows users to invite individual collaborators.\n    let sharedLink = { canInvite: !!canInvite };\n\n    if (shared_link) {\n        const {\n            download_url: directLink,\n            effective_access,\n            effective_permission,\n            is_password_enabled: isPasswordEnabled,\n            password,\n            unshared_at: expirationTimestamp,\n            url,\n            vanity_name: vanityName,\n        } = shared_link;\n\n        const accessLevel = effective_access ? API_TO_USM_ACCESS_LEVEL_MAP[effective_access] : '';\n        const permissionLevel = effective_permission ? API_TO_USM_PERMISSION_LEVEL_MAP[effective_permission] : null;\n        const isDownloadAllowed = permissionLevel === API_TO_USM_PERMISSION_LEVEL_MAP.can_download;\n        const canChangeDownload =\n            canChangeAccessLevel && isDownloadSettingAvailable && effective_access !== ACCESS_COLLAB; // access must be \"company\" or \"open\"\n        const canChangePassword = canChangeAccessLevel && isPasswordAvailable;\n        const canChangeExpiration = canChangeAccessLevel && isEditAllowed;\n\n        sharedLink = {\n            accessLevel,\n            accessLevelsDisabledReason:\n                convertAccessLevelsDisabledReasons(allowed_shared_link_access_levels_disabled_reasons) || {},\n            allowedAccessLevels: convertAllowedAccessLevels(allowed_shared_link_access_levels) || ALLOWED_ACCESS_LEVELS, // show all access levels by default\n            canChangeAccessLevel,\n            canChangeDownload,\n            canChangeExpiration,\n            canChangePassword,\n            canChangeVanityName: false, // vanity URLs cannot be set via the API\n            canInvite: !!canInvite,\n            directLink,\n            expirationTimestamp: expirationTimestamp ? new Date(expirationTimestamp).getTime() : null, // convert to milliseconds\n            isDirectLinkAvailable,\n            isDownloadAllowed,\n            isDownloadAvailable: isDownloadSettingAvailable,\n            isDownloadEnabled: isDownloadAllowed,\n            isDownloadSettingAvailable,\n            isEditAllowed,\n            isNewSharedLink: false,\n            isPasswordAvailable,\n            isPasswordEnabled,\n            isPreviewAllowed,\n            password,\n            permissionLevel,\n            url,\n            vanityName: vanityName || '',\n        };\n    }\n\n    return {\n        item: {\n            canUserSeeClassification: !!classification,\n            description,\n            extension,\n            grantedPermissions: {\n                itemShare: !!itemShare,\n            },\n            hideCollaborators: false, // to do: connect to Collaborations API\n            id,\n            name,\n            ownerEmail, // the owner email is used to determine whether collaborators are external\n            ownerID, // the owner ID is used to determine whether external collaborator badges should be shown\n            permissions, // the original permissions are necessary for PUT requests to the Item API\n            type,\n            typedID: type === TYPE_FOLDER ? getTypedFolderId(id) : getTypedFileId(id),\n            ...classificationData,\n        },\n        sharedLink,\n    };\n};\n\n/**\n * Convert a response from the User API into the object that the USM expects.\n *\n * @param {User} userAPIData\n * @returns {ContentSharingUserDataType} Object containing user and enterprise information\n */\nexport const convertUserResponse = (userAPIData: User): ContentSharingUserDataType => {\n    const { enterprise, hostname, id } = userAPIData;\n\n    return {\n        id,\n        userEnterpriseData: {\n            enterpriseName: enterprise ? enterprise.name : '',\n            serverURL: hostname ? `${hostname}v/` : '',\n        },\n    };\n};\n\n/**\n * Create a shared link permissions object for the API based on a USM permission level.\n *\n * @param {string} newSharedLinkPermissionLevel\n * @returns {$Shape<BoxItemPermission>} Object containing shared link permissions\n */\nexport const convertSharedLinkPermissions = (newSharedLinkPermissionLevel: string): $Shape<BoxItemPermission> => {\n    const sharedLinkPermissions = {};\n    Object.keys(USM_TO_API_PERMISSION_LEVEL_MAP).forEach(level => {\n        if (level === newSharedLinkPermissionLevel) {\n            sharedLinkPermissions[USM_TO_API_PERMISSION_LEVEL_MAP[level]] = true;\n        } else {\n            sharedLinkPermissions[USM_TO_API_PERMISSION_LEVEL_MAP[level]] = false;\n        }\n    });\n    return sharedLinkPermissions;\n};\n\n/**\n * Convert a shared link settings object from the USM into the format that the API expects.\n * This function compares the provided access level to both API and internal USM access level constants, to accommodate two potential flows:\n * - Changing the settings for a shared link right after the shared link has been created. The access level is saved directly from the data\n *   returned by the API, so it is in API format.\n * - Changing the settings for a shared link in any other scenario. The access level is saved from the initial calls to the Item API and\n *   convertItemResponse, so it is in internal USM format.\n *\n * @param {SharedLinkSettingsOptions} newSettings\n * @param {accessLevel} string\n * @param {serverURL} string\n * @returns {$Shape<SharedLink>}\n */\nexport const convertSharedLinkSettings = (\n    newSettings: SharedLinkSettingsOptions,\n    accessLevel: string,\n    isDownloadAvailable: boolean,\n    serverURL: string,\n): $Shape<SharedLink> => {\n    const {\n        expirationTimestamp,\n        isDownloadEnabled: can_download,\n        isExpirationEnabled,\n        isPasswordEnabled,\n        password,\n        vanityName,\n    } = newSettings;\n    const convertedSettings: $Shape<SharedLink> = {\n        unshared_at: expirationTimestamp && isExpirationEnabled ? new Date(expirationTimestamp).toISOString() : null,\n        vanity_url: serverURL && vanityName ? `${serverURL}${vanityName}` : '',\n    };\n\n    // Download permissions can only be set on \"company\" or \"open\" shared links.\n    if (![ACCESS_COLLAB, PEOPLE_IN_ITEM].includes(accessLevel)) {\n        const permissions: BoxItemPermission = { can_preview: !can_download };\n        if (isDownloadAvailable) {\n            permissions.can_download = can_download;\n        }\n\n        convertedSettings.permissions = permissions;\n    }\n\n    /**\n     * This block covers the following cases:\n     * - Setting a new password: \"isPasswordEnabled\" is true, and \"password\" is a non-empty string.\n     * - Removing a password: \"isPasswordEnabled\" is false, and \"password\" is an empty string.\n     *   The API only accepts non-empty strings and null values, so the empty string must be converted to null.\n     *\n     * Other notes:\n     * - Passwords can only be set on \"open\" shared links.\n     * - Attempting to set the password field on any other type of shared link will throw a 400 error.\n     * - When other settings are updated, and a password has already been set, the SharedLinkSettingsModal\n     *   returns password = '' and isPasswordEnabled = true. In these cases, the password should *not*\n     *   be converted to null, because that would remove the existing password.\n     */\n    if ([ANYONE_WITH_LINK, ACCESS_OPEN].includes(accessLevel)) {\n        if (isPasswordEnabled && !!password) {\n            convertedSettings.password = password;\n        } else if (!isPasswordEnabled) {\n            convertedSettings.password = null;\n        }\n    }\n\n    return convertedSettings;\n};\n\n/**\n * Convert a collaborator.\n * Note: We do not retrieve the avatar URL of collaborators right after inviting them,\n * so the avatar fields (hasCustomAvatar and imageURL) are not set in that case.\n *\n * @param {ConvertCollabOptions} options\n * @returns {collaboratorType | null} Object containing a collaborator\n */\nexport const convertCollab = ({\n    collab,\n    avatarURLMap,\n    ownerEmail,\n    isCurrentUserOwner = false,\n}: ConvertCollabOptions): collaboratorType | null => {\n    if (!collab || collab.status !== STATUS_ACCEPTED) return null;\n\n    const ownerEmailDomain = ownerEmail && /@/.test(ownerEmail) ? ownerEmail.split('@')[1] : null;\n\n    const {\n        accessible_by: { id: userID, login: email, name, type },\n        id: collabID,\n        expires_at: executeAt,\n        role,\n    } = collab;\n    const avatarURL = avatarURLMap ? avatarURLMap[userID] : undefined;\n    const convertedCollab: collaboratorType = {\n        collabID: parseInt(collabID, 10),\n        email,\n        hasCustomAvatar: !!avatarURL,\n        imageURL: avatarURL,\n        isExternalCollab: checkIsExternalUser(isCurrentUserOwner, ownerEmailDomain, email),\n        name,\n        translatedRole: `${role[0].toUpperCase()}${role.slice(1)}`, // capitalize the user's role\n        type,\n        userID: parseInt(userID, 10),\n    };\n    if (executeAt) {\n        convertedCollab.expiration = { executeAt };\n    }\n    return convertedCollab;\n};\n\n/**\n * Convert a response from the Item Collaborations API into the object that the USM expects.\n *\n * @param {Collaborations} collabsAPIData\n * @param {AvatarURLMap | null} avatarURLMap\n * @param {string | null | undefined} ownerEmail\n * @param {boolean} isCurrentUserOwner\n * @returns {collaboratorsListType} Object containing an array of collaborators\n */\nexport const convertCollabsResponse = (\n    collabsAPIData: Collaborations,\n    avatarURLMap: ?AvatarURLMap,\n    ownerEmail: ?string,\n    isCurrentUserOwner: boolean,\n): collaboratorsListType => {\n    const { entries = [] } = collabsAPIData;\n\n    if (!entries.length) return { collaborators: [] };\n\n    const collaborators = [];\n\n    entries\n        // Only show accepted collaborations\n        .filter(collab => collab.status === STATUS_ACCEPTED)\n        .forEach(collab => {\n            const convertedCollab = convertCollab({ collab, avatarURLMap, ownerEmail, isCurrentUserOwner });\n            if (convertedCollab) {\n                // Necessary for Flow checking\n                collaborators.push(convertedCollab);\n            }\n        });\n\n    return { collaborators };\n};\n\n/**\n * Convert a request from the USM (specifically the Invite Collaborators Modal) into the format expected by the Collaborations API.\n * ContentSharing/USM will only call this function when at least one properly-formatted email is entered into the \"Invite People\" field.\n * Within the context of this feature, groups are identified by IDs, whereas users are identified by their emails.\n *\n * @param {InviteCollaboratorsRequest} collabRequest\n * @returns {ContentSharingCollaborationsRequest}\n */\nexport const convertCollabsRequest = (\n    collabRequest: InviteCollaboratorsRequest,\n    existingCollaboratorsList: collaboratorsListType | null,\n): ContentSharingCollaborationsRequest => {\n    const { emails, groupIDs, permission } = collabRequest;\n    const emailArray = emails ? emails.split(',') : [];\n    const groupIDArray = groupIDs ? groupIDs.split(',') : [];\n    const collabSet = new Set();\n    if (existingCollaboratorsList) {\n        existingCollaboratorsList.collaborators.forEach(collab => {\n            if (collab.type === COLLAB_USER_TYPE && !!collab.email) {\n                collabSet.add(collab.email);\n            } else if (collab.type === COLLAB_GROUP_TYPE && !!collab.userID) {\n                collabSet.add(collab.userID.toString());\n            }\n        });\n    }\n\n    const roleSettings = {\n        role: permission.toLowerCase(), // USM permissions are identical to API roles, except for the casing\n    };\n\n    const groups = groupIDArray\n        .filter(groupID => !collabSet.has(groupID))\n        .map(groupID => ({\n            accessible_by: {\n                id: groupID,\n                type: COLLAB_GROUP_TYPE,\n            },\n            ...roleSettings,\n        }));\n\n    const users = emailArray\n        .filter(email => !collabSet.has(email))\n        .map(email => ({\n            accessible_by: {\n                login: email,\n                type: COLLAB_USER_TYPE,\n            },\n            ...roleSettings,\n        }));\n\n    return { groups, users };\n};\n\nconst sortByName = ({ name: nameA = '' }, { name: nameB = '' }) => nameA.localeCompare(nameB);\n\n/**\n * Convert an enterprise users API response into an array of internal USM contacts.\n *\n * @param {UserCollection} contactsAPIData\n * @param {string|null} currentUserID\n * @returns {Array<contactType>} Array of USM contacts\n */\nexport const convertUserContactsResponse = (\n    contactsAPIData: UserCollection,\n    currentUserID: string | null,\n): Array<contactType> => {\n    const { entries = [] } = contactsAPIData;\n\n    // Return all active users except for the current user and app users\n    return entries\n        .filter(\n            ({ id, login: email, status }) =>\n                id !== currentUserID &&\n                email &&\n                !APP_USERS_DOMAIN_REGEXP.test(email) &&\n                status &&\n                status !== STATUS_INACTIVE,\n        )\n        .map(contact => {\n            const { id, login: email, name, type } = contact;\n            return {\n                id,\n                email,\n                name,\n                type,\n            };\n        })\n        .sort(sortByName);\n};\n\n/**\n * Convert an enterprise users API response into an object of internal USM contacts, keyed by email, which is\n * then passed to the mergeContacts function.\n *\n * @param {UserCollection} contactsAPIData\n * @returns { [string]: contactType } Object of USM contacts\n */\nexport const convertUserContactsByEmailResponse = (contactsAPIData: UserCollection): { [string]: contactType } => {\n    const { entries = [] } = contactsAPIData;\n    const contactsMap = {};\n\n    entries.forEach(contact => {\n        const { id, login: email = '', name, type } = contact;\n        contactsMap[email] = {\n            id,\n            email,\n            name,\n            type,\n        };\n    });\n\n    return contactsMap;\n};\n\n/**\n * Convert an enterprise groups API response into an array of internal USM contacts.\n *\n * @param {GroupCollection} contactsAPIData\n * @returns {Array<contactType>} Array of USM contacts\n */\nexport const convertGroupContactsResponse = (contactsAPIData: GroupCollection): Array<contactType> => {\n    const { entries = [] } = contactsAPIData;\n\n    // Only return groups with the correct permissions\n    return entries\n        .filter(({ permissions }) => {\n            return permissions && permissions.can_invite_as_collaborator;\n        })\n        .map(contact => {\n            const { id, name, type } = contact;\n            return {\n                id,\n                name,\n                type,\n            };\n        })\n        .sort(sortByName);\n};\n"],"mappings":"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","ignoreList":[]}