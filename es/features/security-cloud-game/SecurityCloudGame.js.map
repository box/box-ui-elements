{"version":3,"file":"SecurityCloudGame.js","names":["PropTypes","React","useEffect","useLayoutEffect","useRef","useState","FormattedMessage","injectIntl","Tooltip","DragCloud","DropCloud","messages","checkOverlap","getGridPosition","getRandomCloudPosition","CLOUD_SIZE_RATIO","GRID_TRACK_SIZE_RATIO","SecurityCloudGame","height","intl","formatMessage","onValidDrop","width","dropCloudPosition","setDropCloudPosition","dragCloudPosition","setDragCloudPosition","layout","setLayout","liveText","setLiveText","isOverlap","setIsOverlap","isValidDrop","setIsValidDrop","messageElementRef","gameBoardSizeRef","cloudSize","gameBoardHeight","gridTrackSize","current","messageElement","newGameBoardHeight","getBoundingClientRect","minGameBoardLength","Math","min","prevHeight","prevWidth","heightRatio","widthRatio","newDropCloudPosition","prevPos","x","y","nextPos","updateLiveText","text","includeTargetPosition","targetPositionText","targetPosition","onDrop","success","updatePosition","newPosition","shouldUpdateLiveText","hasOverlap","newliveText","targetInRange","currentPosition","getAccessibilityInstructions","accessibilityInstructions","renderDropCloud","createElement","className","position","renderDragCloud","gameBoardSize","disabled","renderMessage","instructions","style","ariaHidden","constrainToWindow","ref","displayName","propTypes","number","isRequired","any","func","SecurityCloudGameBase"],"sources":["../../../src/features/security-cloud-game/SecurityCloudGame.js"],"sourcesContent":["import PropTypes from 'prop-types';\nimport React, { useEffect, useLayoutEffect, useRef, useState } from 'react';\nimport { FormattedMessage, injectIntl } from 'react-intl';\n\nimport Tooltip from '../../components/tooltip';\n\nimport DragCloud from './DragCloud';\nimport DropCloud from './DropCloud';\nimport messages from './messages';\nimport { checkOverlap, getGridPosition, getRandomCloudPosition } from './utils';\n\nimport './SecurityCloudGame.scss';\n\n// pick these numbers to balance accessibility and game complexity\nconst CLOUD_SIZE_RATIO = 4;\nconst GRID_TRACK_SIZE_RATIO = 16;\n\nconst SecurityCloudGame = ({ height, intl: { formatMessage }, onValidDrop, width }) => {\n    const [dropCloudPosition, setDropCloudPosition] = useState(null);\n    const [dragCloudPosition, setDragCloudPosition] = useState(null);\n    const [layout, setLayout] = useState({});\n    // game interaction states\n    const [liveText, setLiveText] = useState('');\n    const [isOverlap, setIsOverlap] = useState(false);\n    const [isValidDrop, setIsValidDrop] = useState(false);\n\n    const messageElementRef = useRef();\n    // to handle resize events\n    const gameBoardSizeRef = useRef({});\n\n    const { cloudSize, gameBoardHeight, gridTrackSize } = layout;\n\n    useLayoutEffect(() => {\n        const { current: messageElement } = messageElementRef;\n        const newGameBoardHeight = height - messageElement.getBoundingClientRect().height;\n        // guardrail to prevent further rendering if the game board height is not positive\n        if (newGameBoardHeight <= 0) return;\n\n        const minGameBoardLength = Math.min(newGameBoardHeight, width);\n        setLayout({\n            gameBoardHeight: newGameBoardHeight,\n            cloudSize: minGameBoardLength / CLOUD_SIZE_RATIO,\n            gridTrackSize: minGameBoardLength / GRID_TRACK_SIZE_RATIO,\n        });\n    }, [height, width]);\n\n    useEffect(() => {\n        if (!gameBoardHeight) {\n            return;\n        }\n\n        const { height: prevHeight, width: prevWidth } = gameBoardSizeRef.current;\n        const heightRatio = prevHeight ? gameBoardHeight / prevHeight : 1;\n        const widthRatio = prevWidth ? width / prevWidth : 1;\n\n        // declare and update this variable first in order to generate the starting position for drag cloud\n        let newDropCloudPosition;\n        // use prevState => {} to avoid referencing and updating the state at the same time\n        setDropCloudPosition(prevPos => {\n            newDropCloudPosition = prevPos\n                ? { x: prevPos.x * widthRatio, y: prevPos.y * heightRatio } // on board resize\n                : getRandomCloudPosition(cloudSize, gameBoardHeight, width); // initial render\n            return newDropCloudPosition;\n        });\n        setDragCloudPosition(prevPos => {\n            // on board resize\n            if (prevPos) {\n                return { x: prevPos.x * widthRatio, y: prevPos.y * heightRatio };\n            }\n            let nextPos = getRandomCloudPosition(cloudSize, gameBoardHeight, width);\n            // keep generating new random position until there is no overlap\n            while (checkOverlap(nextPos, newDropCloudPosition, cloudSize)) {\n                nextPos = getRandomCloudPosition(cloudSize, gameBoardHeight, width);\n            }\n            return nextPos;\n        });\n\n        // update previous height and width for ratio calculation\n        gameBoardSizeRef.current = { height: gameBoardHeight, width };\n    }, [cloudSize, gameBoardHeight, width]);\n\n    /**\n     * Update real-time instructional messages for screen reader users.\n     * @param {string}} text - assistive text for screen readers\n     * @param {boolean} includeTargetPosition - if target/drop cloud position should be included\n     */\n    const updateLiveText = (text, includeTargetPosition = false) => {\n        if (includeTargetPosition) {\n            const targetPositionText = formatMessage(\n                messages.targetPosition,\n                getGridPosition(dropCloudPosition, gridTrackSize),\n            );\n            text += ` ${targetPositionText}`;\n        }\n\n        setLiveText(text);\n    };\n\n    /**\n     * DragCloud drop event handler. Checks if it's valid drop and handles valid drop if it is.\n     * @returns {void}\n     */\n    const onDrop = () => {\n        if (isOverlap) {\n            setIsValidDrop(true);\n            updateLiveText(formatMessage(messages.success));\n\n            if (onValidDrop) {\n                // call onValidDrop if passed in through props\n                onValidDrop();\n            }\n        }\n    };\n\n    /**\n     * Pass along to the drag cloud to set position on moving.\n     * @param {number} newPosition - new drag cloud position\n     * @param {boolean} shouldUpdateLiveText - default to false\n     * @returns {void}\n     */\n    const updatePosition = (newPosition, shouldUpdateLiveText = false) => {\n        setDragCloudPosition(newPosition);\n        const hasOverlap = checkOverlap(newPosition, dropCloudPosition, cloudSize);\n        setIsOverlap(hasOverlap);\n\n        if (shouldUpdateLiveText) {\n            const newliveText = hasOverlap\n                ? formatMessage(messages.targetInRange)\n                : formatMessage(messages.currentPosition, getGridPosition(newPosition, gridTrackSize));\n            updateLiveText(newliveText, !hasOverlap);\n        }\n    };\n\n    /**\n     * Get aria label for the message element.\n     * @returns {string|undefined}\n     */\n    const getAccessibilityInstructions = () =>\n        gameBoardHeight &&\n        cloudSize &&\n        gridTrackSize &&\n        formatMessage(\n            messages.accessibilityInstructions,\n            getGridPosition({ x: width - cloudSize, y: gameBoardHeight - cloudSize }, gridTrackSize),\n        );\n\n    /**\n     * Renders the drop cloud.\n     * @returns {JSX}\n     */\n    const renderDropCloud = () => {\n        if (dropCloudPosition && !isValidDrop) {\n            return (\n                <DropCloud className={isOverlap ? 'is-over' : ''} cloudSize={cloudSize} position={dropCloudPosition} />\n            );\n        }\n\n        return null;\n    };\n\n    /**\n     * Renders the drag cloud.\n     * @returns {JSX}\n     */\n    const renderDragCloud = () => {\n        const { current: gameBoardSize } = gameBoardSizeRef;\n\n        if (dragCloudPosition) {\n            return (\n                <DragCloud\n                    cloudSize={cloudSize}\n                    disabled={isValidDrop}\n                    gameBoardSize={gameBoardSize}\n                    gridTrackSize={gridTrackSize}\n                    onDrop={onDrop}\n                    position={dragCloudPosition}\n                    updateLiveText={updateLiveText}\n                    updatePosition={updatePosition}\n                />\n            );\n        }\n\n        return null;\n    };\n\n    /**\n     * Renders the message shown to the user\n     * @returns {JSX}\n     */\n    const renderMessage = () => {\n        if (isValidDrop) {\n            return <FormattedMessage {...messages.success} />;\n        }\n\n        return <FormattedMessage {...messages.instructions} />;\n    };\n\n    /**\n     * Renders the cloud game\n     * @returns {JSX}\n     */\n    return (\n        <div>\n            <div className=\"bdl-SecurityCloudGame-liveText\" aria-live=\"polite\">\n                {liveText}\n            </div>\n            <div className=\"bdl-SecurityCloudGame\" style={{ height: `${height}px`, width: `${width}px` }}>\n                <Tooltip\n                    ariaHidden\n                    className=\"bdl-SecurityCloudGame-tooltip\"\n                    constrainToWindow={false}\n                    position=\"bottom-center\"\n                    text={renderMessage()}\n                >\n                    <div\n                        ref={messageElementRef}\n                        className=\"bdl-SecurityCloudGame-message\"\n                        aria-label={getAccessibilityInstructions()}\n                    >\n                        {renderMessage()}\n                    </div>\n                </Tooltip>\n                <div className=\"bdl-SecurityCloudGame-board\">\n                    {renderDropCloud()}\n                    {renderDragCloud()}\n                </div>\n            </div>\n        </div>\n    );\n};\n\nSecurityCloudGame.displayName = 'SecurityCloudGame';\n\nSecurityCloudGame.propTypes = {\n    /** Height to set the game to */\n    height: PropTypes.number.isRequired,\n    /* Intl object */\n    intl: PropTypes.any,\n    /** Function to call when the `DragCloud` is successfully dropped onto the `DropCloud` */\n    onValidDrop: PropTypes.func,\n    /** Width to set the game to */\n    width: PropTypes.number.isRequired,\n};\n\nexport { SecurityCloudGame as SecurityCloudGameBase };\nexport default injectIntl(SecurityCloudGame);\n"],"mappings":"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","ignoreList":[]}