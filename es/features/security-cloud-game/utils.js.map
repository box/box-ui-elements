{"version":3,"file":"utils.js","names":["getRandomCloudPosition","cloudSize","height","width","x","Math","random","y","checkOverlap","dragCloudPosition","dropCloudPosition","dragLeft","dragTop","dragRight","dragBottom","dropLeft","dropTop","dropMidX","dropMidY","getGridPosition","position","gridTrackSize","row","floor","column"],"sources":["../../../src/features/security-cloud-game/utils.js"],"sourcesContent":["/**\n * Gets a random {x,y} position to place a cloud within the game board dimensions.\n * @returns {Object} - the {x,y} coordinates for the cloud\n */\nconst getRandomCloudPosition = (cloudSize, height, width) => {\n    // get random x position.  calculate using width of board - cloudSize - some extra padding (1% of width);\n    const x = Math.random() * (width - cloudSize - width * 0.01);\n    // get random y position.  calculate using height of board - cloudSize - some extra padding (1% of height);\n    const y = Math.random() * (height - cloudSize - height * 0.01);\n\n    return { x, y };\n};\n\n/**\n * Checks if a given position has already been occupied.\n * The actual calculations checks if the midpoint of the dropcloud image is contained within the drag cloud image.\n * @param {object} dragCloudPosition - the x,y coordinates of drag cloud\n * @param {object} dropCloudPosition - the x,y coordinates of drop cloud\n * @param {number} cloudSize - size of the cloud objects\n * @returns {boolean} - true if there is an overlap, false otherwise\n */\nconst checkOverlap = (dragCloudPosition, dropCloudPosition, cloudSize) => {\n    const { x: dragLeft, y: dragTop } = dragCloudPosition;\n    const dragRight = dragLeft + cloudSize;\n    const dragBottom = dragTop + cloudSize;\n\n    const { x: dropLeft, y: dropTop } = dropCloudPosition;\n    const dropMidX = dropLeft + cloudSize / 2;\n    const dropMidY = dropTop + cloudSize / 2;\n\n    return !(dragBottom < dropMidY || dragTop > dropMidY || dragLeft > dropMidX || dragRight < dropMidX);\n};\n\n/**\n * Get row and column numbers in grid.\n * @param {object} position - the x,y coordinates\n * @param {number} gridTrackSize - size of the space between two adjacent grid lines\n * @returns {object}\n */\nconst getGridPosition = (position, gridTrackSize) => ({\n    row: Math.floor(position.y / gridTrackSize),\n    column: Math.floor(position.x / gridTrackSize),\n});\n\nexport { checkOverlap, getGridPosition, getRandomCloudPosition };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,MAAMA,sBAAsB,GAAGA,CAACC,SAAS,EAAEC,MAAM,EAAEC,KAAK,KAAK;EACzD;EACA,MAAMC,CAAC,GAAGC,IAAI,CAACC,MAAM,CAAC,CAAC,IAAIH,KAAK,GAAGF,SAAS,GAAGE,KAAK,GAAG,IAAI,CAAC;EAC5D;EACA,MAAMI,CAAC,GAAGF,IAAI,CAACC,MAAM,CAAC,CAAC,IAAIJ,MAAM,GAAGD,SAAS,GAAGC,MAAM,GAAG,IAAI,CAAC;EAE9D,OAAO;IAAEE,CAAC;IAAEG;EAAE,CAAC;AACnB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,YAAY,GAAGA,CAACC,iBAAiB,EAAEC,iBAAiB,EAAET,SAAS,KAAK;EACtE,MAAM;IAAEG,CAAC,EAAEO,QAAQ;IAAEJ,CAAC,EAAEK;EAAQ,CAAC,GAAGH,iBAAiB;EACrD,MAAMI,SAAS,GAAGF,QAAQ,GAAGV,SAAS;EACtC,MAAMa,UAAU,GAAGF,OAAO,GAAGX,SAAS;EAEtC,MAAM;IAAEG,CAAC,EAAEW,QAAQ;IAAER,CAAC,EAAES;EAAQ,CAAC,GAAGN,iBAAiB;EACrD,MAAMO,QAAQ,GAAGF,QAAQ,GAAGd,SAAS,GAAG,CAAC;EACzC,MAAMiB,QAAQ,GAAGF,OAAO,GAAGf,SAAS,GAAG,CAAC;EAExC,OAAO,EAAEa,UAAU,GAAGI,QAAQ,IAAIN,OAAO,GAAGM,QAAQ,IAAIP,QAAQ,GAAGM,QAAQ,IAAIJ,SAAS,GAAGI,QAAQ,CAAC;AACxG,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,MAAME,eAAe,GAAGA,CAACC,QAAQ,EAAEC,aAAa,MAAM;EAClDC,GAAG,EAAEjB,IAAI,CAACkB,KAAK,CAACH,QAAQ,CAACb,CAAC,GAAGc,aAAa,CAAC;EAC3CG,MAAM,EAAEnB,IAAI,CAACkB,KAAK,CAACH,QAAQ,CAAChB,CAAC,GAAGiB,aAAa;AACjD,CAAC,CAAC;AAEF,SAASb,YAAY,EAAEW,eAAe,EAAEnB,sBAAsB","ignoreList":[]}