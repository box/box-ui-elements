{"version":3,"file":"SecurityControls.js","names":["React","FormattedMessage","DEFAULT_MAX_APP_COUNT","SECURITY_CONTROLS_FORMAT","getShortSecurityControlsMessage","getFullSecurityControlsMessages","messages","PlainButton","Label","SecurityControlsItem","SecurityControlsModal","FULL","SHORT","SHORT_WITH_BTN","SecurityControls","Component","constructor","args","_defineProperty","isSecurityControlsModalOpen","setState","render","classificationColor","classificationName","controls","controlsFormat","definition","itemName","maxAppCount","shouldRenderLabel","shouldDisplayAppsAsIntegrations","props","items","modalItems","length","state","shouldShowSecurityControlsModal","itemsList","createElement","className","map","message","tooltipMessage","index","key","text","securityControlsLabel","Fragment","onClick","openModal","type","viewAll","closeModal"],"sources":["../../../../src/features/classification/security-controls/SecurityControls.js"],"sourcesContent":["// @flow\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\n\nimport { DEFAULT_MAX_APP_COUNT, SECURITY_CONTROLS_FORMAT } from '../constants';\nimport { getShortSecurityControlsMessage, getFullSecurityControlsMessages } from './utils';\nimport messages from './messages';\nimport PlainButton from '../../../components/plain-button';\nimport Label from '../../../components/label/Label';\nimport SecurityControlsItem from './SecurityControlsItem';\nimport SecurityControlsModal from './SecurityControlsModal';\nimport type { Controls, ControlsFormat } from '../flowTypes';\n\nimport './SecurityControls.scss';\n\nconst { FULL, SHORT, SHORT_WITH_BTN } = SECURITY_CONTROLS_FORMAT;\n\ntype Props = {\n    classificationColor?: string,\n    classificationName?: string,\n    controls: Controls,\n    controlsFormat: ControlsFormat,\n    definition?: string,\n    itemName?: string,\n    maxAppCount?: number,\n    shouldRenderLabel?: boolean,\n    shouldDisplayAppsAsIntegrations?: boolean,\n};\n\ntype State = {\n    isSecurityControlsModalOpen: boolean,\n};\n\nclass SecurityControls extends React.Component<Props, State> {\n    static defaultProps = {\n        classificationName: '',\n        definition: '',\n        itemName: '',\n        controls: {},\n        controlsFormat: SHORT,\n        maxAppCount: DEFAULT_MAX_APP_COUNT,\n        shouldRenderLabel: false,\n        shouldDisplayAppsAsIntegrations: false,\n    };\n\n    state = {\n        isSecurityControlsModalOpen: false,\n    };\n\n    openModal = () => this.setState({ isSecurityControlsModalOpen: true });\n\n    closeModal = () => this.setState({ isSecurityControlsModalOpen: false });\n\n    render() {\n        const {\n            classificationColor,\n            classificationName,\n            controls,\n            controlsFormat,\n            definition,\n            itemName,\n            maxAppCount,\n            shouldRenderLabel,\n            shouldDisplayAppsAsIntegrations,\n        } = this.props;\n\n        let items = [];\n        let modalItems;\n\n        if (controlsFormat === FULL) {\n            items = getFullSecurityControlsMessages(controls, maxAppCount, shouldDisplayAppsAsIntegrations);\n        } else {\n            items = getShortSecurityControlsMessage(controls, shouldDisplayAppsAsIntegrations);\n\n            if (items.length && controlsFormat === SHORT_WITH_BTN) {\n                modalItems = getFullSecurityControlsMessages(controls, maxAppCount, shouldDisplayAppsAsIntegrations);\n            }\n        }\n\n        if (!items.length) {\n            return null;\n        }\n\n        const { isSecurityControlsModalOpen } = this.state;\n        const shouldShowSecurityControlsModal =\n            controlsFormat === SHORT_WITH_BTN && !!itemName && !!classificationName && !!definition;\n\n        let itemsList = (\n            <ul className=\"bdl-SecurityControls\">\n                {items.map(({ message, tooltipMessage }, index) => (\n                    <SecurityControlsItem key={index} message={message} tooltipMessage={tooltipMessage} />\n                ))}\n            </ul>\n        );\n\n        if (shouldRenderLabel) {\n            itemsList = <Label text={<FormattedMessage {...messages.securityControlsLabel} />}>{itemsList}</Label>;\n        }\n\n        return (\n            <>\n                {itemsList}\n                {shouldShowSecurityControlsModal && (\n                    <>\n                        <PlainButton className=\"lnk\" onClick={this.openModal} type=\"button\">\n                            <FormattedMessage {...messages.viewAll} />\n                        </PlainButton>\n                        <SecurityControlsModal\n                            classificationColor={classificationColor}\n                            classificationName={classificationName}\n                            closeModal={this.closeModal}\n                            definition={definition}\n                            itemName={itemName}\n                            isSecurityControlsModalOpen={isSecurityControlsModalOpen}\n                            modalItems={modalItems}\n                        />\n                    </>\n                )}\n            </>\n        );\n    }\n}\n\nexport type { Props as SecurityControlsProps };\nexport default SecurityControls;\n"],"mappings":";;;AACA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,gBAAgB,QAAQ,YAAY;AAE7C,SAASC,qBAAqB,EAAEC,wBAAwB,QAAQ,cAAc;AAC9E,SAASC,+BAA+B,EAAEC,+BAA+B,QAAQ,SAAS;AAC1F,OAAOC,QAAQ,MAAM,YAAY;AACjC,OAAOC,WAAW,MAAM,kCAAkC;AAC1D,OAAOC,KAAK,MAAM,iCAAiC;AACnD,OAAOC,oBAAoB,MAAM,wBAAwB;AACzD,OAAOC,qBAAqB,MAAM,yBAAyB;AAG3D,OAAO,yBAAyB;AAEhC,MAAM;EAAEC,IAAI;EAAEC,KAAK;EAAEC;AAAe,CAAC,GAAGV,wBAAwB;AAkBhE,MAAMW,gBAAgB,SAASd,KAAK,CAACe,SAAS,CAAe;EAAAC,YAAA,GAAAC,IAAA;IAAA,SAAAA,IAAA;IAAAC,eAAA,gBAYjD;MACJC,2BAA2B,EAAE;IACjC,CAAC;IAAAD,eAAA,oBAEW,MAAM,IAAI,CAACE,QAAQ,CAAC;MAAED,2BAA2B,EAAE;IAAK,CAAC,CAAC;IAAAD,eAAA,qBAEzD,MAAM,IAAI,CAACE,QAAQ,CAAC;MAAED,2BAA2B,EAAE;IAAM,CAAC,CAAC;EAAA;EAExEE,MAAMA,CAAA,EAAG;IACL,MAAM;MACFC,mBAAmB;MACnBC,kBAAkB;MAClBC,QAAQ;MACRC,cAAc;MACdC,UAAU;MACVC,QAAQ;MACRC,WAAW;MACXC,iBAAiB;MACjBC;IACJ,CAAC,GAAG,IAAI,CAACC,KAAK;IAEd,IAAIC,KAAK,GAAG,EAAE;IACd,IAAIC,UAAU;IAEd,IAAIR,cAAc,KAAKd,IAAI,EAAE;MACzBqB,KAAK,GAAG3B,+BAA+B,CAACmB,QAAQ,EAAEI,WAAW,EAAEE,+BAA+B,CAAC;IACnG,CAAC,MAAM;MACHE,KAAK,GAAG5B,+BAA+B,CAACoB,QAAQ,EAAEM,+BAA+B,CAAC;MAElF,IAAIE,KAAK,CAACE,MAAM,IAAIT,cAAc,KAAKZ,cAAc,EAAE;QACnDoB,UAAU,GAAG5B,+BAA+B,CAACmB,QAAQ,EAAEI,WAAW,EAAEE,+BAA+B,CAAC;MACxG;IACJ;IAEA,IAAI,CAACE,KAAK,CAACE,MAAM,EAAE;MACf,OAAO,IAAI;IACf;IAEA,MAAM;MAAEf;IAA4B,CAAC,GAAG,IAAI,CAACgB,KAAK;IAClD,MAAMC,+BAA+B,GACjCX,cAAc,KAAKZ,cAAc,IAAI,CAAC,CAACc,QAAQ,IAAI,CAAC,CAACJ,kBAAkB,IAAI,CAAC,CAACG,UAAU;IAE3F,IAAIW,SAAS,gBACTrC,KAAA,CAAAsC,aAAA;MAAIC,SAAS,EAAC;IAAsB,GAC/BP,KAAK,CAACQ,GAAG,CAAC,CAAC;MAAEC,OAAO;MAAEC;IAAe,CAAC,EAAEC,KAAK,kBAC1C3C,KAAA,CAAAsC,aAAA,CAAC7B,oBAAoB;MAACmC,GAAG,EAAED,KAAM;MAACF,OAAO,EAAEA,OAAQ;MAACC,cAAc,EAAEA;IAAe,CAAE,CACxF,CACD,CACP;IAED,IAAIb,iBAAiB,EAAE;MACnBQ,SAAS,gBAAGrC,KAAA,CAAAsC,aAAA,CAAC9B,KAAK;QAACqC,IAAI,eAAE7C,KAAA,CAAAsC,aAAA,CAACrC,gBAAgB,EAAKK,QAAQ,CAACwC,qBAAwB;MAAE,GAAET,SAAiB,CAAC;IAC1G;IAEA,oBACIrC,KAAA,CAAAsC,aAAA,CAAAtC,KAAA,CAAA+C,QAAA,QACKV,SAAS,EACTD,+BAA+B,iBAC5BpC,KAAA,CAAAsC,aAAA,CAAAtC,KAAA,CAAA+C,QAAA,qBACI/C,KAAA,CAAAsC,aAAA,CAAC/B,WAAW;MAACgC,SAAS,EAAC,KAAK;MAACS,OAAO,EAAE,IAAI,CAACC,SAAU;MAACC,IAAI,EAAC;IAAQ,gBAC/DlD,KAAA,CAAAsC,aAAA,CAACrC,gBAAgB,EAAKK,QAAQ,CAAC6C,OAAU,CAChC,CAAC,eACdnD,KAAA,CAAAsC,aAAA,CAAC5B,qBAAqB;MAClBY,mBAAmB,EAAEA,mBAAoB;MACzCC,kBAAkB,EAAEA,kBAAmB;MACvC6B,UAAU,EAAE,IAAI,CAACA,UAAW;MAC5B1B,UAAU,EAAEA,UAAW;MACvBC,QAAQ,EAAEA,QAAS;MACnBR,2BAA2B,EAAEA,2BAA4B;MACzDc,UAAU,EAAEA;IAAW,CAC1B,CACH,CAER,CAAC;EAEX;AACJ;AAACf,eAAA,CAxFKJ,gBAAgB,kBACI;EAClBS,kBAAkB,EAAE,EAAE;EACtBG,UAAU,EAAE,EAAE;EACdC,QAAQ,EAAE,EAAE;EACZH,QAAQ,EAAE,CAAC,CAAC;EACZC,cAAc,EAAEb,KAAK;EACrBgB,WAAW,EAAE1B,qBAAqB;EAClC2B,iBAAiB,EAAE,KAAK;EACxBC,+BAA+B,EAAE;AACrC,CAAC;AAiFL,eAAehB,gBAAgB","ignoreList":[]}