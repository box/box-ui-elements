{"version":3,"file":"MetadataBasedItemList.js","names":["React","Fragment","FormattedMessage","AutoSizer","classNames","find","getProp","isEqual","isNil","isString","MultiGrid","MetadataField","ReadOnlyMetadataField","FileIcon","IconWithTooltip","PlainButton","getFileExtension","messages","CANCEL_ICON_TYPE","EDIT_ICON_TYPE","FILE_ICON_COLUMN_INDEX","FILE_ICON_COLUMN_WIDTH","FILE_ICON_SIZE","FILE_NAME_COLUMN_INDEX","FILE_NAME_COLUMN_WIDTH","FIXED_COLUMNS_NUMBER","FIXED_ROW_NUMBER","HEADER_ROW_INDEX","MIN_METADATA_COLUMN_WIDTH","SAVE_ICON_TYPE","FIELD_TYPE_FLOAT","FIELD_TYPE_INTEGER","FIELD_TYPE_STRING","FIELD_METADATA","MetadataBasedItemList","Component","constructor","props","_defineProperty","editedColumnIndex","editedRowIndex","hoveredRowIndex","hoveredColumnIndex","isUpdating","scrollLeftOffset","scrollRightOffset","item","permissions","can_preview","can_upload","_objectSpread","setState","field","type","currentValue","editedValue","onMetadataUpdate","getItemWithPermissions","getValueForType","columnIndex","rowIndex","clientWidth","scrollLeft","scrollWidth","key","style","state","isHeaderRow","isFileIconCell","isFileNameCell","isGridRowHovered","data","getGridHeaderData","getGridCellData","classes","createElement","className","onMouseEnter","handleMouseEnter","onMouseLeave","handleMouseLeave","getInitialState","componentDidUpdate","prevProps","prevItems","currentItems","valueBeingEdited","undefined","getQueryResponseFields","fields","map","displayName","getColumnWidth","width","fieldsToShow","index","availableWidth","Math","max","length","handleItemClick","onItemClick","handleEditIconClick","value","parseFloat","parseInt","isMetadataField","startsWith","getFieldNameFromKey","split","pop","currentCollection","items","isCellBeingEdited","isCellHovered","fieldToShow","isCellEditable","id","name","cellData","dimension","extension","onClick","options","fieldName","shouldShowEditIcon","dataValue","tooltipText","editLabel","canEdit","dataKey","onChange","changeKey","changedValue","onRemove","handleCancelEdit","cancel","handleSave","save","responseFields","getScrollPositionClasses","isViewScrolledLeft","calculateContentWidth","isViewScrolledRight","isViewScrolledInMiddle","render","rowCount","height","scrollClasses","classesTopRightGrid","classesBottomRightGrid","cellRenderer","classNameBottomRightGrid","classNameTopRightGrid","columnCount","columnWidth","fixedColumnCount","fixedRowCount","hideBottomLeftGridScrollbar","hideTopRightGridScrollbar","rowHeight","onScroll","handleContentScroll"],"sources":["../../../src/features/metadata-based-view/MetadataBasedItemList.js"],"sourcesContent":["// @flow strict\n\nimport React, { type Element, Fragment } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport AutoSizer from '@box/react-virtualized/dist/es/AutoSizer';\nimport classNames from 'classnames';\nimport find from 'lodash/find';\nimport getProp from 'lodash/get';\nimport isEqual from 'lodash/isEqual';\nimport isNil from 'lodash/isNil';\nimport isString from 'lodash/isString';\nimport MultiGrid from '@box/react-virtualized/dist/es/MultiGrid/MultiGrid';\n\nimport MetadataField from '../metadata-instance-fields/MetadataField';\nimport ReadOnlyMetadataField from '../metadata-instance-fields/ReadOnlyMetadataField';\nimport FileIcon from '../../icons/file-icon';\nimport IconWithTooltip from './IconWithTooltip';\nimport PlainButton from '../../components/plain-button';\n\nimport { getFileExtension } from '../../utils/file';\nimport messages from '../../elements/common/messages';\n\nimport './MetadataBasedItemList.scss';\n\nimport type { MetadataFieldConfig, FieldsToShow } from '../../common/types/metadataQueries';\nimport type { MetadataFieldValue } from '../../common/types/metadata';\nimport type { StringAnyMap, Collection, BoxItem } from '../../common/types/core';\n\nimport {\n    CANCEL_ICON_TYPE,\n    EDIT_ICON_TYPE,\n    FILE_ICON_COLUMN_INDEX,\n    FILE_ICON_COLUMN_WIDTH,\n    FILE_ICON_SIZE,\n    FILE_NAME_COLUMN_INDEX,\n    FILE_NAME_COLUMN_WIDTH,\n    FIXED_COLUMNS_NUMBER,\n    FIXED_ROW_NUMBER,\n    HEADER_ROW_INDEX,\n    MIN_METADATA_COLUMN_WIDTH,\n    SAVE_ICON_TYPE,\n} from './constants';\nimport { FIELD_TYPE_FLOAT, FIELD_TYPE_INTEGER, FIELD_TYPE_STRING } from '../metadata-instance-fields/constants';\nimport { FIELD_METADATA } from '../../constants';\n\ntype State = {\n    editedColumnIndex: number,\n    editedRowIndex: number,\n    hoveredColumnIndex: number,\n    hoveredRowIndex: number,\n    isUpdating: boolean,\n    scrollLeftOffset: number,\n    scrollRightOffset: number,\n    valueBeingEdited?: ?MetadataFieldValue,\n};\n\ntype Props = {\n    currentCollection: Collection,\n    fieldsToShow: FieldsToShow,\n    onItemClick: BoxItem => void,\n    onMetadataUpdate: (BoxItem, string, ?MetadataFieldValue, ?MetadataFieldValue) => void,\n};\n\ntype CellRendererArgs = {\n    columnIndex: number,\n    key: string,\n    rowIndex: number,\n    style: StringAnyMap,\n};\n\ntype ColumnWidthCallback = ({ index: number }) => number;\ntype GridCellData = Element<typeof FileIcon | typeof PlainButton | typeof Fragment>;\n\ntype ScrollPositionClasses = {\n    'is-scrolledLeft': boolean,\n    'is-scrolledMiddle': boolean,\n    'is-scrolledRight': boolean,\n};\n\ntype ScrollEventData = {\n    clientWidth: number,\n    scrollLeft: number,\n    scrollWidth: number,\n};\n\nclass MetadataBasedItemList extends React.Component<Props, State> {\n    props: Props;\n\n    constructor(props: Props) {\n        super(props);\n        this.state = this.getInitialState();\n    }\n\n    getInitialState = () => {\n        return {\n            editedColumnIndex: -1,\n            editedRowIndex: -1,\n            hoveredRowIndex: -1,\n            hoveredColumnIndex: -1,\n            isUpdating: false,\n            scrollLeftOffset: 0,\n            scrollRightOffset: 0,\n        };\n    };\n\n    componentDidUpdate(prevProps: Props) {\n        const prevItems = getProp(prevProps, 'currentCollection.items');\n        const currentItems = getProp(this.props, 'currentCollection.items');\n\n        if (!isEqual(currentItems, prevItems)) {\n            // Either the view was refreshed or metadata was updated, reset edit part of the state to initial values\n            this.setState({\n                editedColumnIndex: -1,\n                editedRowIndex: -1,\n                isUpdating: false,\n                valueBeingEdited: undefined,\n            });\n        }\n    }\n\n    getQueryResponseFields() {\n        const fields = getProp(this.props, 'currentCollection.items[0].metadata.enterprise.fields', []);\n        return fields.map(({ key, displayName }) => ({ key, displayName }));\n    }\n\n    getColumnWidth(width: number): ColumnWidthCallback {\n        const { fieldsToShow } = this.props;\n\n        return ({ index }: { index: number }): number => {\n            if (index === FILE_ICON_COLUMN_INDEX) {\n                return FILE_ICON_COLUMN_WIDTH;\n            }\n\n            if (index === FILE_NAME_COLUMN_INDEX) {\n                return FILE_NAME_COLUMN_WIDTH;\n            }\n\n            const availableWidth = width - FILE_NAME_COLUMN_WIDTH - FILE_ICON_COLUMN_WIDTH; // total width minus width of sticky columns\n            // Maintain min column width, else occupy the rest of the space equally\n            return Math.max(availableWidth / fieldsToShow.length, MIN_METADATA_COLUMN_WIDTH);\n        };\n    }\n\n    getItemWithPermissions = (item: BoxItem): BoxItem => {\n        /*\n            - @TODO: Remove permissions object once its part of API response.\n            - add \"can_preview: true\" so that users can click to launch the Preview modal. If users don't have access, they will see the error when Preview loads.\n            - add \"can_upload: true\" so that users can update the metadata values.\n        */\n        const permissions = { can_preview: true, can_upload: true };\n        return { ...item, permissions };\n    };\n\n    handleItemClick(item: BoxItem): void {\n        const { onItemClick }: Props = this.props;\n        onItemClick(this.getItemWithPermissions(item));\n    }\n\n    handleEditIconClick(columnIndex: number, rowIndex: number, value: string): void {\n        this.setState({\n            editedColumnIndex: columnIndex,\n            editedRowIndex: rowIndex,\n            valueBeingEdited: value,\n        });\n    }\n\n    handleCancelEdit = (): void => {\n        this.setState({\n            editedColumnIndex: -1,\n            editedRowIndex: -1,\n        });\n    };\n\n    handleSave = (\n        item: BoxItem,\n        field: string,\n        type: string,\n        currentValue: ?MetadataFieldValue,\n        editedValue: ?MetadataFieldValue,\n    ): void => {\n        const { onMetadataUpdate } = this.props;\n        onMetadataUpdate(\n            this.getItemWithPermissions(item),\n            field,\n            currentValue,\n            this.getValueForType(type, editedValue),\n        );\n        this.setState({ isUpdating: true });\n    };\n\n    handleMouseEnter = (columnIndex: number, rowIndex: number): void =>\n        this.setState({\n            hoveredColumnIndex: columnIndex,\n            hoveredRowIndex: rowIndex,\n        });\n\n    handleMouseLeave = (): void =>\n        this.setState({\n            hoveredRowIndex: -1,\n            hoveredColumnIndex: -1,\n        });\n\n    handleContentScroll = ({ clientWidth, scrollLeft, scrollWidth }: ScrollEventData): void => {\n        this.setState({\n            scrollLeftOffset: scrollLeft,\n            scrollRightOffset: scrollWidth - clientWidth - scrollLeft,\n        });\n    };\n\n    getValueForType(type: string, value: MetadataFieldValue) {\n        if (type === FIELD_TYPE_FLOAT && !isNil(value)) {\n            return parseFloat(value);\n        }\n\n        if (type === FIELD_TYPE_INTEGER && !isNil(value)) {\n            return parseInt(value, 10);\n        }\n\n        return value;\n    }\n\n    isMetadataField(key: string): boolean {\n        return key.startsWith(`${FIELD_METADATA}.`);\n    }\n\n    getFieldNameFromKey(key: string): string {\n        return key.split('.').pop();\n    }\n\n    getGridCellData(columnIndex: number, rowIndex: number): GridCellData | void {\n        const {\n            currentCollection: { items = [] },\n            fieldsToShow,\n        }: Props = this.props;\n\n        const {\n            editedColumnIndex,\n            editedRowIndex,\n            hoveredColumnIndex,\n            hoveredRowIndex,\n            isUpdating,\n            valueBeingEdited,\n        }: State = this.state;\n        const isCellBeingEdited = columnIndex === editedColumnIndex && rowIndex === editedRowIndex;\n        const isCellHovered = columnIndex === hoveredColumnIndex && rowIndex === hoveredRowIndex;\n\n        const fieldToShow = fieldsToShow[columnIndex - FIXED_COLUMNS_NUMBER];\n        const isCellEditable = !isCellBeingEdited && isCellHovered && getProp(fieldToShow, 'canEdit', false);\n        const item = items[rowIndex - 1];\n        const { id, name } = item;\n        const fields = getProp(item, 'metadata.enterprise.fields', []);\n        let cellData;\n\n        switch (columnIndex) {\n            case FILE_ICON_COLUMN_INDEX:\n                cellData = <FileIcon dimension={FILE_ICON_SIZE} extension={getFileExtension(name)} />;\n                break;\n            case FILE_NAME_COLUMN_INDEX:\n                cellData = (\n                    <PlainButton type=\"button\" onClick={() => this.handleItemClick(item)}>\n                        {name}\n                    </PlainButton>\n                );\n                break;\n            default: {\n                const key = isString(fieldToShow) ? fieldToShow : fieldToShow.key;\n                let field;\n                let type = FIELD_TYPE_STRING;\n                let value;\n                let options = [];\n                const isMetadataField = this.isMetadataField(key);\n\n                if (isMetadataField) {\n                    // If field is metadata instance field\n                    field = find(fields, ['key', key]);\n                    if (!field) {\n                        return cellData;\n                    }\n                    ({ type, value, options = [] } = field);\n                } else {\n                    // If field is item field, e.g. name, size, description etc.\n                    value = getProp(item, key);\n                }\n                const fieldName = this.getFieldNameFromKey(key);\n                const shouldShowEditIcon = isCellEditable && isString(type);\n                cellData = (\n                    <>\n                        {!isCellBeingEdited && <ReadOnlyMetadataField dataValue={value} displayName=\"\" type={type} />}\n                        {shouldShowEditIcon && (\n                            <IconWithTooltip\n                                type={EDIT_ICON_TYPE}\n                                tooltipText={<FormattedMessage {...messages.editLabel} />}\n                                onClick={() => this.handleEditIconClick(columnIndex, rowIndex, value)}\n                            />\n                        )}\n                        {isCellBeingEdited && (\n                            <div className=\"bdl-MetadataBasedItemList-cell--edit\">\n                                <MetadataField\n                                    canEdit\n                                    dataKey={`${id}${key}`}\n                                    dataValue={valueBeingEdited}\n                                    displayName=\"\"\n                                    type={type}\n                                    onChange={(changeKey, changedValue) => {\n                                        this.setState({\n                                            valueBeingEdited: changedValue,\n                                        });\n                                    }}\n                                    onRemove={() => {\n                                        this.setState({\n                                            valueBeingEdited: undefined,\n                                        });\n                                    }}\n                                    options={options}\n                                />\n                                <IconWithTooltip\n                                    className=\"bdl-MetadataBasedItemList-cell--cancelIcon\"\n                                    onClick={this.handleCancelEdit}\n                                    tooltipText={<FormattedMessage {...messages.cancel} />}\n                                    type={CANCEL_ICON_TYPE}\n                                />\n                                {value !== valueBeingEdited && (\n                                    <IconWithTooltip\n                                        className=\"bdl-MetadataBasedItemList-cell--saveIcon\"\n                                        onClick={() => this.handleSave(item, fieldName, type, value, valueBeingEdited)}\n                                        tooltipText={<FormattedMessage {...messages.save} />}\n                                        type={SAVE_ICON_TYPE}\n                                        isUpdating={isUpdating}\n                                    />\n                                )}\n                            </div>\n                        )}\n                    </>\n                );\n            }\n        }\n\n        return cellData;\n    }\n\n    getGridHeaderData(columnIndex: number): string | Element<typeof FormattedMessage> | void {\n        const { fieldsToShow } = this.props;\n\n        if (columnIndex === 0) return undefined;\n        if (columnIndex === FILE_NAME_COLUMN_INDEX) {\n            return <FormattedMessage {...messages.name} />; // \"Name\" column header\n        }\n\n        const responseFields = this.getQueryResponseFields();\n        const field: string | MetadataFieldConfig = fieldsToShow[columnIndex - FIXED_COLUMNS_NUMBER];\n        const key = isString(field) ? field : field.key;\n\n        // Derive displayName in following order:\n        // 1. fieldsToShow prop ||\n        // 2. metadata template instance ||\n        // 3. field key\n        const displayName =\n            getProp(field, 'displayName') || getProp(find(responseFields, ['key', key]), 'displayName', key);\n\n        return displayName;\n    }\n\n    cellRenderer = ({ columnIndex, rowIndex, key, style }: CellRendererArgs): Element<'div'> => {\n        const { hoveredRowIndex } = this.state;\n        const isHeaderRow = rowIndex === HEADER_ROW_INDEX;\n        const isFileIconCell = !isHeaderRow && columnIndex === FILE_ICON_COLUMN_INDEX;\n        const isFileNameCell = !isHeaderRow && columnIndex === FILE_NAME_COLUMN_INDEX;\n        const isGridRowHovered = !isHeaderRow && rowIndex === hoveredRowIndex;\n\n        const data = isHeaderRow ? this.getGridHeaderData(columnIndex) : this.getGridCellData(columnIndex, rowIndex);\n\n        const classes = classNames('bdl-MetadataBasedItemList-cell', {\n            'bdl-MetadataBasedItemList-cell--fileIcon': isFileIconCell,\n            'bdl-MetadataBasedItemList-cell--filename': isFileNameCell,\n            'bdl-MetadataBasedItemList-cell--hover': isGridRowHovered,\n        });\n\n        return (\n            <div\n                className={classes}\n                key={key}\n                onMouseEnter={() => this.handleMouseEnter(columnIndex, rowIndex)}\n                onMouseLeave={this.handleMouseLeave}\n                style={style}\n            >\n                {data}\n            </div>\n        );\n    };\n\n    getScrollPositionClasses(width: number): ScrollPositionClasses {\n        const { scrollLeftOffset, scrollRightOffset } = this.state;\n        const isViewScrolledLeft = this.calculateContentWidth() > width && scrollRightOffset > 0;\n        const isViewScrolledRight = scrollLeftOffset > 0;\n        const isViewScrolledInMiddle = isViewScrolledLeft && isViewScrolledRight;\n\n        return {\n            'is-scrolledLeft': isViewScrolledLeft && !isViewScrolledInMiddle, // content scrolled all the way to the left\n            'is-scrolledRight': isViewScrolledRight && !isViewScrolledInMiddle, // content scrolled all the way to the right\n            'is-scrolledMiddle': isViewScrolledInMiddle, // content scrolled somewhere in between\n        };\n    }\n\n    calculateContentWidth(): number {\n        const { fieldsToShow } = this.props;\n        // total width = sum of widths of sticky & non-sticky columns\n        return FILE_ICON_COLUMN_WIDTH + FILE_NAME_COLUMN_WIDTH + fieldsToShow.length * MIN_METADATA_COLUMN_WIDTH;\n    }\n\n    render() {\n        const { currentCollection, fieldsToShow }: Props = this.props;\n        const rowCount = currentCollection.items ? currentCollection.items.length : 0;\n\n        return (\n            <AutoSizer>\n                {({ width, height }) => {\n                    const scrollClasses = this.getScrollPositionClasses(width);\n                    const classesTopRightGrid = classNames('bdl-MetadataBasedItemList-topRightGrid', scrollClasses);\n                    const classesBottomRightGrid = classNames(\n                        'bdl-MetadataBasedItemList-bottomRightGrid',\n                        scrollClasses,\n                    );\n                    return (\n                        <div className=\"bdl-MetadataBasedItemList\" data-testid=\"metadata-based-item-list\">\n                            <MultiGrid\n                                cellRenderer={this.cellRenderer}\n                                classNameBottomRightGrid={classesBottomRightGrid}\n                                classNameTopRightGrid={classesTopRightGrid}\n                                columnCount={fieldsToShow.length + FIXED_COLUMNS_NUMBER}\n                                columnWidth={this.getColumnWidth(width)}\n                                fixedColumnCount={FIXED_COLUMNS_NUMBER}\n                                fixedRowCount={FIXED_ROW_NUMBER}\n                                height={height}\n                                hideBottomLeftGridScrollbar\n                                hideTopRightGridScrollbar\n                                rowCount={rowCount + FIXED_ROW_NUMBER}\n                                rowHeight={50}\n                                width={width}\n                                onScroll={this.handleContentScroll}\n                            />\n                        </div>\n                    );\n                }}\n            </AutoSizer>\n        );\n    }\n}\n\nexport default MetadataBasedItemList;\n"],"mappings":"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","ignoreList":[]}