{"version":3,"file":"MetadataQueryAPIHelper.js","names":["cloneDeep","find","getProp","includes","isArray","isNil","API","ITEM_TYPE_FILE","JSON_PATCH_OP_ADD","JSON_PATCH_OP_REMOVE","JSON_PATCH_OP_REPLACE","JSON_PATCH_OP_TEST","METADATA_FIELD_TYPE_ENUM","METADATA_FIELD_TYPE_MULTISELECT","FIELD_NAME","FIELD_METADATA","SELECT_TYPES","MetadataQueryAPIHelper","constructor","api","_defineProperty","field","oldValue","newValue","operation","testOp","op","path","value","patchOp","fields","from","metadataQuery","filter","map","split","pop","metadata","templateFields","metadataTemplate","instance","templateScope","templateKey","queryFields","getMetadataQueryFields","queryField","templateField","type","displayName","key","options","enterprise","id","$id","metadataEntry","_objectSpread","flattenMetadata","response","entries","next_marker","entry","templateSchemaResponse","metadataQueryResponseData","items","flattenResponseEntry","nextMarker","data","filterMetdataQueryResponse","length","Promise","resolve","Object","keys","getMetadataAPI","getSchemaByTemplateKey","reject","getMetadataQueryAPI","queryMetadata","forceFetch","successsCallback","errorCallback","verifyQueryFields","then","getTemplateSchemaInfo","getFlattenedDataWithTypes","catch","file","operations","createJSONPatchOperations","updateMetadata","clonedQuery","clonedFields","push"],"sources":["../../../src/features/metadata-based-view/MetadataQueryAPIHelper.js"],"sourcesContent":["/**\n * @flow strict\n * @file Metadata Queries API Helper\n * @author Box\n */\nimport cloneDeep from 'lodash/cloneDeep';\nimport find from 'lodash/find';\nimport getProp from 'lodash/get';\nimport includes from 'lodash/includes';\nimport isArray from 'lodash/isArray';\nimport isNil from 'lodash/isNil';\nimport API from '../../api';\n\nimport {\n    ITEM_TYPE_FILE,\n    JSON_PATCH_OP_ADD,\n    JSON_PATCH_OP_REMOVE,\n    JSON_PATCH_OP_REPLACE,\n    JSON_PATCH_OP_TEST,\n    METADATA_FIELD_TYPE_ENUM,\n    METADATA_FIELD_TYPE_MULTISELECT,\n} from '../../common/constants';\nimport { FIELD_NAME, FIELD_METADATA } from '../../constants';\n\nimport type { MetadataQuery as MetadataQueryType, MetadataQueryResponseData } from '../../common/types/metadataQueries';\nimport type {\n    MetadataTemplateSchemaResponse,\n    MetadataTemplate,\n    MetadataFieldValue,\n    MetadataType,\n    MetadataQueryInstanceTypeField,\n} from '../../common/types/metadata';\nimport type { ElementsXhrError, JSONPatchOperations } from '../../common/types/api';\nimport type { Collection, BoxItem } from '../../common/types/core';\n\ntype SuccessCallback = (metadataQueryCollection: Collection) => void;\ntype ErrorCallback = (e: ElementsXhrError) => void;\n\nconst SELECT_TYPES: Array<typeof METADATA_FIELD_TYPE_ENUM | typeof METADATA_FIELD_TYPE_MULTISELECT> = [\n    METADATA_FIELD_TYPE_ENUM,\n    METADATA_FIELD_TYPE_MULTISELECT,\n];\n\nexport default class MetadataQueryAPIHelper {\n    api: API;\n\n    metadataQueryResponseData: MetadataQueryResponseData;\n\n    metadataTemplate: MetadataTemplate;\n\n    templateKey: string;\n\n    templateScope: string;\n\n    metadataQuery: MetadataQueryType;\n\n    constructor(api: API) {\n        this.api = api;\n    }\n\n    createJSONPatchOperations = (\n        field: string,\n        oldValue: ?MetadataFieldValue,\n        newValue: ?MetadataFieldValue,\n    ): JSONPatchOperations => {\n        let operation = JSON_PATCH_OP_REPLACE;\n\n        if (isNil(oldValue) && newValue) {\n            operation = JSON_PATCH_OP_ADD;\n        }\n\n        if (oldValue && isNil(newValue)) {\n            operation = JSON_PATCH_OP_REMOVE;\n        }\n\n        const testOp = {\n            op: JSON_PATCH_OP_TEST,\n            path: `/${field}`,\n            value: oldValue,\n        };\n        const patchOp = {\n            op: operation,\n            path: `/${field}`,\n            value: newValue,\n        };\n\n        if (operation === JSON_PATCH_OP_REMOVE) {\n            delete patchOp.value;\n        }\n\n        return operation === JSON_PATCH_OP_ADD ? [patchOp] : [testOp, patchOp];\n    };\n\n    getMetadataQueryFields = (): string[] => {\n        /*\n            Example metadata query:\n            const query = {\n                from: 'enterprise_12345.myAwesomeTemplateKey',\n                fields: [\n                    'name', // base representation field for an item (name, size, etag etc.)\n                    'metadata.enterprise_12345.myAwesomeTemplateKey.field_1', // metadata instance field\n                    'metadata.enterprise_12345.myAwesomeTemplateKey.field_2', // metadata instance field\n                    'metadata.enterprise_12345.myAwesomeTemplateKey.field_3' // metadata instance field\n                ],\n                ancestor_folder_id: 0,\n            };\n\n            This function will return ['field_1', 'field_2', 'field_3']\n        */\n        const { fields = [], from } = this.metadataQuery;\n        return fields.filter(field => field.includes(from)).map(field => field.split('.').pop());\n    };\n\n    flattenMetadata = (metadata?: MetadataType): MetadataType => {\n        const templateFields = getProp(this.metadataTemplate, 'fields', []);\n        const instance = getProp(metadata, `${this.templateScope}.${this.templateKey}`);\n\n        if (!instance) {\n            return {};\n        }\n\n        const queryFields = this.getMetadataQueryFields();\n\n        const fields = queryFields.map((queryField: string) => {\n            const templateField = find(templateFields, ['key', queryField]);\n            const type = getProp(templateField, 'type'); // get data type\n            const displayName = getProp(templateField, 'displayName', queryField); // get displayName, defaults to key\n\n            const field: MetadataQueryInstanceTypeField = {\n                key: `${FIELD_METADATA}.${this.templateScope}.${this.templateKey}.${queryField}`,\n                value: instance[queryField],\n                type,\n                displayName,\n            };\n\n            if (includes(SELECT_TYPES, type)) {\n                // get \"options\" for enums or multiselects\n                field.options = getProp(templateField, 'options');\n            }\n\n            return field;\n        });\n\n        return {\n            enterprise: {\n                fields,\n                id: instance.$id,\n            },\n        };\n    };\n\n    flattenResponseEntry = (metadataEntry: BoxItem): BoxItem => {\n        const { metadata } = metadataEntry;\n        return {\n            ...metadataEntry,\n            metadata: this.flattenMetadata(metadata),\n        };\n    };\n\n    filterMetdataQueryResponse = (response: MetadataQueryResponseData): MetadataQueryResponseData => {\n        const { entries = [], next_marker } = response;\n        return {\n            entries: entries.filter(entry => getProp(entry, 'type') === ITEM_TYPE_FILE), // return only file items\n            next_marker,\n        };\n    };\n\n    getFlattenedDataWithTypes = (templateSchemaResponse?: MetadataTemplateSchemaResponse): Collection => {\n        this.metadataTemplate = getProp(templateSchemaResponse, 'data');\n        const { entries, next_marker }: MetadataQueryResponseData = this.metadataQueryResponseData;\n        return {\n            items: entries.map<BoxItem>(this.flattenResponseEntry),\n            nextMarker: next_marker,\n        };\n    };\n\n    getTemplateSchemaInfo = (data: MetadataQueryResponseData): Promise<MetadataTemplateSchemaResponse | void> => {\n        const { entries } = data;\n        this.metadataQueryResponseData = this.filterMetdataQueryResponse(data);\n        if (!entries || entries.length === 0) {\n            // Don't make metadata API call to get template info\n            return Promise.resolve();\n        }\n\n        const metadata = getProp(entries, '[0].metadata');\n        this.templateScope = Object.keys(metadata)[0];\n        const instance = metadata[this.templateScope];\n        this.templateKey = Object.keys(instance)[0];\n\n        return this.api.getMetadataAPI(true).getSchemaByTemplateKey(this.templateKey);\n    };\n\n    queryMetadata = (): Promise<MetadataQueryResponseData> => {\n        return new Promise((resolve, reject) => {\n            this.api.getMetadataQueryAPI().queryMetadata(this.metadataQuery, resolve, reject, { forceFetch: true });\n        });\n    };\n\n    fetchMetadataQueryResults = (\n        metadataQuery: MetadataQueryType,\n        successsCallback: SuccessCallback,\n        errorCallback: ErrorCallback,\n    ): Promise<void> => {\n        this.metadataQuery = this.verifyQueryFields(metadataQuery);\n        return this.queryMetadata()\n            .then(this.getTemplateSchemaInfo)\n            .then(this.getFlattenedDataWithTypes)\n            .then(successsCallback)\n            .catch(errorCallback);\n    };\n\n    updateMetadata = (\n        file: BoxItem,\n        field: string,\n        oldValue: ?MetadataFieldValue,\n        newValue: ?MetadataFieldValue,\n        successsCallback: void => void,\n        errorCallback: ErrorCallback,\n    ): Promise<void> => {\n        const operations = this.createJSONPatchOperations(field, oldValue, newValue);\n        return this.api\n            .getMetadataAPI(true)\n            .updateMetadata(file, this.metadataTemplate, operations, successsCallback, errorCallback);\n    };\n\n    /**\n     * Verify that the metadata query has required fields and update it if necessary\n     * For a file item, default fields included in the response are \"type\", \"id\", \"etag\"\n     *\n     * @param {MetadataQueryType} metadataQuery metadata query object\n     * @return {MetadataQueryType} updated metadata query object with required fields\n     */\n    verifyQueryFields = (metadataQuery: MetadataQueryType): MetadataQueryType => {\n        const clonedQuery = cloneDeep(metadataQuery);\n        const clonedFields = isArray(clonedQuery.fields) ? clonedQuery.fields : [];\n\n        // Make sure the query fields array has \"name\" field which is necessary to display info.\n        if (!clonedFields.includes(FIELD_NAME)) {\n            clonedFields.push(FIELD_NAME);\n        }\n        clonedQuery.fields = clonedFields;\n\n        return clonedQuery;\n    };\n}\n"],"mappings":"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","ignoreList":[]}