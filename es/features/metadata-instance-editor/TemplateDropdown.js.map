{"version":3,"file":"TemplateDropdown.js","names":["React","classNames","isEqual","FormattedMessage","injectIntl","DatalistItem","SelectorDropdown","SearchForm","PlainButton","LoadingIndicator","Flyout","Overlay","MenuToggle","messages","TEMPLATE_CUSTOM_PROPERTIES","getAvailableTemplates","allTemplates","usedTemplates","filter","template","findIndex","usedTemplate","templateKey","scope","TemplateDropdown","PureComponent","constructor","props","_defineProperty","isDropdownBusy","onAdd","activeTemplate","defaultTemplateIcon","activeTemplateIcon","templates","title","state","hasUnusedTemplates","length","hasTemplates","hasResults","indicatorOrMessage","createElement","className","message","id","metadataTemplatesServerHasNoTemplates","metadataTemplatesNoRemainingTemplates","metadataTemplatesNoResults","renderedTemplates","map","isTemplateSelected","buttonClassName","key","tabIndex","type","getTemplateName","Fragment","isAlwaysOpen","onSelect","index","selector","getSelector","shouldScroll","intl","filterText","label","onChange","handleUserInput","placeholder","formatMessage","metadataTemplateSearchPlaceholder","shouldPreventClearEventPropagation","useClearButton","value","userInput","setState","customTitle","defaultMessage","displayName","toLowerCase","includes","onDropdownToggle","isDropdownOpen","entryButton","buttonToggleClassName","metadataTemplateAdd","componentDidUpdate","prevTemplates","prevUsedTemplates","_extends","render","flyoutClassName","closeOnClick","closeOnClickOutside","constrainToWindowWithPin","onClose","onOpen","position","shouldDefaultFocus","renderEntryButton","getDropdown","TemplateDropdownBase"],"sources":["../../../src/features/metadata-instance-editor/TemplateDropdown.js"],"sourcesContent":["// @flow\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport isEqual from 'lodash/isEqual';\nimport { FormattedMessage, injectIntl } from 'react-intl';\n\nimport DatalistItem from '../../components/datalist-item';\nimport SelectorDropdown from '../../components/selector-dropdown';\nimport SearchForm from '../../components/search-form/SearchForm';\nimport PlainButton from '../../components/plain-button';\nimport LoadingIndicator from '../../components/loading-indicator';\nimport { Flyout, Overlay } from '../../components/flyout';\n\nimport MenuToggle from '../../components/dropdown-menu/MenuToggle';\nimport messages from './messages';\nimport { TEMPLATE_CUSTOM_PROPERTIES } from './constants';\nimport type { MetadataTemplate } from '../../common/types/metadata';\nimport './TemplateDropdown.scss';\n\ntype Props = {\n    activeTemplate?: ?MetadataTemplate,\n    activeTemplateIcon?: React.Node,\n    className?: string,\n    defaultTemplateIcon?: React.Node,\n    entryButton?: React.Node,\n    intl: any,\n    isDropdownBusy?: boolean,\n    onAdd: (template: MetadataTemplate) => void,\n    onDropdownToggle?: (isDropdownOpen: boolean) => void,\n    templates: Array<MetadataTemplate>,\n    title?: React.Node,\n    usedTemplates: Array<MetadataTemplate>,\n};\n\ntype State = {\n    filterText: string,\n    isDropdownOpen: boolean,\n    templates: Array<MetadataTemplate>,\n};\n\nconst getAvailableTemplates = (allTemplates: Array<MetadataTemplate>, usedTemplates: Array<MetadataTemplate>) =>\n    allTemplates.filter(\n        (template: MetadataTemplate) =>\n            usedTemplates.findIndex(\n                (usedTemplate: MetadataTemplate) =>\n                    usedTemplate.templateKey === template.templateKey && usedTemplate.scope === template.scope,\n            ) === -1,\n    );\n\nclass TemplateDropdown extends React.PureComponent<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            isDropdownOpen: false,\n            filterText: '',\n            templates: getAvailableTemplates(props.templates, props.usedTemplates),\n        };\n    }\n\n    /**\n     * Updates the state\n     *\n     * @param {Object} prevProps - next props\n     * @return {void}\n     */\n    componentDidUpdate({ templates: prevTemplates, usedTemplates: prevUsedTemplates }: Props) {\n        const { templates, usedTemplates } = this.props;\n\n        if (!isEqual(prevTemplates, templates) || !isEqual(prevUsedTemplates, usedTemplates)) {\n            this.setState({\n                templates: getAvailableTemplates(templates, usedTemplates),\n            });\n        }\n    }\n\n    getDropdown = () => {\n        const {\n            isDropdownBusy,\n            onAdd,\n            activeTemplate,\n            defaultTemplateIcon,\n            activeTemplateIcon,\n            templates: allTemplates,\n            title,\n            usedTemplates,\n        }: Props = this.props;\n        const { templates }: State = this.state;\n        const hasUnusedTemplates = getAvailableTemplates(allTemplates, usedTemplates).length > 0;\n        const hasTemplates = allTemplates.length > 0;\n        const hasResults = templates.length > 0;\n\n        let indicatorOrMessage = null;\n\n        if (isDropdownBusy) {\n            indicatorOrMessage = (\n                <LoadingIndicator className=\"metadata-instance-editor-template-message template-dropdown-loading-indicator\" />\n            );\n        } else if (!hasTemplates || !hasUnusedTemplates || !hasResults) {\n            let message = { id: '' };\n\n            if (!hasTemplates) {\n                message = messages.metadataTemplatesServerHasNoTemplates;\n            } else if (!hasUnusedTemplates) {\n                message = messages.metadataTemplatesNoRemainingTemplates;\n            } else if (!hasResults) {\n                message = messages.metadataTemplatesNoResults;\n            }\n\n            indicatorOrMessage = (\n                <i className=\"metadata-instance-editor-template-message\">\n                    <FormattedMessage {...message} />\n                </i>\n            );\n        }\n\n        const renderedTemplates = templates.map(template => {\n            const isTemplateSelected = activeTemplate && activeTemplate.id === template.id;\n\n            const buttonClassName = classNames('metadata-template-dropdown-select-template', {\n                'metadata-template-dropdown-is-selected': isTemplateSelected,\n            });\n\n            return (\n                <DatalistItem key={template.id}>\n                    <PlainButton className={buttonClassName} tabIndex=\"-1\" type=\"button\">\n                        {isTemplateSelected ? activeTemplateIcon : defaultTemplateIcon}\n                        {this.getTemplateName(template)}\n                    </PlainButton>\n                </DatalistItem>\n            );\n        });\n\n        return (\n            <>\n                <SelectorDropdown\n                    className=\"metadata-instance-editor-template-dropdown-menu\"\n                    title={title}\n                    isAlwaysOpen\n                    onSelect={(index: number) => {\n                        onAdd(templates[index]);\n                    }}\n                    selector={this.getSelector()}\n                    shouldScroll\n                >\n                    {indicatorOrMessage ? null : renderedTemplates}\n                </SelectorDropdown>\n                {indicatorOrMessage}\n            </>\n        );\n    };\n\n    /**\n     * Returns the input field for the drop down\n     *\n     * @return {React.Node} - input selector\n     */\n    getSelector = () => {\n        const { intl }: Props = this.props;\n        const { filterText }: State = this.state;\n        return (\n            <SearchForm\n                data-resin-target=\"metadata-templatesearch\"\n                label=\"\"\n                onChange={this.handleUserInput}\n                placeholder={intl.formatMessage(messages.metadataTemplateSearchPlaceholder)}\n                shouldPreventClearEventPropagation\n                type=\"text\"\n                useClearButton\n                value={filterText}\n            />\n        );\n    };\n\n    /**\n     * Returns template display name.\n     * For custom metadata we have it on the client.\n     *\n     * @return {React.Node} - string or formatted name\n     */\n    getTemplateName(template: MetadataTemplate): React.Node {\n        return template.templateKey === TEMPLATE_CUSTOM_PROPERTIES ? (\n            <FormattedMessage className=\"template-display-name\" {...messages.customTitle} />\n        ) : (\n            <div className=\"template-display-name\">{template.displayName}</div>\n        );\n    }\n\n    /**\n     * Updates the filter text and filters the results\n     *\n     * @param {UserInput} userInput - input value returned from onChangeHandler from SearchForm.js\n     * @return {void}\n     */\n    handleUserInput = (userInput: string) => {\n        const { templates: allTemplates, usedTemplates } = this.props;\n        const filterText = userInput;\n        const templates = getAvailableTemplates(allTemplates, usedTemplates);\n\n        this.setState({\n            filterText,\n            templates: templates.filter(template => {\n                const label: string = ((template.templateKey === TEMPLATE_CUSTOM_PROPERTIES\n                    ? messages.customTitle.defaultMessage\n                    : template.displayName): any);\n                return label.toLowerCase().includes(filterText.toLowerCase());\n            }),\n        });\n    };\n\n    onOpen = () => {\n        const { onDropdownToggle, templates, usedTemplates } = this.props;\n\n        if (onDropdownToggle) {\n            onDropdownToggle(true);\n        }\n\n        this.setState({\n            isDropdownOpen: true,\n            filterText: '',\n            templates: getAvailableTemplates(templates, usedTemplates),\n        });\n    };\n\n    onClose = () => {\n        const { onDropdownToggle } = this.props;\n\n        if (onDropdownToggle) {\n            onDropdownToggle(false);\n        }\n\n        this.setState({ isDropdownOpen: false });\n    };\n\n    renderEntryButton = () => {\n        const { entryButton } = this.props;\n        const { isDropdownOpen } = this.state;\n        const buttonToggleClassName = classNames('lnk', {\n            'is-toggled': isDropdownOpen,\n        });\n        if (entryButton) {\n            return entryButton;\n        }\n        return (\n            <PlainButton data-resin-target=\"metadata-templateaddmenu\" className={buttonToggleClassName} type=\"button\">\n                <MenuToggle>\n                    <FormattedMessage {...messages.metadataTemplateAdd} />\n                </MenuToggle>\n            </PlainButton>\n        );\n    };\n\n    render() {\n        const { className } = this.props;\n        const flyoutClassName = classNames('metadata-instance-editor-template-dropdown-flyout', className);\n\n        return (\n            <Flyout\n                className={flyoutClassName}\n                closeOnClick\n                closeOnClickOutside\n                constrainToWindowWithPin\n                onClose={this.onClose}\n                onOpen={this.onOpen}\n                position=\"bottom-left\"\n                shouldDefaultFocus\n            >\n                {this.renderEntryButton()}\n                <Overlay>{this.getDropdown()}</Overlay>\n            </Flyout>\n        );\n    }\n}\n\nexport { TemplateDropdown as TemplateDropdownBase };\nexport default injectIntl(TemplateDropdown);\n"],"mappings":"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","ignoreList":[]}