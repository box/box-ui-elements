{"version":3,"file":"metadataUtil.js","names":["isHidden","obj","hidden","normalizeTemplateFilters","templateFilters","Set","normalizeTemplates","templates","selectedTemplateKey","clonedTemplates","filter","template","templateKey","fields","normalizedFilters","field","has","id"],"sources":["../../../src/features/metadata-instance-editor/metadataUtil.js"],"sourcesContent":["// @flow\nimport type { MetadataTemplateField, MetadataTemplate } from '../../common/types/metadata';\n\nconst isHidden = (obj: MetadataTemplate | MetadataTemplateField): boolean => {\n    return !!obj.isHidden || !!obj.hidden;\n};\n\n/**\n * Utility function for converting a string or array of strings into a Set object\n * @param templateFilters - Array<string> | string\n * @returns {Set<T>}\n */\nconst normalizeTemplateFilters = (templateFilters: Array<string> | string): Set<string> => {\n    return typeof templateFilters === 'string' ? new Set([templateFilters]) : new Set(templateFilters);\n};\n\n/**\n * Utility function for cloning an array of metadata templates and filtering the templates and fields if necessary\n * @param templates Array<MetadataTemplate>\n * @param selectedTemplateKey - string\n * @param templateFilters - Array<string> | string\n * @returns {Array<T>}\n */\nconst normalizeTemplates = (\n    templates: Array<MetadataTemplate>,\n    selectedTemplateKey?: string,\n    templateFilters?: Array<string> | string,\n): Array<MetadataTemplate> => {\n    if (!selectedTemplateKey) {\n        return [...templates];\n    }\n    const clonedTemplates = templates.filter(template => template.templateKey === selectedTemplateKey);\n    const fields = clonedTemplates[0] ? clonedTemplates[0].fields : null;\n    if (templateFilters && fields) {\n        const normalizedFilters = normalizeTemplateFilters(templateFilters);\n        clonedTemplates[0].fields = fields.filter(field => normalizedFilters.has(field.id));\n    }\n    return clonedTemplates;\n};\n\nexport { isHidden, normalizeTemplates, normalizeTemplateFilters };\n"],"mappings":"AAGA,MAAMA,QAAQ,GAAIC,GAA6C,IAAc;EACzE,OAAO,CAAC,CAACA,GAAG,CAACD,QAAQ,IAAI,CAAC,CAACC,GAAG,CAACC,MAAM;AACzC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,MAAMC,wBAAwB,GAAIC,eAAuC,IAAkB;EACvF,OAAO,OAAOA,eAAe,KAAK,QAAQ,GAAG,IAAIC,GAAG,CAAC,CAACD,eAAe,CAAC,CAAC,GAAG,IAAIC,GAAG,CAACD,eAAe,CAAC;AACtG,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAME,kBAAkB,GAAGA,CACvBC,SAAkC,EAClCC,mBAA4B,EAC5BJ,eAAwC,KACd;EAC1B,IAAI,CAACI,mBAAmB,EAAE;IACtB,OAAO,CAAC,GAAGD,SAAS,CAAC;EACzB;EACA,MAAME,eAAe,GAAGF,SAAS,CAACG,MAAM,CAACC,QAAQ,IAAIA,QAAQ,CAACC,WAAW,KAAKJ,mBAAmB,CAAC;EAClG,MAAMK,MAAM,GAAGJ,eAAe,CAAC,CAAC,CAAC,GAAGA,eAAe,CAAC,CAAC,CAAC,CAACI,MAAM,GAAG,IAAI;EACpE,IAAIT,eAAe,IAAIS,MAAM,EAAE;IAC3B,MAAMC,iBAAiB,GAAGX,wBAAwB,CAACC,eAAe,CAAC;IACnEK,eAAe,CAAC,CAAC,CAAC,CAACI,MAAM,GAAGA,MAAM,CAACH,MAAM,CAACK,KAAK,IAAID,iBAAiB,CAACE,GAAG,CAACD,KAAK,CAACE,EAAE,CAAC,CAAC;EACvF;EACA,OAAOR,eAAe;AAC1B,CAAC;AAED,SAAST,QAAQ,EAAEM,kBAAkB,EAAEH,wBAAwB","ignoreList":[]}