{"version":3,"file":"CustomInstanceNewField.js","names":["React","FormattedMessage","injectIntl","Button","TextInput","Tooltip","commonMessages","IconInfo","messages","CustomInstanceNewField","PureComponent","constructor","args","_defineProperty","key","value","error","event","onChange","state","onAdd","properties","props","Object","prototype","hasOwnProperty","call","setState","createElement","customErrorDuplicateKey","startsWith","customErrorInternalKey","customErrorRequired","attr","currentTarget","render","intl","isCancellable","onCancel","className","_extends","tagName","customNewField","text","customNewFieldMessage","tabIndex","color","height","width","isRequired","label","customKey","onKeyChange","placeholder","formatMessage","customKeyPlaceholder","type","hideOptionalLabel","customValue","onValueChange","customValuePlaceholder","onClick","cancel","customAdd","CustomInstanceNewFieldBase"],"sources":["../../../src/features/metadata-instance-editor/CustomInstanceNewField.js"],"sourcesContent":["// @flow\nimport * as React from 'react';\nimport { FormattedMessage, injectIntl } from 'react-intl';\n\nimport Button from '../../components/button/Button';\nimport TextInput from '../../components/text-input/TextInput';\nimport Tooltip from '../../components/tooltip/Tooltip';\nimport commonMessages from '../../common/messages';\nimport IconInfo from '../../icons/general/IconInfo';\n\nimport messages from './messages';\nimport type { MetadataFieldValue, MetadataFields } from '../../common/types/metadata';\nimport './CustomInstanceNewField.scss';\n\ntype Props = {\n    intl: any,\n    isCancellable: boolean,\n    onAdd: (key: string, value: MetadataFieldValue) => void,\n    onCancel: () => void,\n    properties: MetadataFields,\n};\n\ntype State = {\n    error: React.Node,\n    key: string,\n    value: string,\n};\n\nclass CustomInstanceNewField extends React.PureComponent<Props, State> {\n    state: State = {\n        key: '',\n        value: '',\n        error: '',\n    };\n\n    /**\n     * Common change handler\n     *\n     * @param {Event} event - keyboard event\n     * @param {string} attr - key or value\n     * @return {void}\n     */\n    onChange(event: SyntheticKeyboardEvent<HTMLInputElement>, attr: string) {\n        const currentTarget = (event.currentTarget: HTMLInputElement);\n        this.setState({\n            error: '',\n            [attr]: currentTarget.value,\n        });\n    }\n\n    /**\n     * Change handler for the key\n     *\n     * @param {Event} event - keyboard event\n     * @return {void}\n     */\n    onKeyChange = (event: SyntheticKeyboardEvent<HTMLInputElement>) => {\n        this.onChange(event, 'key');\n    };\n\n    /**\n     * Change handler for the value\n     *\n     * @param {Event} event - keyboard event\n     * @return {void}\n     */\n    onValueChange = (event: SyntheticKeyboardEvent<HTMLInputElement>) => {\n        this.onChange(event, 'value');\n    };\n\n    /**\n     * Persists the new metadata added or shows an error\n     *\n     * @return {void}\n     */\n    onAdd = () => {\n        const { key, value }: State = this.state;\n        const { onAdd, properties }: Props = this.props;\n        if (Object.prototype.hasOwnProperty.call(properties, key)) {\n            this.setState({\n                error: <FormattedMessage {...messages.customErrorDuplicateKey} />,\n            });\n        } else if (key.startsWith('$')) {\n            this.setState({\n                error: <FormattedMessage {...messages.customErrorInternalKey} />,\n            });\n        } else if (key) {\n            onAdd(key, value);\n        } else {\n            this.setState({\n                error: <FormattedMessage {...messages.customErrorRequired} />,\n            });\n        }\n    };\n\n    render() {\n        const { intl, isCancellable, onCancel }: Props = this.props;\n        const { key, value, error }: State = this.state;\n        return (\n            <div className=\"custom-new-field\">\n                <div className=\"custom-new-field-header\">\n                    <FormattedMessage tagName=\"h5\" {...messages.customNewField} />\n                    <Tooltip text={<FormattedMessage {...messages.customNewFieldMessage} />}>\n                        <div tabIndex=\"-1\">\n                            <IconInfo color=\"#777\" height={18} width={18} />\n                        </div>\n                    </Tooltip>\n                </div>\n                <TextInput\n                    error={error}\n                    isRequired\n                    label={<FormattedMessage {...messages.customKey} />}\n                    onChange={this.onKeyChange}\n                    placeholder={intl.formatMessage(messages.customKeyPlaceholder)}\n                    type=\"text\"\n                    value={key}\n                />\n                <TextInput\n                    hideOptionalLabel\n                    label={<FormattedMessage {...messages.customValue} />}\n                    onChange={this.onValueChange}\n                    placeholder={intl.formatMessage(messages.customValuePlaceholder)}\n                    type=\"text\"\n                    value={value}\n                />\n                <div className=\"custom-new-field-actions\">\n                    {isCancellable && (\n                        <Button data-resin-target=\"metadata-customfieldcancel\" onClick={onCancel} type=\"button\">\n                            <FormattedMessage {...commonMessages.cancel} />\n                        </Button>\n                    )}\n                    <Button data-resin-target=\"metadata-customfieldadd\" onClick={this.onAdd} type=\"button\">\n                        <FormattedMessage {...messages.customAdd} />\n                    </Button>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport { CustomInstanceNewField as CustomInstanceNewFieldBase };\nexport default injectIntl(CustomInstanceNewField);\n"],"mappings":"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","ignoreList":[]}