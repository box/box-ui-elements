{"version":3,"file":"useMessage.js","names":["useContext","useMemo","MESSAGE_STATES","MessageContext","useMessage","name","messageContext","messageApi","eligibleMessageIDMap","markMessageAsSeen","markMessageAsClosed","messageStateMap","setMessageStateMap","canShow","CLOSED","onShow","_objectSpread","SHOWING","onClose","onComplete"],"sources":["../../../src/features/targeting/useMessage.js"],"sourcesContent":["// @flow\nimport { useContext, useMemo } from 'react';\nimport { MESSAGE_STATES } from './constants';\nimport type { MessageName, TargetingApi } from './types';\nimport MessageContext from './MessageContext';\n\nfunction useMessage(name: MessageName): TargetingApi {\n    const messageContext = useContext(MessageContext);\n    return useMemo(() => {\n        const {\n            messageApi: { eligibleMessageIDMap, markMessageAsSeen, markMessageAsClosed },\n            messageStateMap,\n            setMessageStateMap,\n        } = messageContext;\n\n        const canShow = name in eligibleMessageIDMap && messageStateMap[name] !== MESSAGE_STATES.CLOSED;\n\n        function onShow() {\n            if (canShow && !messageStateMap[name]) {\n                setMessageStateMap({ ...messageStateMap, [name]: MESSAGE_STATES.SHOWING });\n                // FIXME markMessageAsSeen action was currently throttled to prevent we make multiple\n                // backend call if onShow is called multiple times before setMessageStateMap\n                // actually alter the messageState. But it is preferrable to prevent\n                // markMessageAsSeen from being called multiple times instead of throttling\n                // after it is called.\n                markMessageAsSeen(eligibleMessageIDMap[name]);\n            }\n        }\n\n        function onClose() {\n            if (canShow && messageStateMap[name] === MESSAGE_STATES.SHOWING) {\n                setMessageStateMap({ ...messageStateMap, [name]: MESSAGE_STATES.CLOSED });\n                markMessageAsClosed(eligibleMessageIDMap[name]);\n            }\n        }\n\n        function onComplete() {\n            if (canShow && messageStateMap[name] === MESSAGE_STATES.SHOWING) {\n                setMessageStateMap({ ...messageStateMap, [name]: MESSAGE_STATES.CLOSED });\n                markMessageAsClosed(eligibleMessageIDMap[name]);\n            }\n        }\n\n        return { canShow, onShow, onClose, onComplete };\n    }, [messageContext, name]);\n}\n\nexport default useMessage;\n"],"mappings":";;;;;AACA,SAASA,UAAU,EAAEC,OAAO,QAAQ,OAAO;AAC3C,SAASC,cAAc,QAAQ,aAAa;AAE5C,OAAOC,cAAc,MAAM,kBAAkB;AAE7C,SAASC,UAAUA,CAACC,IAAiB,EAAgB;EACjD,MAAMC,cAAc,GAAGN,UAAU,CAACG,cAAc,CAAC;EACjD,OAAOF,OAAO,CAAC,MAAM;IACjB,MAAM;MACFM,UAAU,EAAE;QAAEC,oBAAoB;QAAEC,iBAAiB;QAAEC;MAAoB,CAAC;MAC5EC,eAAe;MACfC;IACJ,CAAC,GAAGN,cAAc;IAElB,MAAMO,OAAO,GAAGR,IAAI,IAAIG,oBAAoB,IAAIG,eAAe,CAACN,IAAI,CAAC,KAAKH,cAAc,CAACY,MAAM;IAE/F,SAASC,MAAMA,CAAA,EAAG;MACd,IAAIF,OAAO,IAAI,CAACF,eAAe,CAACN,IAAI,CAAC,EAAE;QACnCO,kBAAkB,CAAAI,aAAA,CAAAA,aAAA,KAAML,eAAe;UAAE,CAACN,IAAI,GAAGH,cAAc,CAACe;QAAO,EAAE,CAAC;QAC1E;QACA;QACA;QACA;QACA;QACAR,iBAAiB,CAACD,oBAAoB,CAACH,IAAI,CAAC,CAAC;MACjD;IACJ;IAEA,SAASa,OAAOA,CAAA,EAAG;MACf,IAAIL,OAAO,IAAIF,eAAe,CAACN,IAAI,CAAC,KAAKH,cAAc,CAACe,OAAO,EAAE;QAC7DL,kBAAkB,CAAAI,aAAA,CAAAA,aAAA,KAAML,eAAe;UAAE,CAACN,IAAI,GAAGH,cAAc,CAACY;QAAM,EAAE,CAAC;QACzEJ,mBAAmB,CAACF,oBAAoB,CAACH,IAAI,CAAC,CAAC;MACnD;IACJ;IAEA,SAASc,UAAUA,CAAA,EAAG;MAClB,IAAIN,OAAO,IAAIF,eAAe,CAACN,IAAI,CAAC,KAAKH,cAAc,CAACe,OAAO,EAAE;QAC7DL,kBAAkB,CAAAI,aAAA,CAAAA,aAAA,KAAML,eAAe;UAAE,CAACN,IAAI,GAAGH,cAAc,CAACY;QAAM,EAAE,CAAC;QACzEJ,mBAAmB,CAACF,oBAAoB,CAACH,IAAI,CAAC,CAAC;MACnD;IACJ;IAEA,OAAO;MAAEQ,OAAO;MAAEE,MAAM;MAAEG,OAAO;MAAEC;IAAW,CAAC;EACnD,CAAC,EAAE,CAACb,cAAc,EAAED,IAAI,CAAC,CAAC;AAC9B;AAEA,eAAeD,UAAU","ignoreList":[]}