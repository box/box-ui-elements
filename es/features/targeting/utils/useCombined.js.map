{"version":3,"file":"useCombined.js","names":["neverTargeted","useCombined","useTargetingApis","useGetTargetingApi","useTargetingApi","targetingApis","map","firstEligibleTargetingApi","find","canShow"],"sources":["../../../../src/features/targeting/utils/useCombined.js"],"sourcesContent":["// @flow\nimport neverTargeted from '../neverTargeted';\nimport { type TargetingApi } from '../types';\n\n// This function takes in an array of targetingApi hooks (functions) and returns the first\n// eligible targetingApi hook OR defaults to the neverTargeted hook.\n//\n// @TODO (online-sales): Incorporate priority for determining targeting in case we have multiple\n// items in the array which are eligible (i.e. contextual messages having greater priority than onboarding).\nconst useCombined = (useTargetingApis: $ReadOnlyArray<() => TargetingApi>): TargetingApi => {\n    const useGetTargetingApi = (useTargetingApi: () => TargetingApi): TargetingApi => useTargetingApi();\n    const targetingApis = useTargetingApis.map(useGetTargetingApi);\n\n    const firstEligibleTargetingApi = targetingApis.find(({ canShow }: TargetingApi): boolean => canShow);\n\n    return firstEligibleTargetingApi || neverTargeted;\n};\n\nexport default useCombined;\n"],"mappings":"AACA,OAAOA,aAAa,MAAM,kBAAkB;AAG5C;AACA;AACA;AACA;AACA;AACA,MAAMC,WAAW,GAAIC,gBAAoD,IAAmB;EACxF,MAAMC,kBAAkB,GAAIC,eAAmC,IAAmBA,eAAe,CAAC,CAAC;EACnG,MAAMC,aAAa,GAAGH,gBAAgB,CAACI,GAAG,CAACH,kBAAkB,CAAC;EAE9D,MAAMI,yBAAyB,GAAGF,aAAa,CAACG,IAAI,CAAC,CAAC;IAAEC;EAAsB,CAAC,KAAcA,OAAO,CAAC;EAErG,OAAOF,yBAAyB,IAAIP,aAAa;AACrD,CAAC;AAED,eAAeC,WAAW","ignoreList":[]}