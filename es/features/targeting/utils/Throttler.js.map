{"version":3,"file":"Throttler.js","names":["Throttler","constructor","_defineProperty","throttle","callback","expirationInMs","params","key","isMatchingRecord","record","length","some","param","i","records","store","currentTime","Date","now","filteredRecords","filter","expirationTime","matchedRecords","result","push"],"sources":["../../../../src/features/targeting/utils/Throttler.js"],"sourcesContent":["// @flow\n\n/**\n * Throttler implements something similar to debounce but throttle is more suitable for\n * throttling backend call because it will retrieve result from a recorded call if a call of the\n * same key AND params has not expired.\n *\n * A couple of improvement compared with lodash/debounce is:\n *  1. avoid call only if key AND params are the same as cached\n *  2. avoid implementing using setTimeout as setTimeout is more complex, and fragile\n *  3. return value is recorded and retrieved next time if a second call is made\n *  4. key is optional and is used to optimize for retrieval performance but can only contain\n *     string or number, while params can accommodate array of any data for referential equality\n *     check.\n *\n *  Use case:\n *    1) when we make backend call to log event, we can avoid making multiple calls for the\n *       same event due to minor UI flickering, but still allow different event to go through.\n *    2) when we make backend call for email address validation, we can avoid making repeated calls\n *       in short period of time for the same email address.\n *  Implementation:\n *    store is an object of key => array of records where each record contains params array,\n *    expirationTime and result of the call.\n *  Example:\n *    Assuming there are two backend calls:\n *        const validateEmail = async (email :string) => boolean\n *        const postEvent = async (name: string, type: string) => void\n *\n *    Here is the code to implement a throttler that will throttle the call if it has been\n *    called in the last 1000 seconds. Notice that throttled version has exactly the same\n *    signature as unthrottled version.\n *        const validateEmailThrottler = new Throttler<boolean>();\n *        const throttledValidateEmail = (email: string) =>\n *            validateEmailThrottler(() => validateEmail(email), 1e6, [], email);\n *\n *        const postEventThrottler = new Throttler<void, Array<string>>();\n *        const throttledPostEvent = (name: string, type: string) =>\n *            postEventThrottler(() => postEvent(name, type), 1e6, [name, type]);\n *\n * Abbreviation\n *   V: the return value of the callback function.\n *   P: the parameter of the callback function as an array, default to Array<any>.\n *   PB: the base type for the parameter of the callback function.\n */\n\ntype PB = $ReadOnlyArray<mixed>;\ntype CallRecord<V, P: PB> = $ReadOnly<{\n    expirationTime: number,\n    params: P,\n    result: V,\n}>;\n\ntype CallRecords<V, P: PB> = Array<CallRecord<V, P>>;\ntype Store<V, P: PB> = { [string | number]: CallRecords<V, P> };\n\nclass Throttler<V = void, P: PB = PB> {\n    store: Store<V, P> = {};\n\n    throttle(callback: () => V, expirationInMs: number, params: P, key: string | number): V {\n        function isMatchingRecord(record: CallRecord<V, P>) {\n            if (record.params.length !== params.length) {\n                return false;\n            }\n            return !params.some((param, i) => record.params[i] !== param);\n        }\n\n        const { [key]: records = [] } = this.store;\n        const currentTime = Date.now();\n        // remove existing records that have expired\n        const filteredRecords = records.filter(({ expirationTime }: CallRecord<V, P>) => expirationTime > currentTime);\n        // check if there is a matching record to reuse\n        const matchedRecords = filteredRecords.filter(isMatchingRecord);\n        this.store[key] = filteredRecords;\n        if (matchedRecords.length < 1) {\n            // add the call into records\n            const expirationTime = currentTime + expirationInMs;\n            const record = { expirationTime, params, result: callback() };\n            this.store[key].push(record);\n            return record.result;\n        }\n        return matchedRecords[0].result;\n    }\n}\n\nexport default Throttler;\n"],"mappings":";;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAYA,MAAMA,SAAS,CAAuB;EAAAC,YAAA;IAAAC,eAAA,gBACb,CAAC,CAAC;EAAA;EAEvBC,QAAQA,CAACC,QAAiB,EAAEC,cAAsB,EAAEC,MAAS,EAAEC,GAAoB,EAAK;IACpF,SAASC,gBAAgBA,CAACC,MAAwB,EAAE;MAChD,IAAIA,MAAM,CAACH,MAAM,CAACI,MAAM,KAAKJ,MAAM,CAACI,MAAM,EAAE;QACxC,OAAO,KAAK;MAChB;MACA,OAAO,CAACJ,MAAM,CAACK,IAAI,CAAC,CAACC,KAAK,EAAEC,CAAC,KAAKJ,MAAM,CAACH,MAAM,CAACO,CAAC,CAAC,KAAKD,KAAK,CAAC;IACjE;IAEA,MAAM;MAAE,CAACL,GAAG,GAAGO,OAAO,GAAG;IAAG,CAAC,GAAG,IAAI,CAACC,KAAK;IAC1C,MAAMC,WAAW,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC;IAC9B;IACA,MAAMC,eAAe,GAAGL,OAAO,CAACM,MAAM,CAAC,CAAC;MAAEC;IAAiC,CAAC,KAAKA,cAAc,GAAGL,WAAW,CAAC;IAC9G;IACA,MAAMM,cAAc,GAAGH,eAAe,CAACC,MAAM,CAACZ,gBAAgB,CAAC;IAC/D,IAAI,CAACO,KAAK,CAACR,GAAG,CAAC,GAAGY,eAAe;IACjC,IAAIG,cAAc,CAACZ,MAAM,GAAG,CAAC,EAAE;MAC3B;MACA,MAAMW,cAAc,GAAGL,WAAW,GAAGX,cAAc;MACnD,MAAMI,MAAM,GAAG;QAAEY,cAAc;QAAEf,MAAM;QAAEiB,MAAM,EAAEnB,QAAQ,CAAC;MAAE,CAAC;MAC7D,IAAI,CAACW,KAAK,CAACR,GAAG,CAAC,CAACiB,IAAI,CAACf,MAAM,CAAC;MAC5B,OAAOA,MAAM,CAACc,MAAM;IACxB;IACA,OAAOD,cAAc,CAAC,CAAC,CAAC,CAACC,MAAM;EACnC;AACJ;AAEA,eAAevB,SAAS","ignoreList":[]}