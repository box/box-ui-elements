{"version":3,"file":"ColumnButton.js","names":["React","FormattedMessage","classNames","Flyout","Overlay","Button","MenuToggle","IconMetadataColumns","ColumnButtonOverlay","messages","ColumnButton","Component","constructor","props","_defineProperty","setState","isColumnMenuOpen","state","columns","reduce","total","column","isShown","render","template","onColumnChange","numberOfHiddenColumns","getNumberOfHiddenColumns","buttonClasses","columnsButtonText","createElement","_extends","values","count","columnsHiddenButtonText","className","closeOnClick","closeOnClickOutside","onClose","onOpen","position","isDisabled","undefined","onClick","toggleColumnButton","type"],"sources":["../../../../src/features/query-bar/components/ColumnButton.js"],"sourcesContent":["// @flow\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport classNames from 'classnames';\n\nimport { Flyout, Overlay } from '../../../components/flyout';\nimport Button from '../../../components/button/Button';\nimport MenuToggle from '../../../components/dropdown-menu/MenuToggle';\nimport IconMetadataColumns from '../../../icons/metadata-view/IconMetadataColumns';\nimport ColumnButtonOverlay from './ColumnButtonOverlay';\n\nimport type { ColumnType } from '../flowTypes';\nimport type { MetadataTemplate } from '../../../common/types/metadata';\n\nimport messages from '../messages';\n\ntype State = {\n    isColumnMenuOpen: boolean,\n};\n\ntype Props = {\n    columns?: Array<ColumnType>,\n    onColumnChange?: (columnTypes: Array<ColumnType>) => void,\n    template?: MetadataTemplate,\n};\n\nclass ColumnButton extends React.Component<Props, State> {\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            isColumnMenuOpen: false,\n        };\n    }\n\n    onClose = () => {\n        this.setState({\n            isColumnMenuOpen: false,\n        });\n    };\n\n    onOpen = () => {\n        this.setState({\n            isColumnMenuOpen: true,\n        });\n    };\n\n    toggleColumnButton = () => {\n        this.setState({ isColumnMenuOpen: !this.state.isColumnMenuOpen });\n    };\n\n    getNumberOfHiddenColumns = () => {\n        const { columns } = this.props;\n\n        return columns\n            ? columns.reduce((total, column) => {\n                  if (!column.isShown) {\n                      return total + 1;\n                  }\n                  return total;\n              }, 0)\n            : 0;\n    };\n\n    render() {\n        const { template, columns, onColumnChange } = this.props;\n        const { isColumnMenuOpen } = this.state;\n        const numberOfHiddenColumns = this.getNumberOfHiddenColumns();\n\n        const buttonClasses = classNames('query-bar-button', numberOfHiddenColumns !== 0 ? 'is-active' : '');\n\n        let columnsButtonText;\n        if (numberOfHiddenColumns === 0) {\n            columnsButtonText = <FormattedMessage {...messages.columnsButtonText} />;\n        } else {\n            columnsButtonText = (\n                <FormattedMessage\n                    values={{\n                        count: numberOfHiddenColumns,\n                    }}\n                    {...messages.columnsHiddenButtonText}\n                />\n            );\n        }\n\n        return (\n            <Flyout\n                className=\"query-bar-column-dropdown-flyout\"\n                closeOnClick\n                closeOnClickOutside\n                onClose={this.onClose}\n                onOpen={this.onOpen}\n                position=\"bottom-right\"\n            >\n                <Button\n                    className={buttonClasses}\n                    isDisabled={template === undefined}\n                    onClick={this.toggleColumnButton}\n                    type=\"button\"\n                >\n                    <MenuToggle>\n                        <IconMetadataColumns />\n                        <span className=\"button-label\">{columnsButtonText}</span>\n                    </MenuToggle>\n                </Button>\n\n                <Overlay>\n                    {isColumnMenuOpen ? (\n                        <ColumnButtonOverlay columns={columns} onColumnChange={onColumnChange} />\n                    ) : (\n                        <div />\n                    )}\n                </Overlay>\n            </Flyout>\n        );\n    }\n}\n\nexport default ColumnButton;\n"],"mappings":";;;;AACA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,gBAAgB,QAAQ,YAAY;AAC7C,OAAOC,UAAU,MAAM,YAAY;AAEnC,SAASC,MAAM,EAAEC,OAAO,QAAQ,4BAA4B;AAC5D,OAAOC,MAAM,MAAM,mCAAmC;AACtD,OAAOC,UAAU,MAAM,8CAA8C;AACrE,OAAOC,mBAAmB,MAAM,kDAAkD;AAClF,OAAOC,mBAAmB,MAAM,uBAAuB;AAKvD,OAAOC,QAAQ,MAAM,aAAa;AAYlC,MAAMC,YAAY,SAASV,KAAK,CAACW,SAAS,CAAe;EACrDC,WAAWA,CAACC,KAAY,EAAE;IACtB,KAAK,CAACA,KAAK,CAAC;IAACC,eAAA,kBAMP,MAAM;MACZ,IAAI,CAACC,QAAQ,CAAC;QACVC,gBAAgB,EAAE;MACtB,CAAC,CAAC;IACN,CAAC;IAAAF,eAAA,iBAEQ,MAAM;MACX,IAAI,CAACC,QAAQ,CAAC;QACVC,gBAAgB,EAAE;MACtB,CAAC,CAAC;IACN,CAAC;IAAAF,eAAA,6BAEoB,MAAM;MACvB,IAAI,CAACC,QAAQ,CAAC;QAAEC,gBAAgB,EAAE,CAAC,IAAI,CAACC,KAAK,CAACD;MAAiB,CAAC,CAAC;IACrE,CAAC;IAAAF,eAAA,mCAE0B,MAAM;MAC7B,MAAM;QAAEI;MAAQ,CAAC,GAAG,IAAI,CAACL,KAAK;MAE9B,OAAOK,OAAO,GACRA,OAAO,CAACC,MAAM,CAAC,CAACC,KAAK,EAAEC,MAAM,KAAK;QAC9B,IAAI,CAACA,MAAM,CAACC,OAAO,EAAE;UACjB,OAAOF,KAAK,GAAG,CAAC;QACpB;QACA,OAAOA,KAAK;MAChB,CAAC,EAAE,CAAC,CAAC,GACL,CAAC;IACX,CAAC;IAhCG,IAAI,CAACH,KAAK,GAAG;MACTD,gBAAgB,EAAE;IACtB,CAAC;EACL;EA+BAO,MAAMA,CAAA,EAAG;IACL,MAAM;MAAEC,QAAQ;MAAEN,OAAO;MAAEO;IAAe,CAAC,GAAG,IAAI,CAACZ,KAAK;IACxD,MAAM;MAAEG;IAAiB,CAAC,GAAG,IAAI,CAACC,KAAK;IACvC,MAAMS,qBAAqB,GAAG,IAAI,CAACC,wBAAwB,CAAC,CAAC;IAE7D,MAAMC,aAAa,GAAG1B,UAAU,CAAC,kBAAkB,EAAEwB,qBAAqB,KAAK,CAAC,GAAG,WAAW,GAAG,EAAE,CAAC;IAEpG,IAAIG,iBAAiB;IACrB,IAAIH,qBAAqB,KAAK,CAAC,EAAE;MAC7BG,iBAAiB,gBAAG7B,KAAA,CAAA8B,aAAA,CAAC7B,gBAAgB,EAAKQ,QAAQ,CAACoB,iBAAoB,CAAC;IAC5E,CAAC,MAAM;MACHA,iBAAiB,gBACb7B,KAAA,CAAA8B,aAAA,CAAC7B,gBAAgB,EAAA8B,QAAA;QACbC,MAAM,EAAE;UACJC,KAAK,EAAEP;QACX;MAAE,GACEjB,QAAQ,CAACyB,uBAAuB,CACvC,CACJ;IACL;IAEA,oBACIlC,KAAA,CAAA8B,aAAA,CAAC3B,MAAM;MACHgC,SAAS,EAAC,kCAAkC;MAC5CC,YAAY;MACZC,mBAAmB;MACnBC,OAAO,EAAE,IAAI,CAACA,OAAQ;MACtBC,MAAM,EAAE,IAAI,CAACA,MAAO;MACpBC,QAAQ,EAAC;IAAc,gBAEvBxC,KAAA,CAAA8B,aAAA,CAACzB,MAAM;MACH8B,SAAS,EAAEP,aAAc;MACzBa,UAAU,EAAEjB,QAAQ,KAAKkB,SAAU;MACnCC,OAAO,EAAE,IAAI,CAACC,kBAAmB;MACjCC,IAAI,EAAC;IAAQ,gBAEb7C,KAAA,CAAA8B,aAAA,CAACxB,UAAU,qBACPN,KAAA,CAAA8B,aAAA,CAACvB,mBAAmB,MAAE,CAAC,eACvBP,KAAA,CAAA8B,aAAA;MAAMK,SAAS,EAAC;IAAc,GAAEN,iBAAwB,CAChD,CACR,CAAC,eAET7B,KAAA,CAAA8B,aAAA,CAAC1B,OAAO,QACHY,gBAAgB,gBACbhB,KAAA,CAAA8B,aAAA,CAACtB,mBAAmB;MAACU,OAAO,EAAEA,OAAQ;MAACO,cAAc,EAAEA;IAAe,CAAE,CAAC,gBAEzEzB,KAAA,CAAA8B,aAAA,YAAM,CAEL,CACL,CAAC;EAEjB;AACJ;AAEA,eAAepB,YAAY","ignoreList":[]}