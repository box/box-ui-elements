{"version":3,"file":"LeftSidebar.js","names":["React","classNames","debounce","throttle","NavSidebar","NavList","NavListCollapseHeader","FooterIndicator","LoadingIndicatorWrapper","bdlBoxBlue","CopyrightFooter","InstantLogin","LeftSidebarDropWrapper","LeftSidebarIconWrapper","NewItemsIndicator","defaultNavLinkRenderer","LeftSidebar","Component","constructor","props","_defineProperty","changeIsScrollingState","throttledCheckAndChangeScrollShadows","elScrollableList","setState","calculateOverflow","state","isScrolling","debouncedTurnOffScrollingState","turnOffScrollingState","checkAndChangeScrollShadows","isScrollableAbove","isScrollableBelow","componentDidUpdate","overflow","getIcon","iconElement","IconComponent","customTheme","selected","scaleIcon","wrapperClass","createElement","className","color","secondaryColor","getNewItemBadge","newItemBadge","customColor","getNavList","headerLinkProps","leftSidebarProps","showLoadingIndicator","onToggleCollapse","canReceiveDrop","collapsed","dropTargetRef","id","menuItems","placeholder","showDropZoneOnHover","heading","getNavLink","placeholderEl","length","classes","ulProps","onScroll","onListScroll","ref","builtNavList","key","map","isDragging","callout","htmlAttributes","iconComponent","message","navLinkRenderer","onClickRemove","removeButtonHtmlAttributes","routerLink","routerProps","showTooltip","linkClassNames","linkProps","icon","builtLink","Fragment","elem","scrollTop","scrollHeight","clientHeight","render","navSidebarProps","instantLoginProps","preparedMenu","crawlerPosition","isLoading","_extends","isInstantLoggedIn","copyrightFooterProps","indicatorText"],"sources":["../../../src/features/left-sidebar/LeftSidebar.js"],"sourcesContent":["// @flow\nimport * as React from 'react';\nimport classNames from 'classnames';\nimport debounce from 'lodash/debounce';\nimport throttle from 'lodash/throttle';\n\nimport { NavSidebar, NavList, NavListCollapseHeader } from '../../components/nav-sidebar';\nimport FooterIndicator from '../../components/footer-indicator/FooterIndicator';\nimport LoadingIndicatorWrapper from '../../components/loading-indicator/LoadingIndicatorWrapper';\nimport { bdlBoxBlue } from '../../styles/variables';\n\nimport CopyrightFooter from './CopyrightFooter';\nimport InstantLogin from './InstantLogin';\nimport LeftSidebarDropWrapper from './LeftSidebarDropWrapper';\nimport LeftSidebarIconWrapper from './LeftSidebarIconWrapper';\nimport NewItemsIndicator from './NewItemsIndicator';\nimport defaultNavLinkRenderer from './defaultNavLinkRenderer';\n\nimport type { Props as LeftSidebarLinkProps } from './LeftSidebarLink';\nimport type { Callout } from './Callout';\n\nimport './styles/LeftSidebar.scss';\n\ntype SubMenuItem = {\n    /** Sidebar Link Callout */\n    callout?: Callout,\n    /** flag to mark whether a menu item can be dropped on */\n    canReceiveDrop?: boolean,\n    /** class to add to sub menu element */\n    className?: string,\n    /** Ref for parent to access drop target */\n    dropTargetRef?: { current: null | HTMLDivElement },\n    /** Optional HTML attributes to append to menu item */\n    htmlAttributes?: Object,\n    /** React element representing an svg icon */\n    iconComponent?: ?React.ComponentType<any>,\n    /** React component representing an svg icon */\n    iconElement?: ?React.Element<any>,\n    /** Unique identifier for menu item */\n    id: string,\n    /** Localized text string to use for individual menu items */\n    message: string,\n    /** Optional left side bar link renderer. Defaults to defaultNavLinkRenderer */\n    navLinkRenderer?: (props: LeftSidebarLinkProps) => React.Node,\n    /** Whether we should show a badge marking new item content */\n    newItemBadge?: boolean,\n    /** Optional remove link click handler */\n    onClickRemove?: Function,\n    /** Optional remove button htmlAttributes */\n    removeButtonHtmlAttributes?: Object,\n    routerLink?: React.ComponentType<any>,\n    routerProps?: Object,\n    /** Whether the menu icon should be scaled to compensate for extra white space in SVG */\n    scaleIcon?: boolean,\n    /** Whether the current page is associated with the current link */\n    selected?: boolean,\n    /** Whether to show drop zone only when hovered over */\n    showDropZoneOnHover?: boolean,\n    /** Whether the tooltip should be shown */\n    showTooltip?: boolean,\n};\n\ntype MenuItem = {\n    /** Sidebar Link Callout */\n    callout?: Callout,\n    /** flag to mark whether a menu item can be dropped on */\n    canReceiveDrop?: boolean,\n    /** class to add to menu element */\n    className?: string,\n    /** Whether the menu should render as collapsed or expanded */\n    collapsed?: boolean,\n    /** Ref for parent to access drop target */\n    dropTargetRef?: { current: null | HTMLDivElement },\n    /** Optional HTML attributes to append to menu item */\n    htmlAttributes?: Object,\n    /** React element or component representing an svg icon */\n    iconComponent?: ?React.ComponentType<any>,\n    /** React component representing an svg icon */\n    iconElement?: ?React.Element<any>,\n    /** Unique identifier for menu item */\n    id: string,\n    /** Sub menu items for the top-level menu */\n    menuItems?: Array<SubMenuItem>,\n    /** Localized text string to use for individual menu items */\n    message: string,\n    /** Optional left side bar link renderer. Defaults to defaultNavLinkRenderer */\n    navLinkRenderer?: (props: LeftSidebarLinkProps) => React.Node,\n    /** Whether we should show a badge marking new item content */\n    newItemBadge?: boolean,\n    /** Optional remove link click handler */\n    onClickRemove?: Function,\n    /** handler for when a user clicks on the toggleable menu item UI element */\n    onToggleCollapse?: Function,\n    placeholder?: string,\n    /** Optional remove button htmlAttributes */\n    removeButtonHtmlAttributes?: Object,\n    routerLink?: React.ComponentType<any>,\n    routerProps?: Object,\n    /** Whether the menu icon should be scaled to compensate for extra white space in SVG */\n    scaleIcon?: boolean,\n    /** Whether the current page is associated with the current link */\n    selected?: boolean,\n    /** Whether child icons of this menu item should be shown */\n    showChildIcons?: boolean,\n    /** Whether to show drop zone only when hovered over */\n    showDropZoneOnHover?: boolean,\n    /** Whether to show a loading indicator on the list */\n    showLoadingIndicator?: boolean,\n    /** Whether the tooltip should be shown */\n    showTooltip?: boolean,\n};\n\ntype LeftSidebarProps = {\n    /** Custom classname(s) */\n    className?: string,\n    /** HTML attributes for use with the copyright footer */\n    copyrightFooterProps?: Object,\n    /** Theme object specifying primary/secondary colors, and highlighting */\n    customTheme?: Object,\n    /** HTML attributes associated with this container */\n    htmlAttributes?: Object,\n    /** Text for the footer indicator */\n    indicatorText?: string,\n    /** Properties associated with InstantLogin component */\n    instantLoginProps?: Object,\n    /** Set the drag mode of the sidebar? */\n    isDragging?: boolean,\n    /** Determine if session is an instant login session or not */\n    isInstantLoggedIn?: boolean,\n};\n\ntype Props = {\n    /** Optional properties defining selected items, customThemes, HTML attributes, and copyright text */\n    leftSidebarProps: LeftSidebarProps,\n    /** Contents for the menu. Allows for two levels of nesting */\n    menuItems: Array<MenuItem>,\n};\n\ntype State = {\n    isScrollableAbove: boolean,\n    isScrollableBelow: boolean,\n    isScrolling: boolean,\n};\n\nclass LeftSidebar extends React.Component<Props, State> {\n    static defaultProps = {\n        leftSidebarProps: {},\n        menuItems: [],\n    };\n\n    constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            isScrollableAbove: false,\n            isScrollableBelow: false,\n            isScrolling: false,\n        };\n    }\n\n    componentDidUpdate() {\n        if (!this.elScrollableList) {\n            return;\n        }\n\n        const overflow = this.calculateOverflow(this.elScrollableList);\n\n        /**\n         * recalculate overflow when dropdown is visible and new collabs are added\n         * This will not go into an infinite loop because we check for changes in local component state\n         */\n        if (\n            overflow.isScrollableAbove !== this.state.isScrollableAbove ||\n            overflow.isScrollableBelow !== this.state.isScrollableBelow\n        ) {\n            // eslint-disable-next-line react/no-did-update-set-state\n            this.setState(overflow);\n        }\n    }\n\n    onListScroll = () => {\n        this.changeIsScrollingState();\n        this.throttledCheckAndChangeScrollShadows();\n    };\n\n    getIcon(\n        iconElement?: ?React.Element<any>,\n        IconComponent?: ?React.ComponentType<any>, // eslint-disable-line\n        customTheme?: Object = {},\n        selected?: boolean,\n        scaleIcon?: boolean,\n    ) {\n        const wrapperClass = scaleIcon ? 'scaled-icon' : '';\n\n        if (iconElement) {\n            return <LeftSidebarIconWrapper className={wrapperClass}>{iconElement}</LeftSidebarIconWrapper>;\n        }\n        if (IconComponent) {\n            return (\n                <LeftSidebarIconWrapper className={wrapperClass}>\n                    <IconComponent\n                        color={selected && customTheme.secondaryColor ? customTheme.secondaryColor : bdlBoxBlue}\n                        selected={selected}\n                    />\n                </LeftSidebarIconWrapper>\n            );\n        }\n\n        return null;\n    }\n\n    getNewItemBadge(newItemBadge?: boolean, customTheme?: Object = {}) {\n        const { secondaryColor } = customTheme;\n\n        return newItemBadge ? <NewItemsIndicator customColor={secondaryColor} /> : null;\n    }\n\n    getNavList(\n        headerLinkProps: MenuItem,\n        leftSidebarProps: LeftSidebarProps,\n        showLoadingIndicator?: boolean,\n        onToggleCollapse?: ?Function,\n    ) {\n        const {\n            canReceiveDrop = false,\n            className = '',\n            collapsed,\n            dropTargetRef,\n            id,\n            menuItems,\n            placeholder,\n            showDropZoneOnHover,\n        } = headerLinkProps;\n\n        const heading = onToggleCollapse ? (\n            <NavListCollapseHeader onToggleCollapse={onToggleCollapse}>\n                {this.getNavLink(headerLinkProps, leftSidebarProps)}\n            </NavListCollapseHeader>\n        ) : (\n            this.getNavLink(headerLinkProps, leftSidebarProps)\n        );\n\n        const placeholderEl =\n            (menuItems && menuItems.length) || showLoadingIndicator ? null : (\n                <div className=\"placeholder\">{placeholder}</div>\n            );\n\n        const classes = classNames('left-sidebar-list', className, {\n            'is-loading-empty': showLoadingIndicator && menuItems && menuItems.length === 0,\n            'is-loading': showLoadingIndicator && menuItems && menuItems.length > 0,\n            'lsb-scrollable-shadow-top': this.state.isScrollableAbove,\n            'lsb-scrollable-shadow-bottom': this.state.isScrollableBelow,\n        });\n\n        const ulProps = onToggleCollapse\n            ? {\n                  onScroll: this.onListScroll,\n                  ref: elScrollableList => {\n                      this.elScrollableList = elScrollableList;\n                  },\n              }\n            : {};\n\n        const builtNavList = (\n            <NavList\n                className={classes}\n                collapsed={collapsed}\n                heading={heading}\n                placeholder={placeholderEl}\n                key={`list-${id}`}\n                ulProps={ulProps}\n            >\n                {(menuItems && menuItems.map(props => this.getNavLink(props, leftSidebarProps))) || null}\n            </NavList>\n        );\n\n        return canReceiveDrop ? (\n            <LeftSidebarDropWrapper\n                isDragging={leftSidebarProps.isDragging}\n                dropTargetRef={dropTargetRef}\n                showDropZoneOnHover={showDropZoneOnHover}\n            >\n                {builtNavList}\n            </LeftSidebarDropWrapper>\n        ) : (\n            builtNavList\n        );\n    }\n\n    getNavLink(props: MenuItem | SubMenuItem, leftSidebarProps: LeftSidebarProps) {\n        const {\n            callout,\n            canReceiveDrop = false,\n            className = '',\n            dropTargetRef,\n            htmlAttributes,\n            iconComponent,\n            iconElement,\n            id,\n            message,\n            navLinkRenderer,\n            newItemBadge,\n            onClickRemove,\n            removeButtonHtmlAttributes,\n            routerLink,\n            routerProps,\n            scaleIcon,\n            selected = false,\n            showTooltip,\n            showDropZoneOnHover,\n        } = props;\n\n        const linkClassNames = classNames('left-sidebar-link', className, {\n            'is-selected': selected,\n        });\n\n        const linkProps = {\n            callout,\n            className: linkClassNames,\n            customTheme: leftSidebarProps.customTheme,\n            onClickRemove,\n            htmlAttributes,\n            icon: this.getIcon(iconElement, iconComponent, leftSidebarProps.customTheme, selected, scaleIcon),\n            isScrolling: this.state.isScrolling,\n            message,\n            newItemBadge: this.getNewItemBadge(newItemBadge, leftSidebarProps.customTheme),\n            removeButtonHtmlAttributes,\n            routerLink,\n            routerProps,\n            selected,\n            showTooltip,\n        };\n\n        const builtLink = navLinkRenderer ? navLinkRenderer(linkProps) : defaultNavLinkRenderer(linkProps);\n\n        // Check for menu items on links so we don't double-highlight groups\n        return canReceiveDrop && !props.menuItems ? (\n            <LeftSidebarDropWrapper\n                isDragging={leftSidebarProps.isDragging}\n                dropTargetRef={dropTargetRef}\n                key={`link-${id}`}\n                showDropZoneOnHover={showDropZoneOnHover}\n            >\n                {builtLink}\n            </LeftSidebarDropWrapper>\n        ) : (\n            <React.Fragment key={`link-${id}`}>{builtLink}</React.Fragment>\n        );\n    }\n\n    calculateOverflow(elem: HTMLElement) {\n        const isScrollableAbove = elem.scrollTop > 0;\n        const isScrollableBelow = elem.scrollTop < elem.scrollHeight - elem.clientHeight;\n        return {\n            isScrollableAbove,\n            isScrollableBelow,\n        };\n    }\n\n    checkAndChangeScrollShadows = () => {\n        if (this.elScrollableList) {\n            this.setState(this.calculateOverflow(this.elScrollableList));\n        }\n    };\n\n    changeIsScrollingState = () => {\n        if (!this.state.isScrolling) {\n            this.setState({\n                isScrolling: true,\n            });\n        }\n\n        this.debouncedTurnOffScrollingState();\n    };\n\n    turnOffScrollingState = () => {\n        this.setState({\n            isScrolling: false,\n        });\n    };\n\n    debouncedTurnOffScrollingState = debounce(this.turnOffScrollingState, 100);\n\n    elScrollableList: ?HTMLElement;\n\n    throttledCheckAndChangeScrollShadows = throttle(this.checkAndChangeScrollShadows, 50);\n\n    render() {\n        const { leftSidebarProps, menuItems } = this.props;\n        const className = leftSidebarProps.className || '';\n        const navSidebarProps = leftSidebarProps.htmlAttributes || {};\n        const instantLoginProps = leftSidebarProps.instantLoginProps || {};\n\n        const preparedMenu = menuItems.map((props, key) => {\n            if (props.menuItems) {\n                if (props.onToggleCollapse) {\n                    const { collapsed, showLoadingIndicator } = props;\n\n                    return (\n                        <LoadingIndicatorWrapper\n                            className=\"favorites-loading-wrapper\"\n                            crawlerPosition=\"top\"\n                            isLoading={showLoadingIndicator && !collapsed}\n                            key={`loading-indicator-${key}`}\n                        >\n                            {this.getNavList(props, leftSidebarProps, showLoadingIndicator, props.onToggleCollapse)}\n                        </LoadingIndicatorWrapper>\n                    );\n                }\n\n                return this.getNavList(props, leftSidebarProps);\n            }\n\n            return this.getNavLink(props, leftSidebarProps);\n        });\n\n        return (\n            <NavSidebar className={`left-sidebar ${className}`} {...navSidebarProps}>\n                {leftSidebarProps.isInstantLoggedIn ? <InstantLogin {...instantLoginProps} /> : null}\n                <div className=\"left-sidebar-container\">{preparedMenu}</div>\n                <CopyrightFooter linkProps={leftSidebarProps.copyrightFooterProps} />\n                {leftSidebarProps.indicatorText ? (\n                    <FooterIndicator indicatorText={leftSidebarProps.indicatorText} />\n                ) : null}\n            </NavSidebar>\n        );\n    }\n}\n\nexport default LeftSidebar;\n"],"mappings":"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","ignoreList":[]}