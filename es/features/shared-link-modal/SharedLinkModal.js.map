{"version":3,"file":"SharedLinkModal.js","names":["React","Component","FormattedMessage","Button","Modal","ModalActions","commonMessages","SharedLink","EmailSharedLink","messages","accessLevelPropType","allowedAccessLevelsPropType","permissionLevelPropType","SharedLinkModal","constructor","args","_defineProperty","isEmailSharedLinkExpanded","setState","renderSharedLink","accessLevel","accessMenuButtonProps","allowedAccessLevels","canRemoveLink","changeAccessLevel","changePermissionLevel","copyButtonProps","enterpriseName","expiration","isDownloadAllowed","isEditAllowed","isPreviewAllowed","itemType","onCopySuccess","onSettingsClick","permissionLevel","removeLink","removeLinkButtonProps","sharedLink","submitting","props","createElement","renderEmailSharedLink","contacts","defaultEmailMessage","emailMessageProps","getContacts","onRequestClose","sendEmail","isExpanded","state","onExpand","handleEmailSharedLinkExpand","render","isOpen","itemName","modalProps","_extends","className","focusElementSelector","undefined","title","sharedLinkModalTitle","values","isDisabled","onClick","type","close"],"sources":["../../../src/features/shared-link-modal/SharedLinkModal.js"],"sourcesContent":["/* @flow */\nimport React, { Component } from 'react';\nimport { FormattedMessage } from 'react-intl';\n\nimport Button from '../../components/button';\nimport { Modal, ModalActions } from '../../components/modal';\nimport commonMessages from '../../common/messages';\n\nimport SharedLink from './SharedLink';\nimport EmailSharedLink from './EmailSharedLink';\nimport messages from './messages';\nimport { accessLevelPropType, allowedAccessLevelsPropType, permissionLevelPropType } from './propTypes';\n\ntype Props = {\n    /** Current access level for this item; one of 'peopleWithTheLink' | 'peopleInYourCompany' | 'peopleInThisItem' */\n    accessLevel?: accessLevelPropType,\n    accessMenuButtonProps?: Object,\n    /** The selectable access levels. Should be an object { peopleWithTheLink: true/false, peopleInYourCompany: true/false, peopleInThisItem: true/false } */\n    allowedAccessLevels?: allowedAccessLevelsPropType,\n    /** Determines whether or not user is allowed to remove shared link */\n    canRemoveLink?: boolean,\n    /** Function that changes access level; (newAccessLevel: 'peopleWithTheLink' | 'peopleInYourCompany' | 'peopleInThisItem') => void */\n    changeAccessLevel: Function,\n    /** Function that changes permission level; (newPermissionLevel: 'canView' | 'canEdit') => void. If not provided, then the permission menu won't show up. */\n    changePermissionLevel?: Function,\n    /** An array of contacts for the pill selector dropdown. If not provided, \"Email Shared Link\" section will not appear. */\n    contacts?: Array<{\n        email?: string,\n        id: number | string,\n        name: string,\n        type: string,\n    }>,\n    copyButtonProps?: Object,\n    /** Default \"send shared link\" email message */\n    defaultEmailMessage?: string,\n    emailMessageProps?: Object,\n    enterpriseName?: string,\n    /** Timestamp for shared link expiration date. If not provided, expiration icon will not be shown. */\n    expiration?: number,\n    /** Handler function whenever the user types to fetch contacts. If not provided, \"Email Shared Link\" section will not appear. */\n    getContacts?: Function,\n    isDownloadAllowed?: boolean,\n    isEditAllowed?: boolean,\n    isOpen?: boolean,\n    isPreviewAllowed?: boolean,\n    itemName: string,\n    itemType: 'folder' | 'file' | 'weblink',\n    modalProps?: Object,\n    onCopySuccess?: Function,\n    onRequestClose: Function,\n    /** Handler for clicks on the settings icon. If not provided, the settings icon won't be rendered. */\n    onSettingsClick?: Function,\n    /** Current permission level for this item; one of 'canView' | 'canEdit'. If not provided, then the permission menu won't show up. */\n    permissionLevel?: permissionLevelPropType,\n    /** Function that removes the shared link; () => void */\n    removeLink: Function,\n    removeLinkButtonProps?: Object,\n    /** Function to send the shared link to the entered emails. Calls function with an object in the format { emails: Array<string>, emailMessage: string }.\n     *  If not provided, \"Email Shared Link\" section will not appear. */\n    sendEmail?: Function,\n    /** Share URL of the item */\n    sharedLink: string,\n    /** Whether or not a request is in progress */\n    submitting?: boolean,\n};\n\ntype State = {\n    isEmailSharedLinkExpanded: boolean,\n};\n\nclass SharedLinkModal extends Component<Props, State> {\n    state = {\n        isEmailSharedLinkExpanded: false,\n    };\n\n    handleEmailSharedLinkExpand = () => {\n        this.setState({ isEmailSharedLinkExpanded: true });\n    };\n\n    renderSharedLink() {\n        const {\n            accessLevel,\n            accessMenuButtonProps,\n            allowedAccessLevels,\n            canRemoveLink,\n            changeAccessLevel,\n            changePermissionLevel,\n            copyButtonProps,\n            enterpriseName,\n            expiration,\n            isDownloadAllowed,\n            isEditAllowed,\n            isPreviewAllowed,\n            itemType,\n            onCopySuccess,\n            onSettingsClick,\n            permissionLevel,\n            removeLink,\n            removeLinkButtonProps,\n            sharedLink,\n            submitting,\n        } = this.props;\n        return (\n            <SharedLink\n                accessLevel={accessLevel}\n                accessMenuButtonProps={accessMenuButtonProps}\n                allowedAccessLevels={allowedAccessLevels}\n                canRemoveLink={canRemoveLink}\n                changeAccessLevel={changeAccessLevel}\n                changePermissionLevel={changePermissionLevel}\n                copyButtonProps={copyButtonProps}\n                enterpriseName={enterpriseName}\n                expiration={expiration}\n                isDownloadAllowed={isDownloadAllowed}\n                isEditAllowed={isEditAllowed}\n                isPreviewAllowed={isPreviewAllowed}\n                itemType={itemType}\n                onCopySuccess={onCopySuccess}\n                onSettingsClick={onSettingsClick}\n                permissionLevel={permissionLevel}\n                removeLink={removeLink}\n                removeLinkButtonProps={removeLinkButtonProps}\n                sharedLink={sharedLink}\n                submitting={submitting}\n            />\n        );\n    }\n\n    renderEmailSharedLink() {\n        const {\n            contacts,\n            defaultEmailMessage,\n            emailMessageProps,\n            getContacts,\n            onRequestClose,\n            sendEmail,\n            submitting,\n        } = this.props;\n\n        if (!getContacts || !contacts || !sendEmail) {\n            return null;\n        }\n\n        return (\n            <EmailSharedLink\n                contacts={contacts}\n                defaultEmailMessage={defaultEmailMessage}\n                emailMessageProps={emailMessageProps}\n                getContacts={getContacts}\n                isExpanded={this.state.isEmailSharedLinkExpanded}\n                sendEmail={sendEmail}\n                onRequestClose={onRequestClose}\n                submitting={submitting}\n                onExpand={this.handleEmailSharedLinkExpand}\n            />\n        );\n    }\n\n    render() {\n        const { isOpen, itemName, modalProps, onRequestClose, submitting } = this.props;\n        const { isEmailSharedLinkExpanded } = this.state;\n\n        return (\n            <Modal\n                className=\"shared-link-modal\"\n                focusElementSelector=\".shared-link-container input\"\n                isOpen={isOpen}\n                onRequestClose={submitting ? undefined : onRequestClose}\n                title={\n                    <FormattedMessage\n                        {...messages.sharedLinkModalTitle}\n                        values={{\n                            itemName,\n                        }}\n                    />\n                }\n                {...modalProps}\n            >\n                {this.renderSharedLink()}\n                <hr />\n                {this.renderEmailSharedLink()}\n                {!isEmailSharedLinkExpanded && (\n                    <ModalActions>\n                        <Button isDisabled={submitting} onClick={onRequestClose} type=\"button\">\n                            <FormattedMessage {...commonMessages.close} />\n                        </Button>\n                    </ModalActions>\n                )}\n            </Modal>\n        );\n    }\n}\n\nexport default SharedLinkModal;\n"],"mappings":"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","ignoreList":[]}