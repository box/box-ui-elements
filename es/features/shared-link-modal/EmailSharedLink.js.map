{"version":3,"file":"EmailSharedLink.js","names":["React","Component","PropTypes","classNames","FormattedMessage","injectIntl","PillSelectorDropdown","ContactDatalistItem","TextArea","PrimaryButton","ModalActions","Button","parseEmails","commonMessages","messages","EmailSharedLink","constructor","props","_defineProperty","contacts","pillSelectorInputValue","selectedOptions","state","filter","email","id","find","value","map","name","type","text","getContacts","trimmedValue","trim","setState","pillSelectorError","pills","option","index","slice","splice","intl","formatMessage","validator","invalidEmailError","pattern","test","event","preventDefault","sendEmail","emailMessage","length","enterAtLeastOneEmailError","emails","target","defaultEmailMessage","render","emailMessageProps","isExpanded","onExpand","onRequestClose","submitting","selectorOptions","getSelectorOptions","createElement","onSubmit","className","allowCustomPills","error","label","emailSharedLink","inputProps","_objectSpread","onFocus","onInput","handlePillSelectorInput","onRemove","handlePillRemove","onSelect","handlePillSelect","parseItems","placeholder","pillSelectorPlaceholder","validateForError","key","subtitle","isRequired","messageTitle","onChange","handleMessageChange","rows","isDisabled","onClick","cancel","isLoading","send","arrayOf","shape","string","oneOfType","number","isrequired","object","any","func","bool","EmailSharedLinkBase"],"sources":["../../../src/features/shared-link-modal/EmailSharedLink.js"],"sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport { FormattedMessage, injectIntl } from 'react-intl';\n\nimport PillSelectorDropdown from '../../components/pill-selector-dropdown';\nimport ContactDatalistItem from '../../components/contact-datalist-item';\nimport TextArea from '../../components/text-area';\nimport PrimaryButton from '../../components/primary-button';\nimport { ModalActions } from '../../components/modal';\nimport Button from '../../components/button';\nimport parseEmails from '../../utils/parseEmails';\nimport commonMessages from '../../common/messages';\n\nimport messages from './messages';\n\nimport './EmailSharedLink.scss';\n\nclass EmailSharedLink extends Component {\n    static propTypes = {\n        contacts: PropTypes.arrayOf(\n            PropTypes.shape({\n                email: PropTypes.string,\n                id: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isrequired,\n                name: PropTypes.string.isRequired,\n                type: PropTypes.string.isRequired,\n            }),\n        ).isRequired,\n        defaultEmailMessage: PropTypes.string,\n        emailMessageProps: PropTypes.object,\n        intl: PropTypes.any,\n        getContacts: PropTypes.func.isRequired,\n        isExpanded: PropTypes.bool,\n        onExpand: PropTypes.func.isRequired,\n        onRequestClose: PropTypes.func.isRequired,\n        sendEmail: PropTypes.func.isRequired,\n        submitting: PropTypes.bool,\n    };\n\n    static defaultProps = {\n        emailMessageProps: {},\n    };\n\n    constructor(props) {\n        super(props);\n\n        const { defaultEmailMessage } = props;\n\n        this.state = {\n            pillSelectorError: '',\n            pillSelectorInputValue: '',\n            emailMessage: defaultEmailMessage || '',\n            selectedOptions: [],\n        };\n    }\n\n    getSelectorOptions = () => {\n        const { contacts } = this.props;\n        const { pillSelectorInputValue, selectedOptions } = this.state;\n\n        if (pillSelectorInputValue !== '') {\n            return contacts\n                .filter(\n                    // filter contacts who have already been selected\n                    ({ email, id }) => !selectedOptions.find(({ value }) => value === email || value === id),\n                )\n                .map(({ email, id, name, type }) => ({\n                    // map to standardized DatalistItem format\n                    // TODO: refactor this so inline conversions aren't required at every usage\n                    email,\n                    id,\n                    text: name,\n                    type,\n                    value: email || id, // if email doesn't exist, contact is a group, use id\n                }));\n        }\n\n        // return empty selector options if input value is empty\n        return [];\n    };\n\n    handlePillSelectorInput = value => {\n        const { getContacts } = this.props;\n\n        const trimmedValue = value.trim();\n\n        getContacts(trimmedValue);\n\n        // As user is typing, reset error\n        this.setState({\n            pillSelectorError: '',\n            pillSelectorInputValue: trimmedValue,\n        });\n    };\n\n    handlePillSelect = pills => {\n        this.setState({\n            selectedOptions: [...this.state.selectedOptions, ...pills],\n        });\n    };\n\n    handlePillRemove = (option, index) => {\n        const selectedOptions = this.state.selectedOptions.slice();\n        selectedOptions.splice(index, 1);\n        this.setState({ selectedOptions });\n    };\n\n    validateForError = text => {\n        const {\n            intl: { formatMessage },\n        } = this.props;\n        let pillSelectorError = '';\n\n        if (text && !this.validator(text)) {\n            pillSelectorError = formatMessage(commonMessages.invalidEmailError);\n        }\n\n        this.setState({ pillSelectorError });\n    };\n\n    validator = text => {\n        // email input validation\n        const pattern = /^[^\\s<>@,]+@[^\\s<>@,/\\\\]+\\.[^\\s<>@,]+$/i;\n        return pattern.test(text);\n    };\n\n    sendEmail = event => {\n        event.preventDefault();\n\n        const {\n            intl: { formatMessage },\n            sendEmail,\n        } = this.props;\n        const { selectedOptions, emailMessage, pillSelectorError } = this.state;\n\n        if (pillSelectorError !== '') {\n            return;\n        }\n\n        if (selectedOptions.length === 0) {\n            // Block submission if no pills are selected\n            this.setState({\n                pillSelectorError: formatMessage(messages.enterAtLeastOneEmailError),\n            });\n            return;\n        }\n\n        sendEmail({\n            emails: selectedOptions.map(({ value }) => value),\n            emailMessage,\n        });\n    };\n\n    handleMessageChange = event => {\n        this.setState({ emailMessage: event.target.value });\n    };\n\n    render() {\n        const { pillSelectorError, selectedOptions, emailMessage } = this.state;\n        const {\n            emailMessageProps,\n            intl: { formatMessage },\n            isExpanded,\n            onExpand,\n            onRequestClose,\n            submitting,\n        } = this.props;\n\n        const selectorOptions = this.getSelectorOptions();\n\n        return (\n            <form\n                onSubmit={this.sendEmail}\n                className={classNames('email-shared-link', {\n                    'is-expanded': isExpanded,\n                })}\n            >\n                <PillSelectorDropdown\n                    allowCustomPills\n                    error={pillSelectorError}\n                    label={<FormattedMessage {...messages.emailSharedLink} />}\n                    inputProps={{ onFocus: onExpand, ...emailMessageProps }}\n                    onInput={this.handlePillSelectorInput}\n                    onRemove={this.handlePillRemove}\n                    onSelect={this.handlePillSelect}\n                    parseItems={parseEmails}\n                    placeholder={formatMessage(commonMessages.pillSelectorPlaceholder)}\n                    selectedOptions={selectedOptions}\n                    selectorOptions={selectorOptions}\n                    validateForError={this.validateForError}\n                    validator={this.validator}\n                >\n                    {selectorOptions.map(({ email, text, value }) => (\n                        <ContactDatalistItem key={value} name={text} subtitle={email} />\n                    ))}\n                </PillSelectorDropdown>\n                <TextArea\n                    isRequired\n                    label={<FormattedMessage {...messages.messageTitle} />}\n                    onChange={this.handleMessageChange}\n                    rows={3}\n                    value={emailMessage}\n                />\n                {isExpanded && (\n                    <ModalActions>\n                        <Button isDisabled={submitting} onClick={onRequestClose} type=\"button\">\n                            <FormattedMessage {...commonMessages.cancel} />\n                        </Button>\n                        <PrimaryButton isDisabled={submitting} isLoading={submitting} type=\"submit\">\n                            <FormattedMessage {...commonMessages.send} />\n                        </PrimaryButton>\n                    </ModalActions>\n                )}\n            </form>\n        );\n    }\n}\n\nexport { EmailSharedLink as EmailSharedLinkBase };\nexport default injectIntl(EmailSharedLink);\n"],"mappings":"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","ignoreList":[]}