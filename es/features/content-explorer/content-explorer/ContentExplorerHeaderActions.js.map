{"version":3,"file":"ContentExplorerHeaderActions.js","names":["PropTypes","React","Component","injectIntl","ContentExplorerSearch","ContentExplorerNewFolderButton","ContentExplorerBreadcrumbs","ContentExplorerFolderTreeBreadcrumbs","BreadcrumbPropType","ContentExplorerModePropType","FoldersPathPropType","messages","SEARCH_RESULTS_FOLDER_ID","isSearchResultsFolder","folder","id","ContentExplorerHeaderActions","constructor","props","_defineProperty","folderPathIndex","event","foldersPath","onEnterFolder","clickedFolder","preventDefault","length","submitSearch","lastSubmittedSearchInput","newFolderIndex","isViewingSearchResults","exitSearch","handleBreadcrumbClick","input","setState","searchInput","state","foldersPathBeforeSearch","getCurrentFolder","isInSearchMode","some","onFoldersPathUpdated","onExitSearch","foldersPathLength","folderBeforeSearch","intl","onSearchSubmit","name","formatMessage","searchResults","render","breadcrumbIcon","breadcrumbProps","children","contentExplorerMode","customInput","CustomInput","onCreateNewFolderButtonClick","showCreateNewFolderButton","isCreateNewFolderAllowed","hasFolderTreeBreadcrumbs","numTotalItems","searchInputProps","isBreadcrumbButtonDisabled","createElement","className","inputValue","onClearButtonClick","handleClearSearchButtonClick","onInput","handleSearchInput","onSubmit","handleSubmitSearch","onClick","isDisabled","isFolderTreeButtonHidden","onBreadcrumbClick","isUpButtonDisabled","onUpButtonClick","handleBreadcrumbsUpButtonClick","element","node","isRequired","func","any","bool","number","object","ContentExplorerHeaderActionsBase"],"sources":["../../../../src/features/content-explorer/content-explorer/ContentExplorerHeaderActions.js"],"sourcesContent":["import PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { injectIntl } from 'react-intl';\n\nimport ContentExplorerSearch from './ContentExplorerSearch';\nimport ContentExplorerNewFolderButton from './ContentExplorerNewFolderButton';\nimport ContentExplorerBreadcrumbs from './ContentExplorerBreadcrumbs';\nimport ContentExplorerFolderTreeBreadcrumbs from './ContentExplorerFolderTreeBreadcrumbs';\n\nimport { BreadcrumbPropType, ContentExplorerModePropType, FoldersPathPropType } from '../prop-types';\nimport messages from '../messages';\n\nconst SEARCH_RESULTS_FOLDER_ID = 'search_results_id';\n\nconst isSearchResultsFolder = folder => folder && folder.id === SEARCH_RESULTS_FOLDER_ID;\n\nclass ContentExplorerHeaderActions extends Component {\n    static propTypes = {\n        breadcrumbIcon: PropTypes.element,\n        breadcrumbProps: BreadcrumbPropType,\n        children: PropTypes.node,\n        contentExplorerMode: ContentExplorerModePropType.isRequired,\n        customInput: PropTypes.func,\n        foldersPath: FoldersPathPropType.isRequired,\n        intl: PropTypes.any,\n        onFoldersPathUpdated: PropTypes.func.isRequired,\n        onEnterFolder: PropTypes.func.isRequired,\n        onCreateNewFolderButtonClick: PropTypes.func,\n        showCreateNewFolderButton: PropTypes.bool,\n        isCreateNewFolderAllowed: PropTypes.bool,\n        hasFolderTreeBreadcrumbs: PropTypes.bool,\n        onSearchSubmit: PropTypes.func.isRequired,\n        onExitSearch: PropTypes.func.isRequired,\n        numTotalItems: PropTypes.number,\n        searchInputProps: PropTypes.object,\n    };\n\n    static defaultProps = {\n        showCreateNewFolderButton: true,\n        isCreateNewFolderAllowed: true,\n        searchInputProps: {},\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            searchInput: '',\n        };\n        this.foldersPathBeforeSearch = [];\n        this.lastSubmittedSearchInput = '';\n    }\n\n    getCurrentFolder() {\n        const { foldersPath } = this.props;\n        return foldersPath[foldersPath.length - 1];\n    }\n\n    isInSearchMode() {\n        const { foldersPath } = this.props;\n        return foldersPath.some(isSearchResultsFolder);\n    }\n\n    isViewingSearchResults() {\n        return isSearchResultsFolder(this.getCurrentFolder());\n    }\n\n    handleBreadcrumbClick = (folderPathIndex, event) => {\n        const { foldersPath, onEnterFolder } = this.props;\n        const clickedFolder = foldersPath[folderPathIndex];\n\n        if (event) {\n            event.preventDefault();\n        }\n\n        // Do nothing if the right-most breadcrumb (current folder) is clicked\n        if (folderPathIndex === foldersPath.length - 1) {\n            return;\n        }\n\n        // Show the search results for the last submitted input when clicking the \"Search Results\" breadcrumb\n        if (isSearchResultsFolder(clickedFolder)) {\n            this.submitSearch(this.lastSubmittedSearchInput);\n            return;\n        }\n\n        onEnterFolder(clickedFolder);\n    };\n\n    handleBreadcrumbsUpButtonClick = () => {\n        const { foldersPath } = this.props;\n        const newFolderIndex = foldersPath.length - 2;\n\n        if (this.isViewingSearchResults()) {\n            this.exitSearch();\n        } else if (newFolderIndex >= 0) {\n            this.handleBreadcrumbClick(newFolderIndex);\n        }\n    };\n\n    handleSearchInput = input => {\n        this.setState({\n            searchInput: input,\n        });\n    };\n\n    handleClearSearchButtonClick = () => {\n        this.exitSearch();\n    };\n\n    exitSearch() {\n        const { onFoldersPathUpdated, onExitSearch } = this.props;\n\n        // Clear the search input even if we aren't in search mode\n        this.setState({ searchInput: '' });\n\n        if (this.isInSearchMode()) {\n            const foldersPathLength = this.foldersPathBeforeSearch.length;\n            const folderBeforeSearch = foldersPathLength > 0 ? this.foldersPathBeforeSearch[foldersPathLength - 1] : {};\n            onFoldersPathUpdated(this.foldersPathBeforeSearch);\n            onExitSearch(folderBeforeSearch);\n        }\n    }\n\n    handleSubmitSearch = () => {\n        const { searchInput } = this.state;\n\n        this.submitSearch(searchInput);\n    };\n\n    submitSearch(searchInput) {\n        const { foldersPath, intl, onFoldersPathUpdated, onSearchSubmit } = this.props;\n\n        if (searchInput) {\n            // Only save folders path if we aren't already in search mode\n            if (!this.isInSearchMode()) {\n                this.foldersPathBeforeSearch = foldersPath;\n            }\n\n            this.lastSubmittedSearchInput = searchInput;\n            onFoldersPathUpdated([\n                {\n                    id: SEARCH_RESULTS_FOLDER_ID,\n                    name: intl.formatMessage(messages.searchResults),\n                },\n            ]);\n\n            onSearchSubmit(searchInput);\n        } else {\n            this.exitSearch();\n        }\n    }\n\n    render() {\n        const {\n            breadcrumbIcon,\n            breadcrumbProps,\n            children,\n            contentExplorerMode,\n            customInput: CustomInput,\n            foldersPath,\n            onCreateNewFolderButtonClick,\n            showCreateNewFolderButton,\n            isCreateNewFolderAllowed,\n            hasFolderTreeBreadcrumbs,\n            numTotalItems,\n            searchInputProps,\n        } = this.props;\n        const { searchInput } = this.state;\n        const isInSearchMode = this.isInSearchMode();\n        const isBreadcrumbButtonDisabled = foldersPath.length <= 1 && !isInSearchMode;\n\n        return (\n            <div className=\"content-explorer-header-actions\">\n                <div className=\"content-explorer-search-new-folder-container\">\n                    {CustomInput ? (\n                        <CustomInput />\n                    ) : (\n                        <ContentExplorerSearch\n                            inputValue={searchInput}\n                            onClearButtonClick={this.handleClearSearchButtonClick}\n                            onInput={this.handleSearchInput}\n                            onSubmit={this.handleSubmitSearch}\n                            searchInputProps={searchInputProps}\n                        />\n                    )}\n                    {showCreateNewFolderButton && (\n                        <ContentExplorerNewFolderButton\n                            contentExplorerMode={contentExplorerMode}\n                            onClick={onCreateNewFolderButtonClick}\n                            isDisabled={!isCreateNewFolderAllowed || isInSearchMode}\n                            isCreateNewFolderAllowed={isCreateNewFolderAllowed}\n                        />\n                    )}\n                    {children}\n                </div>\n                {hasFolderTreeBreadcrumbs ? (\n                    <ContentExplorerFolderTreeBreadcrumbs\n                        foldersPath={foldersPath}\n                        isFolderTreeButtonHidden={isBreadcrumbButtonDisabled || this.isViewingSearchResults()}\n                        numTotalItems={numTotalItems}\n                        onBreadcrumbClick={this.handleBreadcrumbClick}\n                    />\n                ) : (\n                    <ContentExplorerBreadcrumbs\n                        breadcrumbIcon={breadcrumbIcon}\n                        breadcrumbProps={breadcrumbProps}\n                        foldersPath={foldersPath}\n                        isUpButtonDisabled={isBreadcrumbButtonDisabled}\n                        onUpButtonClick={this.handleBreadcrumbsUpButtonClick}\n                        onBreadcrumbClick={this.handleBreadcrumbClick}\n                    />\n                )}\n            </div>\n        );\n    }\n}\n\nexport { ContentExplorerHeaderActions as ContentExplorerHeaderActionsBase };\nexport default injectIntl(ContentExplorerHeaderActions);\n"],"mappings":"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","ignoreList":[]}