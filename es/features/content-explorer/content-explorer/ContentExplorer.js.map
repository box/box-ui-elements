{"version":3,"file":"ContentExplorer.js","names":["PropTypes","React","Component","classNames","omit","ContentExplorerHeaderActions","ContentExplorerEmptyState","ContentExplorerActionButtons","ContentExplorerSelectAll","ContentExplorerIncludeSubfolders","ContentExplorerInfoNotice","ItemList","ContentExplorerModePropType","FoldersPathPropType","ItemsPropType","ContentExplorerModes","TYPE_FOLDER","ContentExplorer","constructor","props","_defineProperty","_objectSpread","state","selectedItems","controlledSelectedItems","items","length","every","item","id","isLoading","node","className","limit","nodeOfInterest","counter","parentNode","includes","contentExplorerMode","MULTI_SELECT","event","isInside","domNode","contains","target","shouldDeselectItems","deselectItems","enteredFolder","onEnterFolder","onFoldersPathUpdate","foldersPath","folderIndex","findIndex","folder","newFoldersPath","slice","concat","newState","setState","searchQuery","onSearchSubmit","isInSearchMode","folderBeforeSearch","onExitSearch","index","onSelectItem","onSelectedItemsUpdate","isDisabled","isActionDisabled","stopPropagation","newSelectedItems","toggleSelectedItem","getAllSelectedItems","onChooseItems","type","enterFolder","preventDefault","result","forEach","isLoadingItems","isSelectAllChecked","unselectAll","selectAll","isViewingSearchResults","createElement","isSearch","initialSelectedItems","initialFoldersPath","componentDidMount","document","addEventListener","handleDocumentClick","componentDidUpdate","prevInitialFoldersPath","isSelectAllAllowed","handleFoldersPathUpdated","areAllItemsSelected","componentWillUnmount","removeEventListener","getCurrentFolder","render","_this$props","actionButtonsProps","additionalColumns","isNoSelectionAllowed","breadcrumbIcon","breadcrumbProps","cancelButtonProps","chooseButtonProps","chooseButtonText","customInput","hasFolderTreeBreadcrumbs","headerActionsAccessory","onMoveItem","onCopyItem","onCancelButtonClick","onCreateNewFolderButtonClick","onSelectedClick","onViewSelectedClick","showCreateNewFolderButton","isChooseButtonLoading","isCopyButtonLoading","isCreateNewFolderAllowed","isMoveButtonLoading","isResponsive","numItemsPerPage","numTotalItems","onLoadMoreItems","includeSubfoldersProps","itemIconRenderer","itemNameLinkRenderer","itemButtonRenderer","itemRowHeight","itemRowRenderer","listHeaderHeight","listHeaderRenderer","listWidth","listHeight","searchInputProps","infoNoticeText","noItemsRenderer","rest","_objectWithoutProperties","_excluded","allSelectedItems","currentFolder","contentExplorerProps","canIncludeSubfolders","hasSubheader","selectedItemsIds","Object","keys","areActionButtonsDisabled","isFirstSelectedItemDisabled","SELECT_FILE","_extends","onClick","handleContentExplorerClick","ref","onFoldersPathUpdated","handleExitSearch","handleSearchSubmit","handleSelectAllClick","isLabelHidden","headerHeight","headerRenderer","height","renderItemListEmptyState","onItemClick","handleItemClick","onItemDoubleClick","handleItemDoubleClick","onItemNameClick","handleItemNameClick","rowHeight","width","areButtonsDisabled","onCancelClick","onChooseClick","onCopyClick","onMoveClick","object","arrayOf","element","bool","string","isRequired","func","number"],"sources":["../../../../src/features/content-explorer/content-explorer/ContentExplorer.js"],"sourcesContent":["import PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport classNames from 'classnames';\nimport omit from 'lodash/omit';\n\nimport ContentExplorerHeaderActions from './ContentExplorerHeaderActions';\nimport ContentExplorerEmptyState from './ContentExplorerEmptyState';\nimport ContentExplorerActionButtons from './ContentExplorerActionButtons';\nimport ContentExplorerSelectAll from './ContentExplorerSelectAll';\nimport ContentExplorerIncludeSubfolders from './ContentExplorerIncludeSubfolders';\nimport ContentExplorerInfoNotice from './ContentExplorerInfoNotice';\n\nimport ItemList from '../item-list';\nimport { ContentExplorerModePropType, FoldersPathPropType, ItemsPropType } from '../prop-types';\nimport ContentExplorerModes from '../modes';\n\nimport { TYPE_FOLDER } from '../../../constants';\n\nimport './ContentExplorer.scss';\n\nclass ContentExplorer extends Component {\n    static propTypes = {\n        /** Props for the action buttons container */\n        actionButtonsProps: PropTypes.object,\n        /**\n         * Extra columns displayed in the folders table after folder name column\n         * Each column has to be a Column element\n         */\n        additionalColumns: PropTypes.arrayOf(PropTypes.element),\n        /** Items that will show up as selected */\n        controlledSelectedItems: PropTypes.object,\n        /**  Allow users to choose no selections in MULTI_SELECT mode, defaults to false  */\n        isNoSelectionAllowed: PropTypes.bool,\n        /** Custom icon for the breadcrumb. Overrides the default icon */\n        breadcrumbIcon: PropTypes.element,\n        /** Props for breadcrumbs */\n        breadcrumbProps: PropTypes.object,\n        /** Props for the cancel button */\n        cancelButtonProps: PropTypes.object,\n        /** Props for the choose button */\n        chooseButtonProps: PropTypes.object,\n        /** Custom text for the choose button */\n        chooseButtonText: PropTypes.node,\n        /** Adds class name. */\n        className: PropTypes.string,\n        /** Configures the content explorer based on the user's intended action (ex. select file or move/copy) */\n        contentExplorerMode: ContentExplorerModePropType.isRequired,\n        /** Props that contains the custom search input. Is rendered in header actions */\n        customInput: PropTypes.func,\n        /** Whether the user can see the breadcrumbs represented with the folder tree button */\n        hasFolderTreeBreadcrumbs: PropTypes.bool,\n        /** Any extra items in the header to the right of the search input (and new folder button) */\n        headerActionsAccessory: PropTypes.node,\n        /** Props for the include subfolders toggle */\n        includeSubfoldersProps: PropTypes.object,\n        /** Initial path of folders. The last folder in the array is the current folder. */\n        initialFoldersPath: FoldersPathPropType.isRequired,\n        /** Initial items that will show up as selected */\n        initialSelectedItems: PropTypes.object,\n        /** Whether to use the responsive version */\n        isResponsive: PropTypes.bool,\n        /**\n         * Called when the current folder changes\n         *\n         * @param {Object} enteredFolder\n         * @param {Array} newFoldersPath\n         */\n        onEnterFolder: PropTypes.func.isRequired,\n        /** Called when the folders path is updated\n         *\n         * @param {Array} newFoldersPath\n         */\n        onFoldersPathUpdate: PropTypes.func,\n        /** Called whenever the selected items list changes\n         *\n         * @param {Object} selectedItems\n         */\n        onSelectedItemsUpdate: PropTypes.func,\n        /**\n         * Called when an item is selected\n         *\n         * @param {Object} selectedItem\n         * @param {number} selectedItemIndex\n         */\n        onSelectItem: PropTypes.func,\n        /**\n         * Called when an item is chosen\n         *\n         * @param {Object[]} chosenItems\n         */\n        onChooseItems: PropTypes.func,\n        /** Called when selected button is clicked */\n        onSelectedClick: PropTypes.func,\n        /** Called when the number of items selected text is clicked */\n        onViewSelectedClick: PropTypes.func,\n        /**\n         * Called when a destination folder has been selected for moving an item to\n         *\n         * @param {Object} destFolder destination folder\n         */\n        onMoveItem: PropTypes.func,\n        /**\n         * Called when a destination folder has been selected for copying an item to\n         *\n         * @param {Object} destFolder destination folder\n         */\n        onCopyItem: PropTypes.func,\n        /** Called when cancel button is clicked */\n        onCancelButtonClick: PropTypes.func,\n        /** Called when new folder button is clicked */\n        onCreateNewFolderButtonClick: PropTypes.func,\n        /** Whether the new folder button should be shown */\n        showCreateNewFolderButton: PropTypes.bool,\n        /** Whether the choose button should be shown with a loading indicator */\n        isChooseButtonLoading: PropTypes.bool,\n        /** Whether the copy button should be shown with a loading indicator */\n        isCopyButtonLoading: PropTypes.bool,\n        /** Whether the user has permission to create a new folder */\n        isCreateNewFolderAllowed: PropTypes.bool,\n        /** Whether the user can see select all checkbox */\n        isSelectAllAllowed: PropTypes.bool,\n        /** Whether the move button should be shown with a loading indicator */\n        isMoveButtonLoading: PropTypes.bool,\n        /**\n         * Called when a search query is submitted.\n         *\n         * @param {string} searchQuery\n         */\n        onSearchSubmit: PropTypes.func.isRequired,\n        /**\n         * Called when search mode is exited. An updated items list should now be passed in to display the user's file tree.\n         *\n         * @param {Object} folderBeforeSearch the previous folder object before entering search mode\n         */\n        onExitSearch: PropTypes.func.isRequired,\n        /** List of items to display */\n        items: ItemsPropType.isRequired,\n        /** Number of items to load per page as the user scrolls */\n        numItemsPerPage: PropTypes.number,\n        /** Total number of items across all pages */\n        numTotalItems: PropTypes.number,\n        /** Called to load more items */\n        onLoadMoreItems: PropTypes.func,\n        /** Used to render item icons in the list. Overrides the default icons. */\n        itemIconRenderer: PropTypes.func,\n        /** Used to render item name links in the list. Overrides the default links. */\n        itemNameLinkRenderer: PropTypes.func,\n        /** Used to render item buttons in the list. Overrides the default buttons. */\n        itemButtonRenderer: PropTypes.func,\n        /** Height of an item row */\n        itemRowHeight: PropTypes.number,\n        /** Used to render the row element for items on the list. Allows row customizations such as adding tooltips, etc. */\n        itemRowRenderer: PropTypes.func,\n        /** Height of the item list header, defaults to 0, which makes header not visible */\n        listHeaderHeight: PropTypes.number,\n        /** Used to render the header row on the item list */\n        listHeaderRenderer: PropTypes.func,\n        /** Width of the item list */\n        listWidth: PropTypes.number.isRequired,\n        /** Height of the item list */\n        listHeight: PropTypes.number.isRequired,\n        /** Props for the search input */\n        searchInputProps: PropTypes.object,\n        /** Text for the informational notice, defaults to empty string, which makes notice not visible */\n        infoNoticeText: PropTypes.string,\n        /** Used to render the no items state. Overrides the default no items state. */\n        noItemsRenderer: PropTypes.func,\n    };\n\n    static defaultProps = {\n        actionButtonsProps: {},\n        cancelButtonProps: {},\n        chooseButtonProps: {},\n        className: '',\n        searchInputProps: {},\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            selectedItems: props.initialSelectedItems || {},\n            foldersPath: props.initialFoldersPath,\n            isInSearchMode: false,\n            isSelectAllChecked: false,\n        };\n    }\n\n    componentDidMount() {\n        document.addEventListener('click', this.handleDocumentClick, true);\n    }\n\n    componentDidUpdate({ initialFoldersPath: prevInitialFoldersPath }) {\n        const { initialFoldersPath, isSelectAllAllowed } = this.props;\n        const { isSelectAllChecked } = this.state;\n\n        if (prevInitialFoldersPath !== initialFoldersPath) {\n            this.handleFoldersPathUpdated(initialFoldersPath);\n        }\n        if (!this.isLoadingItems() && isSelectAllAllowed) {\n            const areAllItemsSelected = this.areAllItemsSelected();\n            if (areAllItemsSelected !== isSelectAllChecked) {\n                this.setState({ isSelectAllChecked: areAllItemsSelected });\n            }\n        }\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener('click', this.handleDocumentClick, true);\n    }\n\n    getAllSelectedItems = () => {\n        return { ...this.state.selectedItems, ...this.props.controlledSelectedItems };\n    };\n\n    areAllItemsSelected = () => {\n        const { items } = this.props;\n        const { selectedItems } = this.state;\n\n        return items.length > 0 && items.every(item => selectedItems[item.id]);\n    };\n\n    isLoadingItems = () => {\n        return this.props?.items?.[0]?.isLoading;\n    };\n\n    getCurrentFolder() {\n        const { foldersPath } = this.state;\n        return foldersPath[foldersPath.length - 1];\n    }\n\n    /**\n     * Traverse the hirerachy up to the limit to see if any of the parent has the className\n     */\n    doAncestersContainClassname = (node, className, limit) => {\n        let nodeOfInterest = node;\n        let counter = 0;\n        while (nodeOfInterest.parentNode && counter < limit) {\n            // Done traversing (Document node does not have classnames)\n            if (!nodeOfInterest.parentNode.className) {\n                break;\n            }\n\n            if (nodeOfInterest.parentNode.className.includes(className)) {\n                return true;\n            }\n\n            nodeOfInterest = nodeOfInterest.parentNode;\n            counter += 1;\n        }\n\n        return false;\n    };\n\n    shouldDeselectItems = () => {\n        const { contentExplorerMode } = this.props;\n\n        return (\n            // always deselect when not in multi select mode\n            contentExplorerMode !== ContentExplorerModes.MULTI_SELECT\n        );\n    };\n\n    handleDocumentClick = event => {\n        const isInside = (this.domNode && this.domNode.contains(event.target)) || this.domNode === event.target;\n\n        if (!isInside && this.shouldDeselectItems()) {\n            this.deselectItems();\n        }\n    };\n\n    handleContentExplorerClick = () => {\n        if (this.shouldDeselectItems()) {\n            this.deselectItems();\n        }\n    };\n\n    deselectItems() {\n        const { onSelectedItemsUpdate } = this.props;\n        this.setState({\n            selectedItems: {},\n        });\n        if (onSelectedItemsUpdate) {\n            onSelectedItemsUpdate({});\n        }\n    }\n\n    enterFolder = enteredFolder => {\n        const { contentExplorerMode, onEnterFolder, onFoldersPathUpdate } = this.props;\n        const { foldersPath } = this.state;\n\n        const folderIndex = foldersPath.findIndex(folder => folder.id === enteredFolder.id);\n        let newFoldersPath = foldersPath.slice();\n\n        if (folderIndex === -1) {\n            // Append folder to the path if it's not already in the folders path\n            newFoldersPath = newFoldersPath.concat([\n                {\n                    ...enteredFolder,\n                },\n            ]);\n        } else {\n            // Otherwise, remove all folders that came after the entered folder\n            newFoldersPath = newFoldersPath.slice(0, folderIndex + 1);\n        }\n\n        const newState = { foldersPath: newFoldersPath };\n        if (contentExplorerMode !== ContentExplorerModes.MULTI_SELECT) {\n            newState.selectedItems = {};\n        }\n\n        this.setState(newState);\n        if (onFoldersPathUpdate) {\n            onFoldersPathUpdate(newFoldersPath);\n        }\n\n        onEnterFolder(enteredFolder, newFoldersPath);\n    };\n\n    handleFoldersPathUpdated = newFoldersPath => {\n        const { onFoldersPathUpdate } = this.props;\n\n        this.setState({\n            foldersPath: newFoldersPath,\n        });\n        if (onFoldersPathUpdate) {\n            onFoldersPathUpdate(newFoldersPath);\n        }\n    };\n\n    handleSearchSubmit = searchQuery => {\n        const { onSearchSubmit } = this.props;\n\n        this.setState({ isInSearchMode: true });\n        onSearchSubmit(searchQuery);\n    };\n\n    handleExitSearch = folderBeforeSearch => {\n        const { onExitSearch } = this.props;\n\n        this.setState({ isInSearchMode: false });\n        onExitSearch(folderBeforeSearch);\n    };\n\n    handleItemClick = ({ event, index }) => {\n        const { contentExplorerMode, items, onSelectItem, onSelectedItemsUpdate } = this.props;\n        const item = items[index];\n\n        if (item.isDisabled || item.isLoading || item.isActionDisabled) {\n            return;\n        }\n\n        // Prevent the event from bubbling up (so our content explorer click handler doesn't fire)\n        event.stopPropagation();\n\n        let newSelectedItems = {};\n        if (contentExplorerMode === ContentExplorerModes.MULTI_SELECT) {\n            newSelectedItems = this.toggleSelectedItem(this.getAllSelectedItems(), item);\n        } else {\n            newSelectedItems[item.id] = item;\n        }\n\n        this.setState({ selectedItems: newSelectedItems });\n        if (onSelectedItemsUpdate) {\n            onSelectedItemsUpdate(newSelectedItems);\n        }\n\n        if (onSelectItem) {\n            onSelectItem(item, index);\n        }\n    };\n\n    handleItemDoubleClick = ({ index }) => {\n        const { items, onChooseItems } = this.props;\n        const item = items[index];\n\n        if (item.isDisabled || item.isLoading) {\n            return;\n        }\n\n        if (item.type === TYPE_FOLDER) {\n            this.enterFolder(item);\n        } else if (!item.isActionDisabled) {\n            onChooseItems([item]);\n        }\n    };\n\n    handleItemNameClick = (event, index) => {\n        const { items } = this.props;\n        const item = items[index];\n\n        if (item.isDisabled || item.isLoading) {\n            return;\n        }\n\n        if (item.type !== TYPE_FOLDER) {\n            return;\n        }\n\n        // Prevent the event from bubbling (so our row click handler doesn't fire)\n        event.preventDefault();\n        event.stopPropagation();\n\n        this.enterFolder(item);\n    };\n\n    toggleSelectedItem = (selectedItems, item) => {\n        const result = { ...selectedItems };\n        if (result[item.id]) {\n            delete result[item.id];\n        } else {\n            result[item.id] = item;\n        }\n\n        return result;\n    };\n\n    selectAll = () => {\n        const { items } = this.props;\n        const { selectedItems } = this.state;\n        const result = { ...selectedItems };\n        items.forEach(item => {\n            if (!result[item.id]) {\n                result[item.id] = item;\n            }\n        });\n        return result;\n    };\n\n    unselectAll = () => {\n        const { items } = this.props;\n        const { selectedItems } = this.state;\n        const result = { ...selectedItems };\n        items.forEach(item => {\n            if (result[item.id]) {\n                delete result[item.id];\n            }\n        });\n        return result;\n    };\n\n    handleSelectAllClick = async () => {\n        const { onSelectedItemsUpdate } = this.props;\n        if (this.isLoadingItems()) {\n            return;\n        }\n        const { isSelectAllChecked } = this.state;\n        const newSelectedItems = isSelectAllChecked ? this.unselectAll() : this.selectAll();\n\n        this.setState({ selectedItems: newSelectedItems, isSelectAllChecked: !isSelectAllChecked });\n        if (onSelectedItemsUpdate) {\n            onSelectedItemsUpdate(newSelectedItems);\n        }\n    };\n\n    renderItemListEmptyState = () => {\n        const { foldersPath, isInSearchMode } = this.state;\n        const isViewingSearchResults = isInSearchMode && foldersPath.length === 1;\n\n        return <ContentExplorerEmptyState isSearch={isViewingSearchResults} />;\n    };\n\n    render() {\n        const {\n            actionButtonsProps,\n            additionalColumns,\n            controlledSelectedItems,\n            isNoSelectionAllowed = false,\n            breadcrumbIcon,\n            breadcrumbProps,\n            cancelButtonProps,\n            chooseButtonProps,\n            chooseButtonText,\n            className,\n            contentExplorerMode,\n            customInput,\n            hasFolderTreeBreadcrumbs,\n            headerActionsAccessory,\n            onChooseItems,\n            onMoveItem,\n            onCopyItem,\n            onCancelButtonClick,\n            onCreateNewFolderButtonClick,\n            onSelectedClick,\n            onViewSelectedClick,\n            showCreateNewFolderButton,\n            isChooseButtonLoading,\n            isCopyButtonLoading,\n            isCreateNewFolderAllowed,\n            isMoveButtonLoading,\n            isResponsive = false,\n            isSelectAllAllowed,\n            items,\n            numItemsPerPage,\n            numTotalItems,\n            onLoadMoreItems,\n            includeSubfoldersProps,\n            itemIconRenderer,\n            itemNameLinkRenderer,\n            itemButtonRenderer,\n            itemRowHeight,\n            itemRowRenderer,\n            listHeaderHeight,\n            listHeaderRenderer,\n            listWidth,\n            listHeight,\n            searchInputProps,\n            infoNoticeText,\n            noItemsRenderer,\n            ...rest\n        } = this.props;\n        const { isInSearchMode, foldersPath, isSelectAllChecked } = this.state;\n        const allSelectedItems = this.getAllSelectedItems();\n\n        const isViewingSearchResults = isInSearchMode && foldersPath.length === 1;\n        const currentFolder = this.getCurrentFolder();\n        const contentExplorerProps = omit(rest, [\n            'initialFoldersPath',\n            'onEnterFolder',\n            'onSelectItem',\n            'onSearchSubmit',\n            'onExitSearch',\n            'initialSelectedItems',\n            'onFoldersPathUpdate',\n            'onSelectedItemsUpdate',\n        ]);\n        const canIncludeSubfolders = !!includeSubfoldersProps;\n        const hasSubheader = canIncludeSubfolders || isSelectAllAllowed;\n\n        const selectedItemsIds = Object.keys(allSelectedItems);\n        let areActionButtonsDisabled;\n        // NOTE: it almost feels like this whole section should be inside the\n        // ContentExplorerActionButtons instead. There's a lot of implicit knowledge\n        // of what the action buttons are and what they should be doing.\n        const isFirstSelectedItemDisabled = allSelectedItems[selectedItemsIds[0]]?.isActionDisabled;\n        if (contentExplorerMode === ContentExplorerModes.MULTI_SELECT) {\n            // NOTE: only expecting to have 1 (choose) button so as long as something\n            // is selected and that item's isActionDisabled is false, we enable the action button\n            areActionButtonsDisabled =\n                (selectedItemsIds.length === 0 && !isNoSelectionAllowed) ||\n                (selectedItemsIds.length === 1 && isFirstSelectedItemDisabled);\n        } else if (isViewingSearchResults || contentExplorerMode === ContentExplorerModes.SELECT_FILE) {\n            // Buttons are only enabled when an item is selected\n            // When viewing search results, there is no \"current folder\"\n            // When selecting a file, the file can only selected from the list\n            areActionButtonsDisabled = selectedItemsIds.length === 0 || isFirstSelectedItemDisabled;\n        } else {\n            // Buttons are enabled using the selected item or the current folder if no item is selected\n            areActionButtonsDisabled =\n                selectedItemsIds.length > 0 ? isFirstSelectedItemDisabled : currentFolder.isActionDisabled;\n        }\n\n        return (\n            // eslint-disable-next-line jsx-a11y/no-static-element-interactions, jsx-a11y/click-events-have-key-events\n            <div\n                className={classNames('content-explorer', className, {\n                    'bdl-ContentExplorer--responsive': isResponsive,\n                })}\n                data-testid=\"content-explorer\"\n                onClick={this.handleContentExplorerClick}\n                ref={ref => {\n                    this.domNode = ref;\n                }}\n                {...contentExplorerProps}\n            >\n                {infoNoticeText && <ContentExplorerInfoNotice infoNoticeText={infoNoticeText} />}\n                <ContentExplorerHeaderActions\n                    breadcrumbIcon={breadcrumbIcon}\n                    breadcrumbProps={breadcrumbProps}\n                    contentExplorerMode={contentExplorerMode}\n                    customInput={customInput}\n                    foldersPath={foldersPath}\n                    hasFolderTreeBreadcrumbs={hasFolderTreeBreadcrumbs}\n                    isCreateNewFolderAllowed={isCreateNewFolderAllowed}\n                    onCreateNewFolderButtonClick={onCreateNewFolderButtonClick}\n                    onFoldersPathUpdated={this.handleFoldersPathUpdated}\n                    onEnterFolder={this.enterFolder}\n                    onExitSearch={this.handleExitSearch}\n                    onSearchSubmit={this.handleSearchSubmit}\n                    numTotalItems={numTotalItems}\n                    searchInputProps={searchInputProps}\n                    showCreateNewFolderButton={showCreateNewFolderButton}\n                >\n                    {headerActionsAccessory}\n                </ContentExplorerHeaderActions>\n                {hasSubheader && (\n                    <div className=\"bdl-ContentExplorer-subheader\">\n                        {canIncludeSubfolders && <ContentExplorerIncludeSubfolders {...includeSubfoldersProps} />}\n                        {isSelectAllAllowed && (\n                            <ContentExplorerSelectAll\n                                handleSelectAllClick={this.handleSelectAllClick}\n                                isLabelHidden={canIncludeSubfolders}\n                                isSelectAllChecked={isSelectAllChecked}\n                                numTotalItems={numTotalItems}\n                            />\n                        )}\n                    </div>\n                )}\n                <ItemList\n                    additionalColumns={additionalColumns}\n                    contentExplorerMode={contentExplorerMode}\n                    headerHeight={listHeaderHeight}\n                    headerRenderer={listHeaderRenderer}\n                    height={listHeight}\n                    isResponsive={isResponsive}\n                    itemButtonRenderer={itemButtonRenderer}\n                    itemIconRenderer={itemIconRenderer}\n                    itemNameLinkRenderer={itemNameLinkRenderer}\n                    items={items}\n                    itemRowRenderer={itemRowRenderer}\n                    noItemsRenderer={noItemsRenderer || this.renderItemListEmptyState}\n                    numItemsPerPage={numItemsPerPage}\n                    numTotalItems={numTotalItems}\n                    onItemClick={this.handleItemClick}\n                    onItemDoubleClick={this.handleItemDoubleClick}\n                    onItemNameClick={this.handleItemNameClick}\n                    onLoadMoreItems={onLoadMoreItems}\n                    rowHeight={itemRowHeight}\n                    selectedItems={allSelectedItems}\n                    width={listWidth}\n                />\n                <ContentExplorerActionButtons\n                    actionButtonsProps={actionButtonsProps}\n                    areButtonsDisabled={areActionButtonsDisabled}\n                    cancelButtonProps={cancelButtonProps}\n                    canIncludeSubfolders={canIncludeSubfolders}\n                    chooseButtonProps={chooseButtonProps}\n                    chooseButtonText={chooseButtonText}\n                    contentExplorerMode={contentExplorerMode}\n                    currentFolder={currentFolder}\n                    isChooseButtonLoading={isChooseButtonLoading}\n                    isCopyButtonLoading={isCopyButtonLoading}\n                    isMoveButtonLoading={isMoveButtonLoading}\n                    isResponsive={isResponsive}\n                    isSelectAllAllowed={isSelectAllAllowed}\n                    onCancelClick={onCancelButtonClick}\n                    onChooseClick={onChooseItems}\n                    onCopyClick={onCopyItem}\n                    onFoldersPathUpdated={this.handleFoldersPathUpdated}\n                    onSelectedClick={onSelectedClick}\n                    onMoveClick={onMoveItem}\n                    onViewSelectedClick={onViewSelectedClick}\n                    selectedItems={allSelectedItems}\n                    isNoSelectionAllowed={isNoSelectionAllowed}\n                />\n            </div>\n        );\n    }\n}\n\nexport default ContentExplorer;\n"],"mappings":"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","ignoreList":[]}