{"version":3,"file":"ContentExplorerModalContainer.js","names":["PropTypes","React","Component","classNames","BreadcrumbPropType","ContentExplorerModePropType","FoldersPathPropType","ItemsPropType","ContentExplorerModal","NewFolderModal","ContentExplorerModalContainer","constructor","props","_defineProperty","enteredFolder","newFoldersPath","onEnterFolder","setState","foldersPath","onNewFolderModalShown","isNewFolderModalOpen","onNewFolderModalClosed","state","initialFoldersPath","componentDidUpdate","prevInitialFoldersPath","render","_this$props","className","modalTitle","modalDescription","onCreateFolderSubmit","onCreateFolderInput","isCreatingFolder","createFolderError","shouldNotUsePortal","infoNoticeText","rest","_objectWithoutProperties","_excluded","currentFolder","length","createElement","_extends","title","description","isOpen","handleEnterFolder","onCreateNewFolderButtonClick","handleCreateNewFolderButtonClick","parentFolderName","name","onRequestClose","handleNewFolderModalClose","additionalColumns","arrayOf","element","isNoSelectionAllowed","bool","breadcrumbIcon","breadcrumbProps","string","hasFolderTreeBreadcrumbs","headerActionsAccessory","node","func","isRequired","onSelectedClick","onSelectItem","onViewSelectedClick","isSelectAllAllowed","contentExplorerMode","includeSubfoldersProps","object","initialSelectedItems","controlledSelectedItems","onFoldersPathUpdate","onSelectedItemsUpdate","onChooseItems","onMoveItem","onCopyItem","isCreateNewFolderAllowed","onSearchSubmit","onExitSearch","items","numItemsPerPage","number","numTotalItems","onLoadMoreItems","itemIconRenderer","itemNameLinkRenderer","itemButtonRenderer","itemRowHeight","itemRowRenderer","listHeaderHeight","listHeaderRenderer","showCreateNewFolderButton","searchInputProps","chooseButtonText","noItemsRenderer"],"sources":["../../../../src/features/content-explorer/content-explorer-modal-container/ContentExplorerModalContainer.js"],"sourcesContent":["import PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport classNames from 'classnames';\n\nimport { BreadcrumbPropType, ContentExplorerModePropType, FoldersPathPropType, ItemsPropType } from '../prop-types';\nimport ContentExplorerModal from '../content-explorer-modal';\nimport NewFolderModal from '../new-folder-modal';\n\nclass ContentExplorerModalContainer extends Component {\n    static propTypes = {\n        /**\n         * Extra columns displayed in the folders table after folder name column\n         * Each column has to be a Column element\n         */\n        additionalColumns: PropTypes.arrayOf(PropTypes.element),\n        /**  Allow users to choose no selections in MULTI_SELECT mode, defaults to false */\n        isNoSelectionAllowed: PropTypes.bool,\n        /** Custom icon for the breadcrumb. Overrides the default icon */\n        breadcrumbIcon: PropTypes.element,\n        /** Breadcrumb component options */\n        breadcrumbProps: BreadcrumbPropType,\n        /** Adds class name. */\n        className: PropTypes.string,\n        /** Whether the user can see the breadcrumbs represented with the folder tree button */\n        hasFolderTreeBreadcrumbs: PropTypes.bool,\n        /** Any extra items in the header to the right of the search input (and new folder button) */\n        headerActionsAccessory: PropTypes.node,\n        /** Title shown in the ContentExplorerModal. */\n        modalTitle: PropTypes.string,\n        /** Description text shown in the ContentExplorerModal. */\n        modalDescription: PropTypes.string,\n        /** Called when the ContentExplorerModal is closed. */\n        onRequestClose: PropTypes.func.isRequired,\n        /**\n         * Called when the folder creation is submitted.\n         *\n         * @param {string} folderName\n         */\n        onCreateFolderSubmit: PropTypes.func,\n        /**\n         * Called with the latest folder name input.\n         *\n         * @param {string} folderName\n         */\n        onCreateFolderInput: PropTypes.func,\n        /** Called when the NewFolderModal is shown. */\n        onNewFolderModalShown: PropTypes.func,\n        /** Called when the NewFolderModal is closed. */\n        onNewFolderModalClosed: PropTypes.func,\n        /** Called when selected button is clicked */\n        onSelectedClick: PropTypes.func,\n        /**\n         * Called when an item is selected\n         *\n         * @param {Object} selectedItem\n         * @param {number} selectedItemIndex\n         */\n        onSelectItem: PropTypes.func,\n        /** Called when the number of items selected text is clicked */\n        onViewSelectedClick: PropTypes.func,\n        /** Folder is in the process of being created. */\n        isCreatingFolder: PropTypes.bool,\n        /** Whether the user can see select all checkbox */\n        isSelectAllAllowed: PropTypes.bool,\n        /** Message that will be shown when there was an error creating the folder. */\n        createFolderError: PropTypes.string,\n        /** Configures the content explorer based on the user's intended action (ex. select file or move/copy) */\n        contentExplorerMode: ContentExplorerModePropType.isRequired,\n        /** Props for the include subfolders toggle */\n        includeSubfoldersProps: PropTypes.object,\n        /** Initial path of folders. The last folder in the array is the current folder. */\n        initialFoldersPath: FoldersPathPropType.isRequired,\n        /** Initial items that will show up as selected */\n        initialSelectedItems: PropTypes.object,\n        /** Items that will show up as selected */\n        controlledSelectedItems: PropTypes.object,\n        /**\n         * Called when the current folder changes\n         *\n         * @param {Object} enteredFolder\n         * @param {Array} newFoldersPath\n         */\n        onEnterFolder: PropTypes.func.isRequired,\n        /** Called when the folders path is updated\n         *\n         * @param {Array} newFoldersPath\n         */\n        onFoldersPathUpdate: PropTypes.func,\n        /** Called whenever the selected items list changes\n         *\n         * @param {Object} selectedItems\n         */\n        onSelectedItemsUpdate: PropTypes.func,\n        /**\n         * Called when items are chosen.\n         *\n         * @param {Object[]} chosenItems In non-multi select mode, the chosenItems will be a 1 element array contain the one chosen item\n         */\n        onChooseItems: PropTypes.func,\n        /**\n         * Called when a destination folder has been selected for moving an item to\n         *\n         * @param {Object} destFolder destination folder\n         */\n        onMoveItem: PropTypes.func,\n        /**\n         * Called when a destination folder has been selected for copying an item to\n         *\n         * @param {Object} destFolder destination folder\n         */\n        onCopyItem: PropTypes.func,\n        /** Whether the user has permission to create a new folder */\n        isCreateNewFolderAllowed: PropTypes.bool,\n        /**\n         * Called when a search query is submitted.\n         *\n         * @param {string} searchQuery\n         */\n        onSearchSubmit: PropTypes.func.isRequired,\n        /**\n         * Called when search mode is exited. An updated items list should now be passed in to display the user's file tree.\n         *\n         * @param {Object} folderBeforeSearch the previous folder object before entering search mode\n         */\n        onExitSearch: PropTypes.func.isRequired,\n        /** List of items to display */\n        items: ItemsPropType.isRequired,\n        /** Number of items to load per page as the user scrolls */\n        numItemsPerPage: PropTypes.number,\n        /** Total number of items across all pages */\n        numTotalItems: PropTypes.number,\n        /** Called to load more items */\n        onLoadMoreItems: PropTypes.func,\n        /** Used to render item icons in the list. Overrides the default icons. */\n        itemIconRenderer: PropTypes.func,\n        /** Used to render item name links in the list. Overrides the default links. */\n        itemNameLinkRenderer: PropTypes.func,\n        /** Used to render item buttons in the list. Overrides the default buttons. */\n        itemButtonRenderer: PropTypes.func,\n        /** Height of an item row */\n        itemRowHeight: PropTypes.number,\n        /** Used to render the row element for items on the list */\n        itemRowRenderer: PropTypes.func,\n        /** Height of the item list header, defaults to 0, which makes header not visible */\n        listHeaderHeight: PropTypes.number,\n        /** Used to render the header row on the item list */\n        listHeaderRenderer: PropTypes.func,\n        /** Whether the new folder button should be shown */\n        showCreateNewFolderButton: PropTypes.bool,\n        /** Whether the modals should be nested in a Portal or in a div */\n        shouldNotUsePortal: PropTypes.bool,\n        /** Props for the search input */\n        searchInputProps: PropTypes.object,\n        /** Custom text for the choose button */\n        chooseButtonText: PropTypes.node,\n        /** Text for the informational notice, defaults to empty string, which makes notice not visible */\n        infoNoticeText: PropTypes.string,\n        /** Used to render the no items state. Overrides the default no items state. */\n        noItemsRenderer: PropTypes.func,\n    };\n\n    static defaultProps = {\n        onCreateFolderSubmit: () => {},\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            foldersPath: props.initialFoldersPath,\n            isNewFolderModalOpen: false,\n        };\n    }\n\n    componentDidUpdate({ initialFoldersPath: prevInitialFoldersPath }) {\n        const { initialFoldersPath } = this.props;\n\n        if (prevInitialFoldersPath !== initialFoldersPath) {\n            // Close the new folder modal when the folders path has changed\n            this.setState({\n                foldersPath: initialFoldersPath,\n                isNewFolderModalOpen: false,\n            });\n        }\n    }\n\n    handleEnterFolder = (enteredFolder, newFoldersPath) => {\n        const { onEnterFolder } = this.props;\n\n        this.setState({ foldersPath: newFoldersPath });\n        onEnterFolder(enteredFolder, newFoldersPath);\n    };\n\n    handleCreateNewFolderButtonClick = () => {\n        const { onNewFolderModalShown } = this.props;\n\n        this.setState({ isNewFolderModalOpen: true }, () => onNewFolderModalShown && onNewFolderModalShown());\n    };\n\n    handleNewFolderModalClose = () => {\n        const { onNewFolderModalClosed } = this.props;\n\n        this.setState({ isNewFolderModalOpen: false }, () => onNewFolderModalClosed && onNewFolderModalClosed());\n    };\n\n    render() {\n        const {\n            className,\n            modalTitle,\n            modalDescription,\n            onCreateFolderSubmit,\n            onCreateFolderInput,\n            isCreatingFolder,\n            createFolderError,\n            initialFoldersPath,\n            shouldNotUsePortal,\n            infoNoticeText,\n            ...rest\n        } = this.props;\n        const { foldersPath, isNewFolderModalOpen } = this.state;\n        const currentFolder = foldersPath[foldersPath.length - 1];\n\n        return (\n            <div className={classNames('content-explorer-modal-container', className)}>\n                <ContentExplorerModal\n                    className={isNewFolderModalOpen ? 'hidden' : ''}\n                    title={modalTitle}\n                    description={modalDescription}\n                    initialFoldersPath={initialFoldersPath}\n                    isOpen\n                    onEnterFolder={this.handleEnterFolder}\n                    onCreateNewFolderButtonClick={this.handleCreateNewFolderButtonClick}\n                    shouldNotUsePortal={shouldNotUsePortal}\n                    infoNoticeText={infoNoticeText}\n                    {...rest}\n                />\n                {isNewFolderModalOpen && (\n                    <NewFolderModal\n                        isOpen\n                        parentFolderName={currentFolder.name}\n                        onRequestClose={this.handleNewFolderModalClose}\n                        onCreateFolderSubmit={onCreateFolderSubmit}\n                        onCreateFolderInput={onCreateFolderInput}\n                        isCreatingFolder={isCreatingFolder}\n                        createFolderError={createFolderError}\n                        shouldNotUsePortal={shouldNotUsePortal}\n                    />\n                )}\n            </div>\n        );\n    }\n}\n\nexport default ContentExplorerModalContainer;\n"],"mappings":"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","ignoreList":[]}