{"version":3,"file":"ReadOnlyMetadataField.js","names":["React","FormattedMessage","FormattedDate","convertISOStringToUTCDate","FIELD_TYPE_DATE","messages","ReadOnlyMetadataField","dataValue","description","displayName","type","value","createElement","_extends","tagName","metadataFieldNoValue","day","month","year","Array","isArray","join","className"],"sources":["../../../src/features/metadata-instance-fields/ReadOnlyMetadataField.js"],"sourcesContent":["// @flow\nimport * as React from 'react';\nimport { FormattedMessage, FormattedDate } from 'react-intl';\n\nimport { convertISOStringToUTCDate } from '../../utils/datetime';\n\nimport { FIELD_TYPE_DATE } from './constants';\nimport messages from './messages';\nimport type { MetadataFieldValue, MetadataFieldType } from '../../common/types/metadata';\nimport './ReadOnlyMetadataField.scss';\n\ntype Props = {\n    dataValue?: MetadataFieldValue,\n    description?: string,\n    displayName: string,\n    type: MetadataFieldType,\n};\n\nconst ReadOnlyMetadataField = ({ dataValue, description, displayName, type }: Props) => {\n    let value = <FormattedMessage tagName=\"i\" {...messages.metadataFieldNoValue} />;\n\n    if (dataValue || typeof dataValue === 'number') {\n        if (typeof dataValue === 'string' && type === FIELD_TYPE_DATE) {\n            value = (\n                <FormattedDate day=\"numeric\" month=\"long\" value={convertISOStringToUTCDate(dataValue)} year=\"numeric\" />\n            );\n        } else if (Array.isArray(dataValue)) {\n            value = dataValue.join(', ');\n        } else {\n            value = dataValue;\n        }\n    }\n\n    return (\n        <dl className=\"bdl-ReadOnlyMetadataField\">\n            <dt>{displayName}</dt>\n            {!!description && <i className=\"bdl-ReadOnlyMetadataField-desc\">{description}</i>}\n            <dd>{value}</dd>\n        </dl>\n    );\n};\n\nexport default ReadOnlyMetadataField;\n"],"mappings":";AACA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,gBAAgB,EAAEC,aAAa,QAAQ,YAAY;AAE5D,SAASC,yBAAyB,QAAQ,sBAAsB;AAEhE,SAASC,eAAe,QAAQ,aAAa;AAC7C,OAAOC,QAAQ,MAAM,YAAY;AAEjC,OAAO,8BAA8B;AASrC,MAAMC,qBAAqB,GAAGA,CAAC;EAAEC,SAAS;EAAEC,WAAW;EAAEC,WAAW;EAAEC;AAAY,CAAC,KAAK;EACpF,IAAIC,KAAK,gBAAGX,KAAA,CAAAY,aAAA,CAACX,gBAAgB,EAAAY,QAAA;IAACC,OAAO,EAAC;EAAG,GAAKT,QAAQ,CAACU,oBAAoB,CAAG,CAAC;EAE/E,IAAIR,SAAS,IAAI,OAAOA,SAAS,KAAK,QAAQ,EAAE;IAC5C,IAAI,OAAOA,SAAS,KAAK,QAAQ,IAAIG,IAAI,KAAKN,eAAe,EAAE;MAC3DO,KAAK,gBACDX,KAAA,CAAAY,aAAA,CAACV,aAAa;QAACc,GAAG,EAAC,SAAS;QAACC,KAAK,EAAC,MAAM;QAACN,KAAK,EAAER,yBAAyB,CAACI,SAAS,CAAE;QAACW,IAAI,EAAC;MAAS,CAAE,CAC1G;IACL,CAAC,MAAM,IAAIC,KAAK,CAACC,OAAO,CAACb,SAAS,CAAC,EAAE;MACjCI,KAAK,GAAGJ,SAAS,CAACc,IAAI,CAAC,IAAI,CAAC;IAChC,CAAC,MAAM;MACHV,KAAK,GAAGJ,SAAS;IACrB;EACJ;EAEA,oBACIP,KAAA,CAAAY,aAAA;IAAIU,SAAS,EAAC;EAA2B,gBACrCtB,KAAA,CAAAY,aAAA,aAAKH,WAAgB,CAAC,EACrB,CAAC,CAACD,WAAW,iBAAIR,KAAA,CAAAY,aAAA;IAAGU,SAAS,EAAC;EAAgC,GAAEd,WAAe,CAAC,eACjFR,KAAA,CAAAY,aAAA,aAAKD,KAAU,CACf,CAAC;AAEb,CAAC;AAED,eAAeL,qBAAqB","ignoreList":[]}