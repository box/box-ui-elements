{"version":3,"file":"TextMetadataField.js","names":["React","useIntl","TextInput","messages","TextMetadataField","dataKey","dataValue","displayName","description","error","isDisabled","onChange","onRemove","type","formatMessage","value","createElement","className","hideOptionalLabel","disabled","label","name","event","currentTarget","placeholder","metadataFieldSetValue"],"sources":["../../../src/features/metadata-instance-fields/TextMetadataField.js"],"sourcesContent":["// @flow\nimport * as React from 'react';\nimport { useIntl } from 'react-intl';\n\nimport TextInput from '../../components/text-input';\n\nimport messages from './messages';\nimport type { MetadataFieldValue } from '../../common/types/metadata';\nimport './TextMetadataField.scss';\n\ntype Props = {\n    dataKey: string,\n    dataValue?: MetadataFieldValue,\n    description?: string,\n    displayName: string,\n    error?: React.Node,\n    isDisabled?: boolean,\n    onChange: (key: string, value: MetadataFieldValue) => void,\n    onRemove: (key: string) => void,\n    type?: string,\n};\n\nconst TextMetadataField = ({\n    dataKey,\n    dataValue,\n    displayName,\n    description,\n    error,\n    isDisabled,\n    onChange,\n    onRemove,\n    type = 'text',\n}: Props) => {\n    const { formatMessage } = useIntl();\n\n    let value = '';\n\n    if (typeof dataValue === 'number') {\n        value = dataValue;\n    } else if (dataValue) {\n        value = dataValue;\n    }\n\n    return (\n        <TextInput\n            className=\"bdl-TextMetadataField\"\n            description={description}\n            error={error}\n            hideOptionalLabel\n            disabled={isDisabled}\n            label={displayName}\n            name={dataKey}\n            onChange={(event: SyntheticKeyboardEvent<HTMLInputElement>) => {\n                const currentTarget = (event.currentTarget: HTMLInputElement);\n                if (currentTarget.value) {\n                    onChange(dataKey, currentTarget.value);\n                } else {\n                    onRemove(dataKey);\n                }\n            }}\n            placeholder={formatMessage(messages.metadataFieldSetValue)}\n            type={type}\n            value={value}\n        />\n    );\n};\n\nexport default TextMetadataField;\n"],"mappings":"AACA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,OAAO,QAAQ,YAAY;AAEpC,OAAOC,SAAS,MAAM,6BAA6B;AAEnD,OAAOC,QAAQ,MAAM,YAAY;AAEjC,OAAO,0BAA0B;AAcjC,MAAMC,iBAAiB,GAAGA,CAAC;EACvBC,OAAO;EACPC,SAAS;EACTC,WAAW;EACXC,WAAW;EACXC,KAAK;EACLC,UAAU;EACVC,QAAQ;EACRC,QAAQ;EACRC,IAAI,GAAG;AACJ,CAAC,KAAK;EACT,MAAM;IAAEC;EAAc,CAAC,GAAGb,OAAO,CAAC,CAAC;EAEnC,IAAIc,KAAK,GAAG,EAAE;EAEd,IAAI,OAAOT,SAAS,KAAK,QAAQ,EAAE;IAC/BS,KAAK,GAAGT,SAAS;EACrB,CAAC,MAAM,IAAIA,SAAS,EAAE;IAClBS,KAAK,GAAGT,SAAS;EACrB;EAEA,oBACIN,KAAA,CAAAgB,aAAA,CAACd,SAAS;IACNe,SAAS,EAAC,uBAAuB;IACjCT,WAAW,EAAEA,WAAY;IACzBC,KAAK,EAAEA,KAAM;IACbS,iBAAiB;IACjBC,QAAQ,EAAET,UAAW;IACrBU,KAAK,EAAEb,WAAY;IACnBc,IAAI,EAAEhB,OAAQ;IACdM,QAAQ,EAAGW,KAA+C,IAAK;MAC3D,MAAMC,aAAa,GAAID,KAAK,CAACC,aAAgC;MAC7D,IAAIA,aAAa,CAACR,KAAK,EAAE;QACrBJ,QAAQ,CAACN,OAAO,EAAEkB,aAAa,CAACR,KAAK,CAAC;MAC1C,CAAC,MAAM;QACHH,QAAQ,CAACP,OAAO,CAAC;MACrB;IACJ,CAAE;IACFmB,WAAW,EAAEV,aAAa,CAACX,QAAQ,CAACsB,qBAAqB,CAAE;IAC3DZ,IAAI,EAAEA,IAAK;IACXE,KAAK,EAAEA;EAAM,CAChB,CAAC;AAEV,CAAC;AAED,eAAeX,iBAAiB","ignoreList":[]}