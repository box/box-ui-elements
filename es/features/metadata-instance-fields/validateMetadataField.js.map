{"version":3,"file":"validateMetadataField.js","names":["FIELD_TYPE_FLOAT","FIELD_TYPE_INTEGER","floatRegex","integerRegex","floatValidator","value","match","integerValidator","isValidValue","type"],"sources":["../../../src/features/metadata-instance-fields/validateMetadataField.js"],"sourcesContent":["// @flow\nimport { FIELD_TYPE_FLOAT, FIELD_TYPE_INTEGER } from './constants';\nimport type { MetadataFieldValue } from '../../common/types/metadata';\n\nconst floatRegex = /^[-+]?[0-9]*\\.?[0-9]*$/;\nconst integerRegex = /^[-+]?[0-9]+$/;\n\nconst floatValidator = (value: string) => !!value.match(floatRegex);\nconst integerValidator = (value: string) => !!value.match(integerRegex);\n\nconst isValidValue = (type: string, value: MetadataFieldValue) => {\n    if (type === FIELD_TYPE_FLOAT && typeof value === 'string') {\n        return floatValidator(value);\n    }\n\n    if (type === FIELD_TYPE_INTEGER && typeof value === 'string') {\n        return integerValidator(value);\n    }\n\n    return true;\n};\n\n// eslint-disable-next-line import/prefer-default-export\nexport { isValidValue };\n"],"mappings":"AACA,SAASA,gBAAgB,EAAEC,kBAAkB,QAAQ,aAAa;AAGlE,MAAMC,UAAU,GAAG,wBAAwB;AAC3C,MAAMC,YAAY,GAAG,eAAe;AAEpC,MAAMC,cAAc,GAAIC,KAAa,IAAK,CAAC,CAACA,KAAK,CAACC,KAAK,CAACJ,UAAU,CAAC;AACnE,MAAMK,gBAAgB,GAAIF,KAAa,IAAK,CAAC,CAACA,KAAK,CAACC,KAAK,CAACH,YAAY,CAAC;AAEvE,MAAMK,YAAY,GAAGA,CAACC,IAAY,EAAEJ,KAAyB,KAAK;EAC9D,IAAII,IAAI,KAAKT,gBAAgB,IAAI,OAAOK,KAAK,KAAK,QAAQ,EAAE;IACxD,OAAOD,cAAc,CAACC,KAAK,CAAC;EAChC;EAEA,IAAII,IAAI,KAAKR,kBAAkB,IAAI,OAAOI,KAAK,KAAK,QAAQ,EAAE;IAC1D,OAAOE,gBAAgB,CAACF,KAAK,CAAC;EAClC;EAEA,OAAO,IAAI;AACf,CAAC;;AAED;AACA,SAASG,YAAY","ignoreList":[]}