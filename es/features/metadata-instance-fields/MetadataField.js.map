{"version":3,"file":"MetadataField.js","names":["React","FormattedMessage","InlineError","TextMetadataField","EnumMetadataField","DateMetadataField","FloatMetadataField","IntegerMetadataField","MultiSelectMetadataField","ReadOnlyMetadataField","messages","FIELD_TYPE_ENUM","FIELD_TYPE_FLOAT","FIELD_TYPE_INTEGER","FIELD_TYPE_STRING","FIELD_TYPE_DATE","FIELD_TYPE_MULTISELECT","FIELD_TYPE_TAXONOMY","MetadataField","blurExceptionClassNames","dataKey","dataValue","displayName","description","error","isDisabled","isHidden","canEdit","onChange","onRemove","options","type","createElement","Error","title","invalidMetadataFieldType"],"sources":["../../../src/features/metadata-instance-fields/MetadataField.js"],"sourcesContent":["// @flow\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\n\nimport InlineError from '../../components/inline-error/InlineError';\n\nimport TextMetadataField from './TextMetadataField';\nimport EnumMetadataField from './EnumMetadataField';\nimport DateMetadataField from './DateMetadataField';\nimport FloatMetadataField from './FloatMetadataField';\nimport IntegerMetadataField from './IntegerMetadataField';\nimport MultiSelectMetadataField from './MultiSelectMetadataField';\nimport ReadOnlyMetadataField from './ReadOnlyMetadataField';\nimport messages from './messages';\nimport type { MetadataFieldValue, MetadataTemplateFieldOption, MetadataFieldType } from '../../common/types/metadata';\n\nimport {\n    FIELD_TYPE_ENUM,\n    FIELD_TYPE_FLOAT,\n    FIELD_TYPE_INTEGER,\n    FIELD_TYPE_STRING,\n    FIELD_TYPE_DATE,\n    FIELD_TYPE_MULTISELECT,\n    FIELD_TYPE_TAXONOMY,\n} from './constants';\n\ntype Props = {\n    blurExceptionClassNames?: Array<string>,\n    canEdit: boolean,\n    dataKey: string,\n    dataValue?: MetadataFieldValue,\n    description?: string,\n    displayName: string,\n    error?: React.Node,\n    isDisabled?: boolean,\n    isHidden?: boolean,\n    onChange?: (key: string, value: MetadataFieldValue) => void,\n    onRemove?: (key: string) => void,\n    options?: Array<MetadataTemplateFieldOption>,\n    type: MetadataFieldType,\n};\n\nconst MetadataField = ({\n    blurExceptionClassNames,\n    dataKey,\n    dataValue,\n    displayName,\n    description,\n    error,\n    isDisabled,\n    isHidden,\n    canEdit,\n    onChange,\n    onRemove,\n    options,\n    type,\n}: Props) => {\n    if (isHidden) {\n        return null;\n    }\n\n    if (!canEdit) {\n        return (\n            <ReadOnlyMetadataField\n                dataValue={dataValue}\n                description={description}\n                displayName={displayName}\n                type={type}\n            />\n        );\n    }\n\n    if (!onChange || !onRemove) {\n        throw new Error('Need to have onChange and onRemove');\n    }\n\n    switch (type) {\n        case FIELD_TYPE_STRING:\n            return (\n                <TextMetadataField\n                    dataKey={dataKey}\n                    dataValue={dataValue}\n                    description={description}\n                    displayName={displayName}\n                    isDisabled={isDisabled}\n                    onChange={onChange}\n                    onRemove={onRemove}\n                />\n            );\n\n        case FIELD_TYPE_FLOAT:\n            return (\n                <FloatMetadataField\n                    dataKey={dataKey}\n                    dataValue={dataValue}\n                    description={description}\n                    displayName={displayName}\n                    error={error}\n                    isDisabled={isDisabled}\n                    onChange={onChange}\n                    onRemove={onRemove}\n                    type={type}\n                />\n            );\n\n        case FIELD_TYPE_INTEGER:\n            return (\n                <IntegerMetadataField\n                    dataKey={dataKey}\n                    dataValue={dataValue}\n                    description={description}\n                    displayName={displayName}\n                    error={error}\n                    isDisabled={isDisabled}\n                    onChange={onChange}\n                    onRemove={onRemove}\n                    type={type}\n                />\n            );\n\n        case FIELD_TYPE_ENUM:\n            return (\n                <EnumMetadataField\n                    blurExceptionClassNames={blurExceptionClassNames}\n                    dataKey={dataKey}\n                    dataValue={dataValue}\n                    description={description}\n                    displayName={displayName}\n                    isDisabled={isDisabled}\n                    onChange={onChange}\n                    onRemove={onRemove}\n                    options={options}\n                />\n            );\n\n        case FIELD_TYPE_MULTISELECT:\n            return (\n                <MultiSelectMetadataField\n                    blurExceptionClassNames={blurExceptionClassNames}\n                    dataKey={dataKey}\n                    dataValue={dataValue}\n                    description={description}\n                    displayName={displayName}\n                    isDisabled={isDisabled}\n                    onChange={onChange}\n                    onRemove={onRemove}\n                    options={options}\n                />\n            );\n\n        case FIELD_TYPE_DATE:\n            return (\n                <DateMetadataField\n                    dataKey={dataKey}\n                    dataValue={dataValue}\n                    description={description}\n                    displayName={displayName}\n                    isDisabled={isDisabled}\n                    onChange={onChange}\n                    onRemove={onRemove}\n                />\n            );\n\n        // The taxonomy field is a valid field type which,\n        // although not yet supported here, should not trigger an error message.\n        // For this reason, we are currently setting it to read-only.\n        case FIELD_TYPE_TAXONOMY:\n            return (\n                <ReadOnlyMetadataField\n                    dataValue={dataValue}\n                    description={description}\n                    displayName={displayName}\n                    type={type}\n                />\n            );\n\n        default:\n            return (\n                <InlineError title={type}>\n                    <FormattedMessage {...messages.invalidMetadataFieldType} />\n                </InlineError>\n            );\n    }\n};\n\nexport default MetadataField;\n"],"mappings":"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","ignoreList":[]}