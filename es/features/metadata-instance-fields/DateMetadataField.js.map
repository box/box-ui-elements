{"version":3,"file":"DateMetadataField.js","names":["React","useIntl","DatePicker","convertISOStringToUTCDate","messages","DateMetadataField","dataKey","dataValue","displayName","description","isDisabled","onChange","onRemove","formatMessage","createElement","className","dateFormat","displayFormat","day","month","year","hideOptionalLabel","label","date","isoDate","placeholder","metadataFieldSetDate","value","undefined"],"sources":["../../../src/features/metadata-instance-fields/DateMetadataField.js"],"sourcesContent":["// @flow\nimport * as React from 'react';\nimport { useIntl } from 'react-intl';\n\nimport DatePicker from '../../components/date-picker';\nimport { convertISOStringToUTCDate } from '../../utils/datetime';\nimport messages from './messages';\nimport type { MetadataFieldValue } from '../../common/types/metadata';\nimport './DateMetadataField.scss';\n\ntype Props = {\n    dataKey: string,\n    dataValue?: MetadataFieldValue,\n    description?: string,\n    displayName: string,\n    isDisabled?: boolean,\n    onChange: (key: string, value: MetadataFieldValue) => void,\n    onRemove: (key: string) => void,\n};\n\nconst DateMetadataField = ({ dataKey, dataValue, displayName, description, isDisabled, onChange, onRemove }: Props) => {\n    const { formatMessage } = useIntl();\n\n    return (\n        <DatePicker\n            className=\"bdl-DateMetadataField\"\n            dateFormat=\"utcISOString\"\n            description={description}\n            displayFormat={{\n                day: 'numeric',\n                month: 'long',\n                year: 'numeric',\n            }}\n            hideOptionalLabel\n            isDisabled={isDisabled}\n            label={displayName}\n            onChange={(date: Date, isoDate: string) => {\n                if (isoDate) {\n                    onChange(dataKey, isoDate);\n                } else {\n                    onRemove(dataKey);\n                }\n            }}\n            placeholder={formatMessage(messages.metadataFieldSetDate)}\n            value={typeof dataValue === 'string' ? convertISOStringToUTCDate(dataValue) : undefined}\n        />\n    );\n};\n\nexport default DateMetadataField;\n"],"mappings":"AACA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,OAAO,QAAQ,YAAY;AAEpC,OAAOC,UAAU,MAAM,8BAA8B;AACrD,SAASC,yBAAyB,QAAQ,sBAAsB;AAChE,OAAOC,QAAQ,MAAM,YAAY;AAEjC,OAAO,0BAA0B;AAYjC,MAAMC,iBAAiB,GAAGA,CAAC;EAAEC,OAAO;EAAEC,SAAS;EAAEC,WAAW;EAAEC,WAAW;EAAEC,UAAU;EAAEC,QAAQ;EAAEC;AAAgB,CAAC,KAAK;EACnH,MAAM;IAAEC;EAAc,CAAC,GAAGZ,OAAO,CAAC,CAAC;EAEnC,oBACID,KAAA,CAAAc,aAAA,CAACZ,UAAU;IACPa,SAAS,EAAC,uBAAuB;IACjCC,UAAU,EAAC,cAAc;IACzBP,WAAW,EAAEA,WAAY;IACzBQ,aAAa,EAAE;MACXC,GAAG,EAAE,SAAS;MACdC,KAAK,EAAE,MAAM;MACbC,IAAI,EAAE;IACV,CAAE;IACFC,iBAAiB;IACjBX,UAAU,EAAEA,UAAW;IACvBY,KAAK,EAAEd,WAAY;IACnBG,QAAQ,EAAEA,CAACY,IAAU,EAAEC,OAAe,KAAK;MACvC,IAAIA,OAAO,EAAE;QACTb,QAAQ,CAACL,OAAO,EAAEkB,OAAO,CAAC;MAC9B,CAAC,MAAM;QACHZ,QAAQ,CAACN,OAAO,CAAC;MACrB;IACJ,CAAE;IACFmB,WAAW,EAAEZ,aAAa,CAACT,QAAQ,CAACsB,oBAAoB,CAAE;IAC1DC,KAAK,EAAE,OAAOpB,SAAS,KAAK,QAAQ,GAAGJ,yBAAyB,CAACI,SAAS,CAAC,GAAGqB;EAAU,CAC3F,CAAC;AAEV,CAAC;AAED,eAAevB,iBAAiB","ignoreList":[]}