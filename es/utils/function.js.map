{"version":3,"file":"function.js","names":["retryNumOfTimes","func","times","initialTimeout","backoffFactor","tries","timeout","Promise","resolve","hardReject","doTry","tryResolve","tryReject","then","catch","reason","executeAfterTimeout","time","setTimeout"],"sources":["../../src/utils/function.js"],"sourcesContent":["/**\n * @flow\n * @file Function utilities\n * @author Box\n */\n\n/**\n * Wrapper around the promises.create() method to allow a promise to retry\n * multiple times. A third parameter (besides resolve and reject) is passed\n * that allows the function to cancel retrying and immediately reject.\n *\n * @param {function} func - The function that performs the operation as a promise.\n * @param {number} times - Maximum number of times the operation should be attempted.\n * @param {number} [initialTimeout] - Optional timeout to retry the promise with after it fails, in milliseconds.\n * Otherwise, the input `func` is invoked after 1 event loop.\n * @param {number} [backoffFactor] - Optional exponential backoff factor to retry the promise with after it fails\n * @return {Promise} Promise - proxies the promise of the passed function.\n */\n\nfunction retryNumOfTimes(\n    func: Function,\n    times: number,\n    initialTimeout?: number = 0,\n    backoffFactor?: number = 1,\n): Promise<any> {\n    let tries = 0;\n    let timeout = initialTimeout;\n\n    return new Promise((resolve, hardReject) => {\n        function doTry() {\n            tries += 1;\n\n            new Promise((tryResolve, tryReject) => {\n                func(tryResolve, tryReject, hardReject);\n            })\n                .then(resolve)\n                .catch(reason => {\n                    if (tries < times) {\n                        timeout *= backoffFactor;\n                        // eslint-disable-next-line no-use-before-define\n                        executeAfterTimeout(timeout);\n                        return;\n                    }\n\n                    hardReject(reason);\n                });\n        }\n\n        function executeAfterTimeout(time) {\n            setTimeout(() => {\n                doTry();\n            }, time);\n        }\n\n        executeAfterTimeout(timeout);\n    });\n}\n\n// eslint-disable-next-line import/prefer-default-export\nexport { retryNumOfTimes };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,eAAeA,CACpBC,IAAc,EACdC,KAAa,EACbC,cAAuB,GAAG,CAAC,EAC3BC,aAAsB,GAAG,CAAC,EACd;EACZ,IAAIC,KAAK,GAAG,CAAC;EACb,IAAIC,OAAO,GAAGH,cAAc;EAE5B,OAAO,IAAII,OAAO,CAAC,CAACC,OAAO,EAAEC,UAAU,KAAK;IACxC,SAASC,KAAKA,CAAA,EAAG;MACbL,KAAK,IAAI,CAAC;MAEV,IAAIE,OAAO,CAAC,CAACI,UAAU,EAAEC,SAAS,KAAK;QACnCX,IAAI,CAACU,UAAU,EAAEC,SAAS,EAAEH,UAAU,CAAC;MAC3C,CAAC,CAAC,CACGI,IAAI,CAACL,OAAO,CAAC,CACbM,KAAK,CAACC,MAAM,IAAI;QACb,IAAIV,KAAK,GAAGH,KAAK,EAAE;UACfI,OAAO,IAAIF,aAAa;UACxB;UACAY,mBAAmB,CAACV,OAAO,CAAC;UAC5B;QACJ;QAEAG,UAAU,CAACM,MAAM,CAAC;MACtB,CAAC,CAAC;IACV;IAEA,SAASC,mBAAmBA,CAACC,IAAI,EAAE;MAC/BC,UAAU,CAAC,MAAM;QACbR,KAAK,CAAC,CAAC;MACX,CAAC,EAAEO,IAAI,CAAC;IACZ;IAEAD,mBAAmB,CAACV,OAAO,CAAC;EAChC,CAAC,CAAC;AACN;;AAEA;AACA,SAASN,eAAe","ignoreList":[]}