{"version":3,"file":"numAbbr.js","names":["IntlMessageFormat","data","isNaN","languages","numbers","Lengths","numAbbrWithLocale","input","options","numbersData","locale","length","short","exponent","Math","floor","toString","formats","digits","count","round","template","msg","format","numAbbr","bcp47Tag","value","parseInt","Array","isArray","map","element"],"sources":["../../src/utils/numAbbr.ts"],"sourcesContent":["/**\n * @file Function to abbreviate a number as a string in a locale-sensitive manner.\n * @author Box\n */\n\nimport IntlMessageFormat from 'intl-messageformat';\nimport data, { NumbersData } from 'box-locale-data';\n\nimport isNaN from 'lodash/isNaN';\n\nconst { languages, numbers } = data;\n\nexport enum Lengths {\n    short = 'short',\n    long = 'long',\n}\n\nexport interface NumAbbrOptions {\n    length?: Lengths;\n    locale?: string;\n    numbersData?: NumbersData;\n}\n\nfunction numAbbrWithLocale(input: number, options: NumAbbrOptions, numbersData?: NumbersData, locale?: string): string {\n    if (!input || !numbersData) {\n        return '0';\n    }\n    let { length }: { length?: Lengths } = options;\n    length = length || Lengths.short;\n    let exponent: number = Math.floor(input).toString().length - 1;\n    if (input < 0) {\n        exponent -= 1; // take care of the negative sign\n    }\n    const formats = numbersData[length];\n    const digits: number = exponent >= formats.length ? exponent - formats.length + 3 : formats[exponent].digits;\n    const count: number = Math.round(input / 10 ** (exponent - digits + 1));\n    const template = new IntlMessageFormat(\n        formats[exponent > formats.length ? formats.length - 1 : exponent].msg,\n        locale,\n    );\n    return template.format({ count });\n}\n\n/**\n * Gets the number in abbreviated form in a locale-sensitive manner. This function\n * scales the number down to the smallest it can be, taking only up to 4 significant\n * digits, and rounding the rest. ie. 12345678 becomes \"12M\" in English.\n *\n * The abbreviation words/letters can have the length \"short\" or \"long\", specified\n * with the \"length\" property in the options. If \"short\",\n * then this function uses an abbreviation of the bucket such as \"12M\". If \"long\",\n * then the name of the bucket is written out in full, such as \"12 million\".\n *\n * For locales that have complex plurals, such as Russian or Polish, this function\n * returns the correctly pluralized suffix/prefix to go along with the scaled number.\n */\nfunction numAbbr(input: unknown, options: NumAbbrOptions = { length: Lengths.short }): string | string[] {\n    if (!input) return '0';\n\n    // languages contains info about the current locale\n    const { locale = languages.bcp47Tag || 'en-US', numbersData = numbers }: NumAbbrOptions = options;\n    let value;\n\n    switch (typeof input) {\n        case 'boolean':\n            input = input ? 1 : 0;\n            break;\n\n        case 'string':\n            value = parseInt(input, 10);\n            if (isNaN(value)) {\n                return '0';\n            }\n            break;\n\n        case 'object':\n            // for an array, we format each element of that array. In order to do that safely,\n            // recursively call numAbbr to make sure each of the elements is converted to a\n            // number before we call numAbbrWithLocale\n            return Array.isArray(input)\n                ? input.map((element: unknown) => {\n                      return numAbbr(element, options) as string;\n                  })\n                : '0';\n\n        default:\n            break;\n    }\n\n    return numAbbrWithLocale(input as number, options, numbersData, locale);\n}\n\nexport default numAbbr;\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,OAAOA,iBAAiB,MAAM,oBAAoB;AAClD,OAAOC,IAAI,MAAuB,iBAAiB;AAEnD,OAAOC,KAAK,MAAM,cAAc;AAEhC,MAAM;EAAEC,SAAS;EAAEC;AAAQ,CAAC,GAAGH,IAAI;AAEnC,WAAYI,OAAO,0BAAPA,OAAO;EAAPA,OAAO;EAAPA,OAAO;EAAA,OAAPA,OAAO;AAAA;AAWnB,SAASC,iBAAiBA,CAACC,KAAa,EAAEC,OAAuB,EAAEC,WAAyB,EAAEC,MAAe,EAAU;EACnH,IAAI,CAACH,KAAK,IAAI,CAACE,WAAW,EAAE;IACxB,OAAO,GAAG;EACd;EACA,IAAI;IAAEE;EAA6B,CAAC,GAAGH,OAAO;EAC9CG,MAAM,GAAGA,MAAM,IAAIN,OAAO,CAACO,KAAK;EAChC,IAAIC,QAAgB,GAAGC,IAAI,CAACC,KAAK,CAACR,KAAK,CAAC,CAACS,QAAQ,CAAC,CAAC,CAACL,MAAM,GAAG,CAAC;EAC9D,IAAIJ,KAAK,GAAG,CAAC,EAAE;IACXM,QAAQ,IAAI,CAAC,CAAC,CAAC;EACnB;EACA,MAAMI,OAAO,GAAGR,WAAW,CAACE,MAAM,CAAC;EACnC,MAAMO,MAAc,GAAGL,QAAQ,IAAII,OAAO,CAACN,MAAM,GAAGE,QAAQ,GAAGI,OAAO,CAACN,MAAM,GAAG,CAAC,GAAGM,OAAO,CAACJ,QAAQ,CAAC,CAACK,MAAM;EAC5G,MAAMC,KAAa,GAAGL,IAAI,CAACM,KAAK,CAACb,KAAK,GAAG,EAAE,KAAKM,QAAQ,GAAGK,MAAM,GAAG,CAAC,CAAC,CAAC;EACvE,MAAMG,QAAQ,GAAG,IAAIrB,iBAAiB,CAClCiB,OAAO,CAACJ,QAAQ,GAAGI,OAAO,CAACN,MAAM,GAAGM,OAAO,CAACN,MAAM,GAAG,CAAC,GAAGE,QAAQ,CAAC,CAACS,GAAG,EACtEZ,MACJ,CAAC;EACD,OAAOW,QAAQ,CAACE,MAAM,CAAC;IAAEJ;EAAM,CAAC,CAAC;AACrC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASK,OAAOA,CAACjB,KAAc,EAAEC,OAAuB,GAAG;EAAEG,MAAM,EAAEN,OAAO,CAACO;AAAM,CAAC,EAAqB;EACrG,IAAI,CAACL,KAAK,EAAE,OAAO,GAAG;;EAEtB;EACA,MAAM;IAAEG,MAAM,GAAGP,SAAS,CAACsB,QAAQ,IAAI,OAAO;IAAEhB,WAAW,GAAGL;EAAwB,CAAC,GAAGI,OAAO;EACjG,IAAIkB,KAAK;EAET,QAAQ,OAAOnB,KAAK;IAChB,KAAK,SAAS;MACVA,KAAK,GAAGA,KAAK,GAAG,CAAC,GAAG,CAAC;MACrB;IAEJ,KAAK,QAAQ;MACTmB,KAAK,GAAGC,QAAQ,CAACpB,KAAK,EAAE,EAAE,CAAC;MAC3B,IAAIL,KAAK,CAACwB,KAAK,CAAC,EAAE;QACd,OAAO,GAAG;MACd;MACA;IAEJ,KAAK,QAAQ;MACT;MACA;MACA;MACA,OAAOE,KAAK,CAACC,OAAO,CAACtB,KAAK,CAAC,GACrBA,KAAK,CAACuB,GAAG,CAAEC,OAAgB,IAAK;QAC5B,OAAOP,OAAO,CAACO,OAAO,EAAEvB,OAAO,CAAC;MACpC,CAAC,CAAC,GACF,GAAG;IAEb;MACI;EACR;EAEA,OAAOF,iBAAiB,CAACC,KAAK,EAAYC,OAAO,EAAEC,WAAW,EAAEC,MAAM,CAAC;AAC3E;AAEA,eAAec,OAAO","ignoreList":[]}