{"version":3,"file":"parseEmails.js","names":["parseEmails","text","emails","match","map","c","trim","length","charAt","substr","checkIsExternalUser","isCurrentUserOwner","ownerEmailDomain","emailToCheck","split"],"sources":["../../src/utils/parseEmails.js"],"sourcesContent":["/**\n * Parse a string containing email addresses and potential contact information\n * or delimiters and return an array of email addresses\n *\n * @param  {string} text The input string\n * @return {array} A list of separated emails\n *\n * @example\n * parseEmails('Foo Bar <fbar@example.com>; Test User <test@example.com>')\n * returns [\"fbar@example.com\",\"test@example.com\"]\n */\nfunction parseEmails(text) {\n    if (text === null || typeof text === 'undefined') {\n        // Input text is either null or undefined\n        return [];\n    }\n\n    const emails = text.match(/[^\\s[<(]+@[^\\s<>@,/\\\\]+\\.[^\\s<>,;)]+/gi);\n\n    if (!emails) {\n        // No match pattern is found\n        return [];\n    }\n\n    return emails.map(c => {\n        // Trim the leading and trailing spaces\n        c = c.trim();\n\n        // Remove double quote pairs from both ends\n        // example '\"\"\"abc\"\"\"' will be altered to 'abc'\n        while (c.length >= 2 && c.charAt(0) === '\"' && c.charAt(c.length - 1) === '\"') {\n            c = c.substr(1, c.length - 2);\n        }\n\n        return c;\n    });\n}\n\n/**\n * Check if an email belongs to an external collaborator.\n * External collaborator icons will only be displayed in the USM if the current user owns\n * the item and if the collaborator's email domain differs from the owner's email domain.\n *\n * @param {boolean} isCurrentUserOwner\n * @param {string | null} ownerEmailDomain\n * @param {string | undefined} emailToCheck\n * @returns {boolean}\n */\nexport const checkIsExternalUser = (isCurrentUserOwner, ownerEmailDomain, emailToCheck) => {\n    if (!emailToCheck || !ownerEmailDomain || !isCurrentUserOwner) return false;\n    return emailToCheck.split('@')[1] !== ownerEmailDomain;\n};\n\nexport default parseEmails;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,WAAWA,CAACC,IAAI,EAAE;EACvB,IAAIA,IAAI,KAAK,IAAI,IAAI,OAAOA,IAAI,KAAK,WAAW,EAAE;IAC9C;IACA,OAAO,EAAE;EACb;EAEA,MAAMC,MAAM,GAAGD,IAAI,CAACE,KAAK,CAAC,wCAAwC,CAAC;EAEnE,IAAI,CAACD,MAAM,EAAE;IACT;IACA,OAAO,EAAE;EACb;EAEA,OAAOA,MAAM,CAACE,GAAG,CAACC,CAAC,IAAI;IACnB;IACAA,CAAC,GAAGA,CAAC,CAACC,IAAI,CAAC,CAAC;;IAEZ;IACA;IACA,OAAOD,CAAC,CAACE,MAAM,IAAI,CAAC,IAAIF,CAAC,CAACG,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,IAAIH,CAAC,CAACG,MAAM,CAACH,CAAC,CAACE,MAAM,GAAG,CAAC,CAAC,KAAK,GAAG,EAAE;MAC3EF,CAAC,GAAGA,CAAC,CAACI,MAAM,CAAC,CAAC,EAAEJ,CAAC,CAACE,MAAM,GAAG,CAAC,CAAC;IACjC;IAEA,OAAOF,CAAC;EACZ,CAAC,CAAC;AACN;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMK,mBAAmB,GAAGA,CAACC,kBAAkB,EAAEC,gBAAgB,EAAEC,YAAY,KAAK;EACvF,IAAI,CAACA,YAAY,IAAI,CAACD,gBAAgB,IAAI,CAACD,kBAAkB,EAAE,OAAO,KAAK;EAC3E,OAAOE,YAAY,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,KAAKF,gBAAgB;AAC1D,CAAC;AAED,eAAeZ,WAAW","ignoreList":[]}