{"version":3,"file":"Cache.js","names":["merge","Cache","constructor","cache","set","key","value","has","get","Error","unset","unsetAll","prefix","Object","keys","forEach","startsWith","hasOwnProperty","call","undefined"],"sources":["../../src/utils/Cache.js"],"sourcesContent":["/**\n * @flow\n * @file A simple in-memory cache\n * @author Box\n */\n\nimport merge from 'lodash/merge';\nimport type { StringAnyMap } from '../common/types/core';\n\nclass Cache {\n    /**\n     * @property {*}\n     */\n    cache: StringAnyMap;\n\n    /**\n     * [constructor]\n     *\n     * @return {Cache} Cache instance\n     */\n    constructor() {\n        this.cache = {};\n    }\n\n    /**\n     * Caches a simple object in memory.\n     *\n     * @param {string} key The cache key\n     * @param {*} value The cache value\n     * @return {void}\n     */\n    set(key: string, value: any): void {\n        this.cache[key] = value;\n    }\n\n    /**\n     * Merges cached values for objects.\n     *\n     * @param {string} key The cache key\n     * @param {*} value The cache value\n     * @return {void}\n     */\n    merge(key: string, value: any): void {\n        if (this.has(key)) {\n            this.set(key, merge({}, this.get(key), value));\n        } else {\n            throw new Error(`Key ${key} not in cache!`);\n        }\n    }\n\n    /**\n     * Deletes object from in-memory cache.\n     *\n     * @param {string} key The cache key\n     * @return {void}\n     */\n    unset(key: string): void {\n        delete this.cache[key];\n    }\n\n    /**\n     * Deletes all object from in-memory cache\n     * that match the key as prefix.\n     *\n     * @param {string} prefix The cache key prefix\n     * @return {void}\n     */\n    unsetAll(prefix: string): void {\n        Object.keys(this.cache).forEach((key: string) => {\n            if (key.startsWith(prefix)) {\n                delete this.cache[key];\n            }\n        });\n    }\n\n    /**\n     * Checks if cache has provided key.\n     *\n     * @param {string} key The cache key\n     * @return {boolean} Whether the cache has key\n     */\n    has(key: string): boolean {\n        return {}.hasOwnProperty.call(this.cache, key);\n    }\n\n    /**\n     * Fetches a cached object from in-memory cache if available.\n     *\n     * @param {string} key Key of cached object\n     * @return {*} Cached object\n     */\n    get(key: string): any {\n        if (this.has(key)) {\n            return this.cache[key];\n        }\n\n        return undefined;\n    }\n}\n\nexport default Cache;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,KAAK,MAAM,cAAc;AAGhC,MAAMC,KAAK,CAAC;EACR;AACJ;AACA;;EAGI;AACJ;AACA;AACA;AACA;EACIC,WAAWA,CAAA,EAAG;IACV,IAAI,CAACC,KAAK,GAAG,CAAC,CAAC;EACnB;;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;EACIC,GAAGA,CAACC,GAAW,EAAEC,KAAU,EAAQ;IAC/B,IAAI,CAACH,KAAK,CAACE,GAAG,CAAC,GAAGC,KAAK;EAC3B;;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;EACIN,KAAKA,CAACK,GAAW,EAAEC,KAAU,EAAQ;IACjC,IAAI,IAAI,CAACC,GAAG,CAACF,GAAG,CAAC,EAAE;MACf,IAAI,CAACD,GAAG,CAACC,GAAG,EAAEL,KAAK,CAAC,CAAC,CAAC,EAAE,IAAI,CAACQ,GAAG,CAACH,GAAG,CAAC,EAAEC,KAAK,CAAC,CAAC;IAClD,CAAC,MAAM;MACH,MAAM,IAAIG,KAAK,CAAC,OAAOJ,GAAG,gBAAgB,CAAC;IAC/C;EACJ;;EAEA;AACJ;AACA;AACA;AACA;AACA;EACIK,KAAKA,CAACL,GAAW,EAAQ;IACrB,OAAO,IAAI,CAACF,KAAK,CAACE,GAAG,CAAC;EAC1B;;EAEA;AACJ;AACA;AACA;AACA;AACA;AACA;EACIM,QAAQA,CAACC,MAAc,EAAQ;IAC3BC,MAAM,CAACC,IAAI,CAAC,IAAI,CAACX,KAAK,CAAC,CAACY,OAAO,CAAEV,GAAW,IAAK;MAC7C,IAAIA,GAAG,CAACW,UAAU,CAACJ,MAAM,CAAC,EAAE;QACxB,OAAO,IAAI,CAACT,KAAK,CAACE,GAAG,CAAC;MAC1B;IACJ,CAAC,CAAC;EACN;;EAEA;AACJ;AACA;AACA;AACA;AACA;EACIE,GAAGA,CAACF,GAAW,EAAW;IACtB,OAAO,CAAC,CAAC,CAACY,cAAc,CAACC,IAAI,CAAC,IAAI,CAACf,KAAK,EAAEE,GAAG,CAAC;EAClD;;EAEA;AACJ;AACA;AACA;AACA;AACA;EACIG,GAAGA,CAACH,GAAW,EAAO;IAClB,IAAI,IAAI,CAACE,GAAG,CAACF,GAAG,CAAC,EAAE;MACf,OAAO,IAAI,CAACF,KAAK,CAACE,GAAG,CAAC;IAC1B;IAEA,OAAOc,SAAS;EACpB;AACJ;AAEA,eAAelB,KAAK","ignoreList":[]}