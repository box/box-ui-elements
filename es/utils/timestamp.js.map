{"version":3,"file":"timestamp.js","names":["ONE_HOUR_MS","convertTimestampToSeconds","timestamp","Number","isNaN","totalSeconds","convertMillisecondsToHMMSS","timestampInMilliseconds","hours","Math","floor","minutes","seconds","toString","padStart","convertSecondsToHMMSS","secondsValue"],"sources":["../../src/utils/timestamp.ts"],"sourcesContent":["/**\n * @file Utility functions for timestamp formatting and conversion\n */\n\n// @ts-ignore: ONE_HOUR_MS is a constant from a non ts file\nimport { ONE_HOUR_MS } from '../constants';\n\n/**\n * Converts a timestamp representation to seconds\n * @param timestamp The timestamp in milliseconds\n * @returns The total seconds\n */\nconst convertTimestampToSeconds = (timestamp: number): number => {\n    if (!timestamp || Number.isNaN(Number(timestamp))) {\n        return 0;\n    }\n    const totalSeconds = timestamp / 1000;\n    return totalSeconds;\n};\n\n/**\n * Converts milliseconds to HH:MM:SS format\n * @param timestampInMilliseconds The timestamp in milliseconds\n * @returns The formatted timestamp string in HH:MM:SS format\n */\nconst convertMillisecondsToHMMSS = (timestampInMilliseconds: number): string => {\n    if (!timestampInMilliseconds || timestampInMilliseconds < 0) {\n        return '0:00:00';\n    }\n    const hours = Math.floor(timestampInMilliseconds / ONE_HOUR_MS);\n    const minutes = Math.floor((timestampInMilliseconds % ONE_HOUR_MS) / 60000);\n    const seconds = Math.floor((timestampInMilliseconds % 60000) / 1000);\n    // timestamp in the format 1:23:45\n    return `${hours.toString()}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;\n};\n\n/**\n * Converts seconds to HH:MM:SS format\n * @param seconds number of seconds\n * @returns The formatted timestamp string in HH:MM:SS format\n */\nconst convertSecondsToHMMSS = (seconds: number): string => {\n    const hours = Math.floor(seconds / 3600);\n    const minutes = Math.floor((seconds % 3600) / 60);\n    const secondsValue = seconds % 60;\n    return `${hours.toString()}:${minutes.toString().padStart(2, '0')}:${secondsValue.toString().padStart(2, '0')}`;\n};\n\nexport { convertTimestampToSeconds, convertMillisecondsToHMMSS, convertSecondsToHMMSS };\n"],"mappings":"AAAA;AACA;AACA;;AAEA;AACA,SAASA,WAAW,QAAQ,cAAc;;AAE1C;AACA;AACA;AACA;AACA;AACA,MAAMC,yBAAyB,GAAIC,SAAiB,IAAa;EAC7D,IAAI,CAACA,SAAS,IAAIC,MAAM,CAACC,KAAK,CAACD,MAAM,CAACD,SAAS,CAAC,CAAC,EAAE;IAC/C,OAAO,CAAC;EACZ;EACA,MAAMG,YAAY,GAAGH,SAAS,GAAG,IAAI;EACrC,OAAOG,YAAY;AACvB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,MAAMC,0BAA0B,GAAIC,uBAA+B,IAAa;EAC5E,IAAI,CAACA,uBAAuB,IAAIA,uBAAuB,GAAG,CAAC,EAAE;IACzD,OAAO,SAAS;EACpB;EACA,MAAMC,KAAK,GAAGC,IAAI,CAACC,KAAK,CAACH,uBAAuB,GAAGP,WAAW,CAAC;EAC/D,MAAMW,OAAO,GAAGF,IAAI,CAACC,KAAK,CAAEH,uBAAuB,GAAGP,WAAW,GAAI,KAAK,CAAC;EAC3E,MAAMY,OAAO,GAAGH,IAAI,CAACC,KAAK,CAAEH,uBAAuB,GAAG,KAAK,GAAI,IAAI,CAAC;EACpE;EACA,OAAO,GAAGC,KAAK,CAACK,QAAQ,CAAC,CAAC,IAAIF,OAAO,CAACE,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,IAAIF,OAAO,CAACC,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE;AAC9G,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,MAAMC,qBAAqB,GAAIH,OAAe,IAAa;EACvD,MAAMJ,KAAK,GAAGC,IAAI,CAACC,KAAK,CAACE,OAAO,GAAG,IAAI,CAAC;EACxC,MAAMD,OAAO,GAAGF,IAAI,CAACC,KAAK,CAAEE,OAAO,GAAG,IAAI,GAAI,EAAE,CAAC;EACjD,MAAMI,YAAY,GAAGJ,OAAO,GAAG,EAAE;EACjC,OAAO,GAAGJ,KAAK,CAACK,QAAQ,CAAC,CAAC,IAAIF,OAAO,CAACE,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,IAAIE,YAAY,CAACH,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE;AACnH,CAAC;AAED,SAASb,yBAAyB,EAAEK,0BAA0B,EAAES,qBAAqB","ignoreList":[]}