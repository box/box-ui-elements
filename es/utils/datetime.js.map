{"version":3,"file":"datetime.js","names":["isNaN","MILLISECONDS_PER_SECOND","MILLISECONDS_PER_DAY","MILLISECONDS_PER_MINUTE","RE_ISO8601_DATE","ISO8601_DATETIME","ISO8601_MILLISECONDS","ISO8601_TIMEZONE","ISO8601_Z_FMT","ISO8601_SHORT_FMT","ISO8601_MEDIUM_FMT","ISO8601_LONG_FMT","convertToDate","dateValue","Date","convertToMs","seconds","isToday","toDateString","isYesterday","getTime","isTomorrow","isCurrentMonth","getMonth","isCurrentYear","getFullYear","formatTime","h","Math","floor","m","s","hour","toString","sec","min","addTime","timeToAdd","convertDateToUnixMidnightTime","date","utcUnixTimeInMs","timezoneOffsetInMins","getTimezoneOffset","timezoneOffsetInMs","unixDayMidnightTime","isValidDate","convertISOStringtoRFC3339String","isoString","test","parseDate","split","dateTime","milliseconds","timeZone","substr","convertISOStringToUTCDate","utcDate","utcTime","localizedUnixTimeInMs"],"sources":["../../src/utils/datetime.ts"],"sourcesContent":["import isNaN from 'lodash/isNaN';\n\nconst MILLISECONDS_PER_SECOND = 1000;\n// 24 hours * 60 minutes * 60 seconds * 1000 milliseconds\nconst MILLISECONDS_PER_DAY = 24 * 60 * 60 * MILLISECONDS_PER_SECOND;\n// 60 sec * 1000\nconst MILLISECONDS_PER_MINUTE = 60 * MILLISECONDS_PER_SECOND;\n\n/**\n * RegExp matcher for acceptable ISO 8601 date formats w/ timezone (see below)\n * Capture groups structured as follows:\n * 1) the date/time portion (2018-06-13T00:00:00.000)\n * 2) the milliseconds (if matched)\n * 3) the timezone portion (e.g., Z, +03, -0400, +05:00)\n * 4) the Z format for timezone (if matched)\n * 5) the short format for timezone (if matched)\n * 6) the colon-less format for timezone (if matched)\n * 7) the colon long format for timezone (if matched)\n */\nconst RE_ISO8601_DATE =\n    /^(\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d{1,3})?)?((Z$)|(?:[+-](?:([0-2]\\d$)|([0-2]\\d(?:00|30)$)|([0-2]\\d:(?:00|30)$))))$/;\nconst ISO8601_DATETIME = 1 as const;\nconst ISO8601_MILLISECONDS = 2 as const;\nconst ISO8601_TIMEZONE = 3 as const;\nconst ISO8601_Z_FMT = 4 as const;\nconst ISO8601_SHORT_FMT = 5 as const;\nconst ISO8601_MEDIUM_FMT = 6 as const;\nconst ISO8601_LONG_FMT = 7 as const;\n\n/**\n * Helper to normalize a date value to a date object\n * @param dateValue - Date number, string, or object\n * @returns {Date} the normalized date object\n */\nfunction convertToDate(dateValue: number | string | Date): Date {\n    return dateValue instanceof Date ? dateValue : new Date(dateValue);\n}\n\n/**\n * Converts an integer value in seconds to milliseconds.\n * @param {number} seconds - The value in seconds\n * @returns {number} the value in milliseconds\n */\nfunction convertToMs(seconds: number): number {\n    return seconds * MILLISECONDS_PER_SECOND;\n}\n\n/**\n * Checks whether the given date value (in unix milliseconds) is today.\n * @param dateValue - Date object or integer representing the number of milliseconds since 1/1/1970 UTC\n * @returns whether the given value is today\n */\nfunction isToday(dateValue: number | string | Date): boolean {\n    return new Date().toDateString() === convertToDate(dateValue).toDateString();\n}\n\n/**\n * Checks whether the given date value (in unix milliseconds) is yesterday.\n * @param dateValue - Date object or integer or representing the number of milliseconds since 1/1/1970 UTC\n * @returns whether the given value is yesterday\n */\nfunction isYesterday(dateValue: number | string | Date): boolean {\n    return isToday(convertToDate(dateValue).getTime() + MILLISECONDS_PER_DAY);\n}\n\n/**\n * Checks whether the given date value (in unix milliseconds) is tomorrow.\n * @param dateValue - Date object or integer or representing the number of milliseconds since 1/1/1970 UTC\n * @returns whether the given value is tomorrow\n */\nfunction isTomorrow(dateValue: number | string | Date): boolean {\n    return isToday(convertToDate(dateValue).getTime() - MILLISECONDS_PER_DAY);\n}\n\n/**\n * Checks whether the given date value (in unix milliseconds) is in the current month.\n * @param dateValue - Date object or integer representing the number of milliseconds since 1/1/1970 UTC\n * @returns whether the given value is in the current month\n */\nfunction isCurrentMonth(dateValue: number | string | Date): boolean {\n    return new Date().getMonth() === convertToDate(dateValue).getMonth();\n}\n\n/**\n * Checks whether the given date value (in unix milliseconds) is in the current year.\n * @param dateValue - Date object or integer representing the number of milliseconds since 1/1/1970 UTC\n * @returns whether the given value is in the current year\n */\nfunction isCurrentYear(dateValue: number | string | Date): boolean {\n    return new Date().getFullYear() === convertToDate(dateValue).getFullYear();\n}\n\n/**\n * Formats a number of seconds as a time string\n *\n * @param seconds - seconds\n * @returns a string formatted like 3:57:35\n */\nfunction formatTime(seconds: number): string {\n    const h = Math.floor(seconds / 3600);\n    const m = Math.floor((seconds % 3600) / 60);\n    const s = Math.floor((seconds % 3600) % 60);\n    const hour = h > 0 ? `${h.toString()}:` : '';\n    const sec = s < 10 ? `0${s.toString()}` : s.toString();\n    let min = m.toString();\n    if (h > 0 && m < 10) {\n        min = `0${min}`;\n    }\n    return `${hour}${min}:${sec}`;\n}\n\n/**\n * Adds time to a given dateValue\n *\n * @param {number|Date} dateValue - date or integer value to add time to\n * @param {number} timeToAdd - amount of time to add in ms\n * @returns {number|Date} the modified date or integer\n */\nfunction addTime(dateValue: number | Date, timeToAdd: number): number | Date {\n    if (dateValue instanceof Date) {\n        return new Date(dateValue.getTime() + timeToAdd);\n    }\n\n    return dateValue + timeToAdd;\n}\n\n/**\n * Will convert\n *      2018-06-13T07:00:00.000Z\n * to\n *      2018-06-13T00:00:00.000Z\n *\n * That is, it will give you the unix time in ms for midnight of the given\n * date in UTC timezone. This is the opposite of convertISOStringToUTCDate\n *\n * @param {Date} date - the date to be converted to midnight\n * @returns {number} the unix time in ms for midnight of the given date\n */\nfunction convertDateToUnixMidnightTime(date: Date): number {\n    // date is localized to 00:00:00 at system/browser timezone\n    const utcUnixTimeInMs = date.getTime();\n\n    // timezone an integer offset; minutes behind GMT\n    // we use the browser timezone offset instead of the user's,\n    // because the datepicker uses the browser to get the \"midnight\"\n    // time in the user's timezone with getTime()\n    const timezoneOffsetInMins = date.getTimezoneOffset();\n    const timezoneOffsetInMs = timezoneOffsetInMins * MILLISECONDS_PER_MINUTE;\n\n    // we need the unix/epoch time for midnight on the date selected\n    const unixDayMidnightTime = utcUnixTimeInMs - timezoneOffsetInMs;\n    return unixDayMidnightTime;\n}\n\n/**\n * Will check to see if a date object is not valid, according to the browser\n * JS engine.\n *\n * @param {Date} date - the date to be validated\n * @returns {boolean} whether the date value passes validation\n */\nfunction isValidDate(date: Date): boolean {\n    return !isNaN(date.getTime());\n}\n\n/**\n * Will convert ISO8601-compatible dates (with zone designators)\n *      2018-06-13T00:00:00.000-0500\n *      or\n *      2018-06-13T00:00:00.000-05\n *\n * to\n *      2018-06-13T00:00:00.000-05:00\n *\n * Equivalent formats between the two (e.g., uzing 'Z') will remain unchanged.\n * If the date format cannot be converted, it will pass along the existing value\n *\n * @param {string} isoString - the date to be converted\n * @returns {string} converted date format, if applicable\n */\nfunction convertISOStringtoRFC3339String(isoString: string): string {\n    // test that the date format inbound is ISO8601-compatible\n    if (RE_ISO8601_DATE.test(isoString)) {\n        // if it is, parse out the timezone part if it's in a longer format\n        // use the capture groups instead of the split result for the datetime and the time zone\n        const parseDate = isoString.split(RE_ISO8601_DATE);\n        let dateTime = parseDate[ISO8601_DATETIME];\n        const milliseconds = parseDate[ISO8601_MILLISECONDS];\n        const timeZone = parseDate[ISO8601_TIMEZONE];\n\n        // add milliseconds if missing, to standardize output\n        if (!milliseconds) {\n            dateTime += '.000';\n        }\n\n        if (parseDate[ISO8601_Z_FMT]) {\n            return isoString;\n        }\n\n        if (parseDate[ISO8601_SHORT_FMT]) {\n            return `${dateTime + timeZone}:00`;\n        }\n\n        if (parseDate[ISO8601_MEDIUM_FMT]) {\n            return `${dateTime + timeZone.substr(0, 3)}:${timeZone.substr(3)}`;\n        }\n\n        if (parseDate[ISO8601_LONG_FMT]) {\n            return isoString;\n        }\n    }\n    return isoString;\n}\n\n/**\n * Will convert\n *      2018-06-13T00:00:00.000Z\n * to\n *      2018-06-13T07:00:00.000Z\n *\n * This is the opposite of convertDateToUnixMidnightTime\n *\n * @param {string} isoString - ISO string in UTC time zone\n * @returns {Date} date in UTC time zone\n */\nfunction convertISOStringToUTCDate(isoString: string): Date {\n    // get date in UTC midnight time\n    const utcDate = new Date(convertISOStringtoRFC3339String(isoString));\n    const utcTime = utcDate.getTime();\n\n    // get browser's timezone\n    const timezoneOffsetInMins = utcDate.getTimezoneOffset();\n    const timezoneOffsetInMs = timezoneOffsetInMins * MILLISECONDS_PER_MINUTE;\n\n    // return date in utc timezone\n    const localizedUnixTimeInMs = utcTime + timezoneOffsetInMs;\n    return new Date(localizedUnixTimeInMs);\n}\n\nexport {\n    addTime,\n    convertDateToUnixMidnightTime,\n    convertISOStringtoRFC3339String,\n    convertISOStringToUTCDate,\n    convertToDate,\n    convertToMs,\n    formatTime,\n    isCurrentMonth,\n    isCurrentYear,\n    isToday,\n    isTomorrow,\n    isValidDate,\n    isYesterday,\n};\n"],"mappings":"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","ignoreList":[]}