{"version":3,"file":"keys.js","names":["decode","event","modifier","keyIdentifier","key","ctrlKey","shiftKey","metaKey","indexOf","String","fromCharCode","Number","replace"],"sources":["../../src/utils/keys.js"],"sourcesContent":["/**\n * @flow\n * @file Helper functions for keyboard events\n * @author Box\n */\n\n/**\n * Function to decode key events into keys.\n * Works for both React synthetic and native events.\n *\n * Will output in the format Shift+I, Control+I...\n * Will outpur Space for spacebar.\n * Will return empty string for modifiers only.\n *\n * @public\n * @param {Event} event - Keyboard event\n * @return {string} Decoded keydown key or empty string\n */\nfunction decode(event: KeyboardEvent | SyntheticKeyboardEvent<HTMLElement>) {\n    let modifier = '';\n\n    // KeyboardEvent.key is the new spec supported in Chrome, Firefox and IE.\n    // KeyboardEvent.keyIdentifier is the old spec supported in Safari.\n    // Priority is given to the new spec.\n    // $FlowFixMe\n    const { keyIdentifier } = event;\n    let key: string = event.key || keyIdentifier || '';\n\n    // Get the modifiers on their own\n    if (event.ctrlKey) {\n        modifier = 'Control';\n    } else if (event.shiftKey) {\n        modifier = 'Shift';\n    } else if (event.metaKey) {\n        modifier = 'Meta';\n    }\n\n    // The key and keyIdentifier specs also include modifiers.\n    // Since we are manually getting the modifiers above we do\n    // not want to trap them again here.\n    if (key === modifier) {\n        key = '';\n    }\n\n    // keyIdentifier spec returns UTF8 char codes\n    // Need to convert them back to ascii.\n    if (key.indexOf('U+') === 0) {\n        if (key === 'U+001B') {\n            key = 'Escape';\n        } else {\n            key = String.fromCharCode(Number(key.replace('U+', '0x')));\n        }\n    }\n\n    // If nothing was pressed or we evaluated to nothing, just return\n    if (!key) {\n        return '';\n    }\n\n    // Special casing for space bar\n    if (key === ' ') {\n        key = 'Space';\n    }\n\n    // Edge bug which outputs \"Esc\" instead of \"Escape\"\n    // https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/5290772/\n    if (key === 'Esc') {\n        key = 'Escape';\n    }\n\n    // keyIdentifier spec does not prefix the word Arrow.\n    // Newer key spec does it automatically.\n    if (key === 'Right' || key === 'Left' || key === 'Down' || key === 'Up') {\n        key = `Arrow${key}`;\n    }\n\n    if (modifier) {\n        modifier += '+';\n    }\n\n    return modifier + key;\n}\n\nexport { decode }; // eslint-disable-line\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,MAAMA,CAACC,KAA0D,EAAE;EACxE,IAAIC,QAAQ,GAAG,EAAE;;EAEjB;EACA;EACA;EACA;EACA,MAAM;IAAEC;EAAc,CAAC,GAAGF,KAAK;EAC/B,IAAIG,GAAW,GAAGH,KAAK,CAACG,GAAG,IAAID,aAAa,IAAI,EAAE;;EAElD;EACA,IAAIF,KAAK,CAACI,OAAO,EAAE;IACfH,QAAQ,GAAG,SAAS;EACxB,CAAC,MAAM,IAAID,KAAK,CAACK,QAAQ,EAAE;IACvBJ,QAAQ,GAAG,OAAO;EACtB,CAAC,MAAM,IAAID,KAAK,CAACM,OAAO,EAAE;IACtBL,QAAQ,GAAG,MAAM;EACrB;;EAEA;EACA;EACA;EACA,IAAIE,GAAG,KAAKF,QAAQ,EAAE;IAClBE,GAAG,GAAG,EAAE;EACZ;;EAEA;EACA;EACA,IAAIA,GAAG,CAACI,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;IACzB,IAAIJ,GAAG,KAAK,QAAQ,EAAE;MAClBA,GAAG,GAAG,QAAQ;IAClB,CAAC,MAAM;MACHA,GAAG,GAAGK,MAAM,CAACC,YAAY,CAACC,MAAM,CAACP,GAAG,CAACQ,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC;IAC9D;EACJ;;EAEA;EACA,IAAI,CAACR,GAAG,EAAE;IACN,OAAO,EAAE;EACb;;EAEA;EACA,IAAIA,GAAG,KAAK,GAAG,EAAE;IACbA,GAAG,GAAG,OAAO;EACjB;;EAEA;EACA;EACA,IAAIA,GAAG,KAAK,KAAK,EAAE;IACfA,GAAG,GAAG,QAAQ;EAClB;;EAEA;EACA;EACA,IAAIA,GAAG,KAAK,OAAO,IAAIA,GAAG,KAAK,MAAM,IAAIA,GAAG,KAAK,MAAM,IAAIA,GAAG,KAAK,IAAI,EAAE;IACrEA,GAAG,GAAG,QAAQA,GAAG,EAAE;EACvB;EAEA,IAAIF,QAAQ,EAAE;IACVA,QAAQ,IAAI,GAAG;EACnB;EAEA,OAAOA,QAAQ,GAAGE,GAAG;AACzB;AAEA,SAASJ,MAAM,GAAG,CAAC","ignoreList":[]}