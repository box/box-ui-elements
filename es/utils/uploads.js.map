{"version":3,"file":"uploads.js","names":["getProp","Browser","DEFAULT_API_OPTIONS","doesFileContainAPIOptions","file","options","doesDataTransferItemContainAPIOptions","item","getFile","getDataTransferItem","getFileAPIOptions","getDataTransferItemAPIOptions","isValidDateObject","date","Object","prototype","toString","call","Number","isNaN","getTime","toISOStringNoMS","toISOString","replace","getFileLastModifiedAsISONoMSIfPossible","lastModified","lastModifiedDate","Date","isoString","tryParseJson","maybeJson","JSON","parse","e","getBoundedExpBackoffRetryDelay","initialRetryDelay","maxRetryDelay","retryNum","delay","getEntryFromDataTransferItem","entry","webkitGetAsEntry","mozGetAsEntry","getAsEntry","isDataTransferItemAFolder","itemData","isDirectory","isDataTransferItemAPackage","type","kind","getFileFromEntry","Promise","resolve","getFileFromDataTransferItem","getPackageFileFromDataTransferItem","itemFile","getAsFile","getFileId","rootFolderId","name","fileWithOptions","folderId","uploadInitTimestamp","now","fileName","webkitRelativePath","getDataTransferItemId","isMultiputSupported","cryptoObj","window","crypto","msCrypto","isMobileSafari","location","protocol","subtle"],"sources":["../../src/utils/uploads.js"],"sourcesContent":["/**\n * @flow\n * @file Utility functions for uploads\n * @author Box\n */\nimport getProp from 'lodash/get';\n\nimport Browser from './Browser';\n\nimport type {\n    UploadFile,\n    UploadFileWithAPIOptions,\n    UploadDataTransferItemWithAPIOptions,\n    UploadItemAPIOptions,\n    FileSystemFileEntry,\n} from '../common/types/upload';\n\nconst DEFAULT_API_OPTIONS = {};\n\n/**\n * Returns true if file contains API options\n *\n * @param {UploadFile | UploadFileWithAPIOptions} item\n * @returns {boolean}\n */\nfunction doesFileContainAPIOptions(file: UploadFile | UploadFileWithAPIOptions): boolean {\n    // $FlowFixMe UploadFileWithAPIOptions has `file` and `options` properties\n    return !!(file.options && file.file);\n}\n\n/**\n * Returns true if item contains API options\n *\n * @param {DataTransferItem | UploadDataTransferItemWithAPIOptions} item\n * @returns {boolean}\n */\nfunction doesDataTransferItemContainAPIOptions(item: DataTransferItem | UploadDataTransferItemWithAPIOptions): boolean {\n    // $FlowFixMe UploadDataTransferItemWithAPIOptions has `item` and `options` properties\n    return !!(item.options && item.item);\n}\n\n/**\n * Converts UploadFile or UploadFileWithAPIOptions to UploadFile\n *\n * @param {UploadFile | UploadFileWithAPIOptions} file\n * @returns {UploadFile}\n */\nfunction getFile(file: UploadFile | UploadFileWithAPIOptions): UploadFile {\n    if (doesFileContainAPIOptions(file)) {\n        return ((file: any): UploadFileWithAPIOptions).file;\n    }\n\n    return ((file: any): UploadFile);\n}\n\n/**\n * Converts DataTransferItem or UploadDataTransferItemWithAPIOptions to DataTransferItem\n *\n * @param {DataTransferItem | UploadDataTransferItemWithAPIOptions} item\n * @returns {DataTransferItem}\n */\nfunction getDataTransferItem(item: DataTransferItem | UploadDataTransferItemWithAPIOptions): DataTransferItem {\n    if (doesDataTransferItemContainAPIOptions(item)) {\n        return ((item: any): UploadDataTransferItemWithAPIOptions).item;\n    }\n\n    return ((item: any): DataTransferItem);\n}\n\n/**\n * Get API Options from file\n *\n * @param {UploadFile | UploadFileWithAPIOptions} file\n * @returns {UploadItemAPIOptions}\n */\nfunction getFileAPIOptions(file: UploadFile | UploadFileWithAPIOptions): UploadItemAPIOptions {\n    if (doesFileContainAPIOptions(file)) {\n        return ((file: any): UploadFileWithAPIOptions).options || DEFAULT_API_OPTIONS;\n    }\n\n    return DEFAULT_API_OPTIONS;\n}\n\n/**\n * Get API Options from item\n *\n * @param {DataTransferItem | UploadDataTransferItemWithAPIOptions} item\n * @returns {UploadItemAPIOptions}\n */\nfunction getDataTransferItemAPIOptions(\n    item: DataTransferItem | UploadDataTransferItemWithAPIOptions,\n): UploadItemAPIOptions {\n    if (doesDataTransferItemContainAPIOptions(item)) {\n        return ((item: any): UploadDataTransferItemWithAPIOptions).options || DEFAULT_API_OPTIONS;\n    }\n\n    return DEFAULT_API_OPTIONS;\n}\n\n/**\n * Returns true if the given object is a Date instance encoding a valid date\n * (i.e. new Date('this is not a timestamp') should return false).\n *\n * Code adapted from\n * http://stackoverflow.com/questions/1353684/detecting-an-invalid-date-date-instance-in-javascript\n *\n * @param {Date} date\n * @return {boolean}\n */\nfunction isValidDateObject(date: Date): boolean {\n    return Object.prototype.toString.call(date) === '[object Date]' && !Number.isNaN(date.getTime());\n}\n\n/**\n * Remove milliseconds from date time string\n *\n * @param {Date} date\n * @return {string}\n */\nfunction toISOStringNoMS(date: Date): string {\n    return date.toISOString().replace(/\\.[0-9]{3}/, '');\n}\n\n/**\n * Returns the file's last modified date as an ISO string with no MS component (e.g.\n * '2017-04-18T17:14:27Z'), or null if no such date can be extracted from the file object.\n * (Nothing on the Internet guarantees that the file object has this info.)\n *\n * @param {UploadFile} file\n * @return {?string}\n */\nfunction getFileLastModifiedAsISONoMSIfPossible(file: UploadFile): ?string {\n    // The compatibility chart at https://developer.mozilla.org/en-US/docs/Web/API/File/lastModified#Browser_compatibility\n    // is not up to date as of 12-13-2018. Edge & ie11 do not support lastModified, but support lastModifiedDate.\n    const lastModified = file.lastModified || file.lastModifiedDate;\n    if (lastModified) {\n        let lastModifiedDate: Date | null = null;\n\n        if (typeof lastModified === 'number') {\n            // Only non-negative timestamps are valid. In rare cases, the timestamp may be erroneously set to a negative value\n            // https://issues.chromium.org/issues/393149335\n            if (lastModified < 0) {\n                return null;\n            }\n            lastModifiedDate = new Date(lastModified); // Try number first\n        } else if (typeof lastModified === 'string' || lastModified instanceof Date) {\n            lastModifiedDate = new Date(lastModified);\n        }\n\n        if (lastModifiedDate && isValidDateObject(lastModifiedDate)) {\n            const isoString = toISOStringNoMS(lastModifiedDate);\n            return isoString;\n        }\n    }\n\n    return null;\n}\n\n/**\n * If maybeJson is valid JSON string, return the result of calling JSON.parse\n * on it.  Otherwise, return null.\n *\n * @param {string} maybeJson\n * @return {?Object}\n */\nfunction tryParseJson(maybeJson: string): ?Object {\n    try {\n        return JSON.parse(maybeJson);\n    } catch (e) {\n        return null;\n    }\n}\n\n/**\n * Get bounded exponential backoff retry delay\n *\n * @param {number} initialRetryDelay\n * @param {number} maxRetryDelay\n * @param {number} retryNum - Current retry number (first retry will have value of 0).\n * @return {number}\n */\nfunction getBoundedExpBackoffRetryDelay(initialRetryDelay: number, maxRetryDelay: number, retryNum: number) {\n    const delay = initialRetryDelay * retryNum ** 2;\n    return delay > maxRetryDelay ? maxRetryDelay : delay;\n}\n\n/**\n * Get entry from dataTransferItem\n *\n * @param {DataTransferItem} item\n * @returns {FileSystemFileEntry}\n */\nfunction getEntryFromDataTransferItem(item: DataTransferItem): FileSystemFileEntry {\n    const entry =\n        // $FlowFixMe\n        item.webkitGetAsEntry || item.mozGetAsEntry || item.getAsEntry;\n\n    return entry.call(item);\n}\n\n/**\n * Check if a dataTransferItem is a folder\n *\n * @param {UploadDataTransferItemWithAPIOptions | DataTransferItem} itemData\n * @returns {boolean}\n */\nfunction isDataTransferItemAFolder(itemData: UploadDataTransferItemWithAPIOptions | DataTransferItem): boolean {\n    const item = getDataTransferItem(itemData);\n    const entry = getEntryFromDataTransferItem(((item: any): DataTransferItem));\n    if (!entry) {\n        return false;\n    }\n\n    return entry.isDirectory;\n}\n\n/**\n * Check if a dataTransfer item is a macOS \"package file\"\n * @see https://en.wikipedia.org/wiki/Package_(macOS)\n *\n * @returns {boolean}\n */\nfunction isDataTransferItemAPackage(itemData: UploadDataTransferItemWithAPIOptions | DataTransferItem): boolean {\n    const item = getDataTransferItem(itemData);\n    const isDirectory = isDataTransferItemAFolder(item);\n\n    return isDirectory && item.type === 'application/zip' && item.kind === 'file';\n}\n\n/**\n * Get file from FileSystemFileEntry\n *\n * @param {FileSystemFileEntry} entry\n * @returns {Promise<UploadFile>}\n */\nfunction getFileFromEntry(entry: FileSystemFileEntry): Promise<UploadFile> {\n    return new Promise(resolve => {\n        entry.file(file => {\n            resolve(file);\n        });\n    });\n}\n\n/**\n * Get file from DataTransferItem or UploadDataTransferItemWithAPIOptions\n *\n * @param {UploadDataTransferItemWithAPIOptions | DataTransferItem} itemData\n * @returns {Promise<UploadFile | UploadFileWithAPIOptions | null>}\n */\nasync function getFileFromDataTransferItem(\n    itemData: UploadDataTransferItemWithAPIOptions | DataTransferItem,\n): Promise<UploadFile | UploadFileWithAPIOptions | null> {\n    const item = getDataTransferItem(itemData);\n    const entry = getEntryFromDataTransferItem(((item: any): DataTransferItem));\n    if (!entry) {\n        return null;\n    }\n\n    const file = await getFileFromEntry(entry);\n\n    if (doesDataTransferItemContainAPIOptions(itemData)) {\n        return {\n            file: ((file: any): UploadFile),\n            options: getDataTransferItemAPIOptions(itemData),\n        };\n    }\n\n    return file;\n}\n\n/**\n * Get file from DataTransferItem or UploadDataTransferItemWithAPIOptions\n * Uses `entry`'s `getAsFile` method for retrieving package information as a single file.\n * @see https://en.wikipedia.org/wiki/Package_(macOS)\n *\n * @param {UploadDataTransferItemWithAPIOptions | DataTransferItem} itemData\n * @returns {?UploadFile | ?UploadFileWithAPIOptions | null}\n */\nfunction getPackageFileFromDataTransferItem(\n    itemData: UploadDataTransferItemWithAPIOptions | DataTransferItem,\n): ?UploadFile | ?UploadFileWithAPIOptions | null {\n    const item = getDataTransferItem(itemData);\n    const entry = getEntryFromDataTransferItem(((item: any): DataTransferItem));\n    if (!entry) {\n        return null;\n    }\n\n    const itemFile = item.getAsFile();\n\n    if (doesDataTransferItemContainAPIOptions(itemData)) {\n        return {\n            file: ((itemFile: any): UploadFile),\n            options: getDataTransferItemAPIOptions(itemData),\n        };\n    }\n\n    return itemFile;\n}\n\n/**\n * Generates file id based on file properties\n *\n * When folderId or uploadInitTimestamp is missing from file options, file name is returned as file id.\n * Otherwise, fileName_folderId_uploadInitTimestamp is used as file id.\n *\n * @param {UploadFileWithAPIOptions | UploadFile} file\n * @param {string} rootFolderId\n * @returns {string}\n */\nfunction getFileId(file: UploadFileWithAPIOptions | UploadFile, rootFolderId: string): string {\n    if (!doesFileContainAPIOptions(file)) {\n        return ((file: any): UploadFile).name;\n    }\n\n    const fileWithOptions = ((file: any): UploadFileWithAPIOptions);\n    const folderId = getProp(fileWithOptions, 'options.folderId', rootFolderId);\n    const uploadInitTimestamp = getProp(fileWithOptions, 'options.uploadInitTimestamp', Date.now());\n    const fileName = fileWithOptions.file.webkitRelativePath || fileWithOptions.file.name;\n\n    return `${fileName}_${folderId}_${uploadInitTimestamp}`;\n}\n\n/**\n * Generates item id based on item properties\n *\n * When item options including folderId or uploadInitTimestamp are missing, item name is returned as item id.\n * Otherwise, item properties are used as item id.\n * E.g., folder1_0_123124124\n *\n * @param {DataTransferItem | UploadDataTransferItemWithAPIOptions} itemData\n * @param {string} rootFolderId\n * @returns {string}\n */\nfunction getDataTransferItemId(\n    itemData: DataTransferItem | UploadDataTransferItemWithAPIOptions,\n    rootFolderId: string,\n): string {\n    const item = getDataTransferItem(itemData);\n    const { name } = getEntryFromDataTransferItem(item);\n    if (!doesDataTransferItemContainAPIOptions(itemData)) {\n        return name;\n    }\n\n    const { folderId = rootFolderId, uploadInitTimestamp = Date.now() } = getDataTransferItemAPIOptions(itemData);\n\n    return `${name}_${folderId}_${uploadInitTimestamp}`;\n}\n\n/**\n * Multiput uploads require the use of crypto, which is only supported in secure contexts.\n * Multiput uploads is not supported on mobile iOS Safari.\n */\nfunction isMultiputSupported(): boolean {\n    const cryptoObj = window.crypto || window.msCrypto;\n\n    if (Browser.isMobileSafari()) {\n        return false;\n    }\n\n    return window.location.protocol === 'https:' && cryptoObj && cryptoObj.subtle;\n}\n\nexport {\n    DEFAULT_API_OPTIONS,\n    doesDataTransferItemContainAPIOptions,\n    doesFileContainAPIOptions,\n    getBoundedExpBackoffRetryDelay,\n    getDataTransferItem,\n    getDataTransferItemAPIOptions,\n    getDataTransferItemId,\n    getEntryFromDataTransferItem,\n    getFile,\n    getFileAPIOptions,\n    getFileFromDataTransferItem,\n    getPackageFileFromDataTransferItem,\n    getFileFromEntry,\n    getFileId,\n    getFileLastModifiedAsISONoMSIfPossible,\n    isDataTransferItemAFolder,\n    isDataTransferItemAPackage,\n    isMultiputSupported,\n    toISOStringNoMS,\n    tryParseJson,\n};\n"],"mappings":"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","ignoreList":[]}