{"version":3,"file":"fuzzySearch.js","names":["fuzzySearch","search","content","minCharacters","maxGaps","uniformContent","toLowerCase","replace","uniformSearch","contentLength","length","searchLength","matched","totalScore","i","searchIndex","currentScore","subScore","j","maxGroups","Math","min","minScore","max","floor"],"sources":["../../src/utils/fuzzySearch.js"],"sourcesContent":["/**\n * @flow\n * @file Fuzzy search utility\n * @author Box\n *\n\n/**\n * Fuzzy search helper to match a term against a piece of content.\n * Matches all characters in search string to content in the order they appear.\n * Requires all characters to be matched in order to return true.\n * Internal scoring rewards sequences of characters found in the content very highly.\n * Also has a minimum scoring check the uses the passed maxGaps to approximate how many breaks in the\n * search string are allowed to be present in the content while still considering it to be a match.\n *\n * @param {string} search User input search string\n * @param {string} content Content to search over for matches\n * @param {number} minCharacters Minimum number of search characters before matching anything, default 3\n * @param {number} maxGaps Approximate maximum number of gaps in the search string to tune fuzzyness, default 2\n * @returns {boolean} If a match is found\n */\nconst fuzzySearch = (search: string, content: ?string, minCharacters: number = 3, maxGaps: number = 2): boolean => {\n    if (!content) {\n        return false;\n    }\n    const uniformContent = content.toLowerCase().replace(/\\s/g, '');\n    const uniformSearch = search.toLowerCase().replace(/\\s/g, '');\n    const contentLength = uniformContent.length;\n    const searchLength = uniformSearch.length;\n    if (searchLength < minCharacters || searchLength > contentLength) {\n        return false;\n    }\n    let matched = false;\n    let totalScore = 0;\n    for (let i = 0; i < contentLength; i += 1) {\n        if (contentLength - i < searchLength) {\n            break;\n        }\n        let searchIndex = 0;\n        let currentScore = 0;\n        let subScore = 0;\n        for (let j = i; j < contentLength; j += 1) {\n            if (uniformContent[j] === uniformSearch[searchIndex]) {\n                searchIndex += 1;\n                // For streaks of matched characters score should increase exponentially\n                currentScore += 1 + currentScore;\n            } else {\n                currentScore = 0;\n            }\n            subScore += currentScore;\n        }\n        if (searchIndex !== searchLength) {\n            break;\n        }\n        if (subScore > totalScore) {\n            totalScore = subScore;\n        }\n    }\n    if (totalScore > 0) {\n        const maxGroups = Math.min(maxGaps, searchLength);\n        // minScore is calculated as a near-worst-case score given an even distribution of gaps\n        // since the algorithm rewards streak of characters breaking them up evenly is the worst case\n        // minimum score should also be better than just each character individually\n        const minScore = Math.max(maxGroups * 2 ** Math.floor(searchLength / maxGroups - 1), searchLength + 1);\n        matched = totalScore >= minScore;\n    }\n    return matched;\n};\n\nexport default fuzzySearch;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMA,WAAW,GAAGA,CAACC,MAAc,EAAEC,OAAgB,EAAEC,aAAqB,GAAG,CAAC,EAAEC,OAAe,GAAG,CAAC,KAAc;EAC/G,IAAI,CAACF,OAAO,EAAE;IACV,OAAO,KAAK;EAChB;EACA,MAAMG,cAAc,GAAGH,OAAO,CAACI,WAAW,CAAC,CAAC,CAACC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC;EAC/D,MAAMC,aAAa,GAAGP,MAAM,CAACK,WAAW,CAAC,CAAC,CAACC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC;EAC7D,MAAME,aAAa,GAAGJ,cAAc,CAACK,MAAM;EAC3C,MAAMC,YAAY,GAAGH,aAAa,CAACE,MAAM;EACzC,IAAIC,YAAY,GAAGR,aAAa,IAAIQ,YAAY,GAAGF,aAAa,EAAE;IAC9D,OAAO,KAAK;EAChB;EACA,IAAIG,OAAO,GAAG,KAAK;EACnB,IAAIC,UAAU,GAAG,CAAC;EAClB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,aAAa,EAAEK,CAAC,IAAI,CAAC,EAAE;IACvC,IAAIL,aAAa,GAAGK,CAAC,GAAGH,YAAY,EAAE;MAClC;IACJ;IACA,IAAII,WAAW,GAAG,CAAC;IACnB,IAAIC,YAAY,GAAG,CAAC;IACpB,IAAIC,QAAQ,GAAG,CAAC;IAChB,KAAK,IAAIC,CAAC,GAAGJ,CAAC,EAAEI,CAAC,GAAGT,aAAa,EAAES,CAAC,IAAI,CAAC,EAAE;MACvC,IAAIb,cAAc,CAACa,CAAC,CAAC,KAAKV,aAAa,CAACO,WAAW,CAAC,EAAE;QAClDA,WAAW,IAAI,CAAC;QAChB;QACAC,YAAY,IAAI,CAAC,GAAGA,YAAY;MACpC,CAAC,MAAM;QACHA,YAAY,GAAG,CAAC;MACpB;MACAC,QAAQ,IAAID,YAAY;IAC5B;IACA,IAAID,WAAW,KAAKJ,YAAY,EAAE;MAC9B;IACJ;IACA,IAAIM,QAAQ,GAAGJ,UAAU,EAAE;MACvBA,UAAU,GAAGI,QAAQ;IACzB;EACJ;EACA,IAAIJ,UAAU,GAAG,CAAC,EAAE;IAChB,MAAMM,SAAS,GAAGC,IAAI,CAACC,GAAG,CAACjB,OAAO,EAAEO,YAAY,CAAC;IACjD;IACA;IACA;IACA,MAAMW,QAAQ,GAAGF,IAAI,CAACG,GAAG,CAACJ,SAAS,GAAG,CAAC,IAAIC,IAAI,CAACI,KAAK,CAACb,YAAY,GAAGQ,SAAS,GAAG,CAAC,CAAC,EAAER,YAAY,GAAG,CAAC,CAAC;IACtGC,OAAO,GAAGC,UAAU,IAAIS,QAAQ;EACpC;EACA,OAAOV,OAAO;AAClB,CAAC;AAED,eAAeZ,WAAW","ignoreList":[]}