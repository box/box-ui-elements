{"version":3,"file":"size.js","names":["size","value","kilo","decimals","sizes","exp","Math","floor","log","parseFloat","toFixed"],"sources":["../../src/utils/size.ts"],"sourcesContent":["/**\n * Gets the size in words\n *\n * @param {number} value in bytes\n * @return {string} size in words\n */\nexport default function size(value?: number): string {\n    if (!value) return '0 Byte';\n    const kilo: number = 1024;\n    const decimals: number = 2;\n    const sizes: string[] = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB'];\n    const exp: number = Math.floor(Math.log(value) / Math.log(kilo));\n    return `${parseFloat((value / kilo ** exp).toFixed(decimals))} ${sizes[exp]}`;\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASA,IAAIA,CAACC,KAAc,EAAU;EACjD,IAAI,CAACA,KAAK,EAAE,OAAO,QAAQ;EAC3B,MAAMC,IAAY,GAAG,IAAI;EACzB,MAAMC,QAAgB,GAAG,CAAC;EAC1B,MAAMC,KAAe,GAAG,CAAC,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC;EAC/D,MAAMC,GAAW,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,GAAG,CAACP,KAAK,CAAC,GAAGK,IAAI,CAACE,GAAG,CAACN,IAAI,CAAC,CAAC;EAChE,OAAO,GAAGO,UAAU,CAAC,CAACR,KAAK,GAAGC,IAAI,IAAIG,GAAG,EAAEK,OAAO,CAACP,QAAQ,CAAC,CAAC,IAAIC,KAAK,CAACC,GAAG,CAAC,EAAE;AACjF","ignoreList":[]}