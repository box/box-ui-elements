{"version":3,"file":"MetadataSidebarRedesign.js","names":["React","useCallback","useEffect","useRef","useState","flow","FormattedMessage","useIntl","withRouter","InlineError","LoadingIndicator","AddMetadataTemplateDropdown","AutofillContextProvider","FilterInstancesDropdown","MetadataEmptyState","MetadataInstanceList","SidebarContent","withAPIContext","withErrorBoundary","withLogger","useFeatureEnabled","ORIGIN_METADATA_SIDEBAR_REDESIGN","SIDEBAR_VIEW_METADATA","ERROR_CODE_METADATA_STRUCTURED_TEXT_REP","EVENT_JS_READY","mark","useSidebarMetadataFetcher","STATUS","messages","MetadataInstanceEditor","convertTemplateToTemplateInstance","isExtensionSupportedForMetadataSuggestions","metadataTaxonomyFetcher","metadataTaxonomyNodeAncestorsFetcher","useMetadataSidebarFilteredTemplates","MARK_NAME_JS_READY","MetadataSidebarRedesign","api","elementId","fileExtension","fileId","filteredTemplateIds","history","onError","onSuccess","isFeatureEnabled","createSessionRequest","getStructuredTextRep","clearExtractError","extractSuggestions","file","handleCreateMetadataInstance","handleDeleteMetadataInstance","handleUpdateMetadataInstance","templates","extractErrorCode","errorMessage","status","templateInstances","formatMessage","isBoxAiSuggestionsEnabled","isBetaLanguageEnabled","isMetadataMultiLevelTaxonomyFieldEnabled","isAdvancedExtractAgentEnabled","isDeleteConfirmationModalCheckboxEnabled","isSessionInitiated","isLargeFile","setIsLargeFile","editingTemplate","setEditingTemplate","isUnsavedChangesModalOpen","setIsUnsavedChangesModalOpen","isDeleteButtonDisabled","setIsDeleteButtonDisabled","appliedTemplateInstances","setAppliedTemplateInstances","pendingTemplateToEdit","setPendingTemplateToEdit","shouldFetchStructuredTextRep","toLowerCase","options","token","then","read","catch","error","isEditingTemplateAlreadyExisting","some","t","templateKey","scope","length","handleTemplateSelect","selectedTemplate","handleCancel","handleDiscardUnsavedChanges","handleDeleteInstance","metadataInstance","isExistingMetadataInstance","find","templateInstance","id","handleSubmit","values","operations","metadata","visibleTemplateInstances","filter","hidden","isSuccess","SUCCESS","isLoading","LOADING","isViewMode","showEmptyState","showList","areAiSuggestionsAvailable","extension","metadataDropdown","createElement","availableTemplates","selectedTemplates","onSelect","handleSetFilteredTemplates","filteredTemplates","templateInstancesList","filterDropdown","appliedTemplates","setSelectedTemplates","errorMessageDisplay","ERROR","className","taxonomyOptionsFetcher","fieldKey","level","taxonomyNodeFetcher","taxonomyKey","nodeID","current","items","is_large_file","actions","sidebarView","title","sidebarMetadataTitle","subheader","loading","isBoxAiSuggestionsFeatureEnabled","fetchSuggestions","isAiSuggestionsFeatureEnabled","errorCode","onCancel","onDelete","onDiscardUnsavedChanges","onSubmit","template","onEdit","MetadataSidebarRedesignComponent"],"sources":["../../../src/elements/content-sidebar/MetadataSidebarRedesign.tsx"],"sourcesContent":["/**\n * @file Redesigned Metadata sidebar component\n * @author Box\n */\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\nimport flow from 'lodash/flow';\nimport { FormattedMessage, useIntl } from 'react-intl';\nimport { withRouter, RouteComponentProps } from 'react-router-dom';\nimport { InlineError, LoadingIndicator } from '@box/blueprint-web';\nimport {\n    AddMetadataTemplateDropdown,\n    AutofillContextProvider,\n    FilterInstancesDropdown,\n    MetadataEmptyState,\n    MetadataInstanceList,\n    type FormValues,\n    type JSONPatchOperations,\n    type MetadataTemplate,\n    type MetadataTemplateInstance,\n} from '@box/metadata-editor';\nimport { TreeQueryInput } from '@box/combobox-with-api';\n\nimport API from '../../api';\nimport SidebarContent from './SidebarContent';\nimport { withAPIContext } from '../common/api-context';\nimport { withErrorBoundary } from '../common/error-boundary';\nimport { withLogger } from '../common/logger';\nimport { useFeatureEnabled } from '../common/feature-checking';\nimport {\n    ORIGIN_METADATA_SIDEBAR_REDESIGN,\n    SIDEBAR_VIEW_METADATA,\n    ERROR_CODE_METADATA_STRUCTURED_TEXT_REP,\n} from '../../constants';\nimport { EVENT_JS_READY } from '../common/logger/constants';\nimport { mark } from '../../utils/performance';\nimport useSidebarMetadataFetcher, { STATUS } from './hooks/useSidebarMetadataFetcher';\n\nimport { type WithLoggerProps } from '../../common/types/logging';\n\nimport messages from '../common/messages';\nimport './MetadataSidebarRedesign.scss';\nimport MetadataInstanceEditor from './MetadataInstanceEditor';\nimport { convertTemplateToTemplateInstance } from './utils/convertTemplateToTemplateInstance';\nimport { isExtensionSupportedForMetadataSuggestions } from './utils/isExtensionSupportedForMetadataSuggestions';\nimport { metadataTaxonomyFetcher, metadataTaxonomyNodeAncestorsFetcher } from './fetchers/metadataTaxonomyFetcher';\nimport { useMetadataSidebarFilteredTemplates } from './hooks/useMetadataSidebarFilteredTemplates';\n\nconst MARK_NAME_JS_READY = `${ORIGIN_METADATA_SIDEBAR_REDESIGN}_${EVENT_JS_READY}`;\n\nmark(MARK_NAME_JS_READY);\n\nexport interface ExternalProps {\n    isFeatureEnabled: boolean;\n    getStructuredTextRep?: (fileId: string, accessToken: string) => Promise<string>;\n}\n\ninterface PropsWithoutContext extends ExternalProps {\n    elementId: string;\n    fileExtension?: string;\n    fileId: string;\n    filteredTemplateIds?: string[];\n    hasSidebarInitialized?: boolean;\n}\n\nexport interface ErrorContextProps {\n    onError: (error: Error, code: string, contextInfo?: Record<string, unknown>) => void;\n}\n\nexport interface SuccessContextProps {\n    onSuccess: (code: string, showNotification: boolean) => void;\n}\n\nexport interface MetadataSidebarRedesignProps\n    extends PropsWithoutContext,\n        ErrorContextProps,\n        SuccessContextProps,\n        WithLoggerProps,\n        RouteComponentProps {\n    api: API;\n    createSessionRequest?: (\n        payload: Record<string, unknown>,\n        fileId: string,\n    ) => Promise<{ metadata: { is_large_file: boolean } }>;\n}\n\nfunction MetadataSidebarRedesign({\n    api,\n    elementId,\n    fileExtension,\n    fileId,\n    filteredTemplateIds = [],\n    history,\n    onError,\n    onSuccess,\n    isFeatureEnabled,\n    createSessionRequest,\n    getStructuredTextRep,\n}: MetadataSidebarRedesignProps) {\n    const {\n        clearExtractError,\n        extractSuggestions,\n        file,\n        handleCreateMetadataInstance,\n        handleDeleteMetadataInstance,\n        handleUpdateMetadataInstance,\n        templates,\n        extractErrorCode,\n        errorMessage,\n        status,\n        templateInstances,\n    } = useSidebarMetadataFetcher(api, fileId, onError, onSuccess, isFeatureEnabled);\n\n    const { formatMessage } = useIntl();\n    const isBoxAiSuggestionsEnabled: boolean = useFeatureEnabled('metadata.aiSuggestions.enabled');\n    const isBetaLanguageEnabled: boolean = useFeatureEnabled('metadata.betaLanguage.enabled');\n    const isMetadataMultiLevelTaxonomyFieldEnabled: boolean = useFeatureEnabled('metadata.multilevelTaxonomy.enabled');\n    const isAdvancedExtractAgentEnabled: boolean = useFeatureEnabled('metadata.extractAdvancedAgents.enabled');\n    const isDeleteConfirmationModalCheckboxEnabled: boolean = useFeatureEnabled(\n        'metadata.deleteConfirmationModalCheckbox.enabled',\n    );\n    const isSessionInitiated = useRef(false);\n\n    const [isLargeFile, setIsLargeFile] = useState<boolean>(false);\n\n    const [editingTemplate, setEditingTemplate] = useState<MetadataTemplateInstance | null>(null);\n    const [isUnsavedChangesModalOpen, setIsUnsavedChangesModalOpen] = useState<boolean>(false);\n    const [isDeleteButtonDisabled, setIsDeleteButtonDisabled] = useState<boolean>(false);\n    const [appliedTemplateInstances, setAppliedTemplateInstances] =\n        useState<Array<MetadataTemplateInstance | MetadataTemplate>>(templateInstances);\n    const [pendingTemplateToEdit, setPendingTemplateToEdit] = useState<MetadataTemplateInstance | null>(null);\n    const shouldFetchStructuredTextRep =\n        isBoxAiSuggestionsEnabled &&\n        fileExtension?.toLowerCase() === 'pdf' &&\n        api.options?.token &&\n        !!getStructuredTextRep;\n\n    // Fetch structured text representation for Box AI\n    useEffect(() => {\n        if (shouldFetchStructuredTextRep) {\n            api.options.token(fileId).then(({ read }) => {\n                getStructuredTextRep(fileId, read)\n                    .then()\n                    .catch(error => {\n                        onError(error, ERROR_CODE_METADATA_STRUCTURED_TEXT_REP);\n                    });\n            });\n        }\n    }, [\n        api.options,\n        fileExtension,\n        fileId,\n        getStructuredTextRep,\n        isBoxAiSuggestionsEnabled,\n        onError,\n        shouldFetchStructuredTextRep,\n    ]);\n\n    useEffect(() => {\n        // disable only pre-existing template instances from dropdown if not editing or editing pre-exiting one\n        const isEditingTemplateAlreadyExisting =\n            editingTemplate &&\n            templateInstances.some(\n                t => t.templateKey === editingTemplate.templateKey && t.scope === editingTemplate.scope,\n            );\n\n        if (!editingTemplate || isEditingTemplateAlreadyExisting) {\n            setAppliedTemplateInstances(templateInstances);\n        } else {\n            setAppliedTemplateInstances([...templateInstances, editingTemplate]);\n        }\n    }, [editingTemplate, templateInstances, templateInstances.length]);\n\n    const handleTemplateSelect = (selectedTemplate: MetadataTemplate) => {\n        clearExtractError();\n\n        if (editingTemplate) {\n            setPendingTemplateToEdit(convertTemplateToTemplateInstance(file, selectedTemplate));\n            setIsUnsavedChangesModalOpen(true);\n        } else {\n            setEditingTemplate(convertTemplateToTemplateInstance(file, selectedTemplate));\n            setIsDeleteButtonDisabled(true);\n        }\n    };\n\n    const handleCancel = () => {\n        clearExtractError();\n        setEditingTemplate(null);\n    };\n\n    const handleDiscardUnsavedChanges = () => {\n        // check if user tried to edit another template before unsaved changes modal\n        if (pendingTemplateToEdit) {\n            setEditingTemplate(pendingTemplateToEdit);\n            setIsDeleteButtonDisabled(true);\n\n            setPendingTemplateToEdit(null);\n        } else {\n            handleCancel();\n        }\n\n        setIsUnsavedChangesModalOpen(false);\n    };\n\n    const handleDeleteInstance = async (metadataInstance: MetadataTemplateInstance) => {\n        try {\n            await handleDeleteMetadataInstance(metadataInstance);\n        } catch {\n            // ignore error, handled in useSidebarMetadataFetcher\n        }\n        clearExtractError();\n        setEditingTemplate(null);\n    };\n\n    const isExistingMetadataInstance = (): boolean => {\n        return (\n            editingTemplate && !!templateInstances.find(templateInstance => templateInstance.id === editingTemplate.id)\n        );\n    };\n\n    const handleSubmit = async (values: FormValues, operations: JSONPatchOperations) => {\n        if (isExistingMetadataInstance()) {\n            await handleUpdateMetadataInstance(values.metadata as MetadataTemplateInstance, operations, () =>\n                setEditingTemplate(null),\n            );\n        } else {\n            await handleCreateMetadataInstance(values.metadata as MetadataTemplateInstance, () =>\n                setEditingTemplate(null),\n            );\n        }\n    };\n\n    const visibleTemplateInstances = templateInstances.filter(templateInstance => !templateInstance.hidden);\n\n    const isSuccess = status === STATUS.SUCCESS;\n    const isLoading = status === STATUS.LOADING;\n\n    const isViewMode = !isLoading && file && templates && templateInstances && !editingTemplate;\n    const showEmptyState = isViewMode && visibleTemplateInstances.length === 0;\n    const showList = isViewMode && visibleTemplateInstances.length > 0;\n\n    const areAiSuggestionsAvailable = isExtensionSupportedForMetadataSuggestions(file?.extension ?? '');\n\n    const metadataDropdown = isSuccess && templates && (\n        <AddMetadataTemplateDropdown\n            availableTemplates={templates}\n            selectedTemplates={appliedTemplateInstances as MetadataTemplate[]}\n            onSelect={handleTemplateSelect}\n        />\n    );\n\n    const { handleSetFilteredTemplates, filteredTemplates, templateInstancesList } =\n        useMetadataSidebarFilteredTemplates(history, filteredTemplateIds, templateInstances);\n    const filterDropdown =\n        isSuccess && isViewMode && visibleTemplateInstances.length > 1 ? (\n            <FilterInstancesDropdown\n                appliedTemplates={visibleTemplateInstances as MetadataTemplate[]}\n                selectedTemplates={filteredTemplates}\n                setSelectedTemplates={handleSetFilteredTemplates}\n            />\n        ) : null;\n\n    const errorMessageDisplay = status === STATUS.ERROR && errorMessage && (\n        <InlineError className=\"bcs-MetadataSidebarRedesign-inline-error\">\n            <FormattedMessage {...errorMessage} />\n        </InlineError>\n    );\n\n    const taxonomyOptionsFetcher = useCallback(\n        (scope: string, templateKey: string, fieldKey: string, level: number, options: TreeQueryInput) =>\n            metadataTaxonomyFetcher(api, fileId, scope, templateKey, fieldKey, level, options),\n        [api, fileId],\n    );\n\n    const taxonomyNodeFetcher = useCallback(\n        (scope: string, taxonomyKey: string, nodeID: string) =>\n            metadataTaxonomyNodeAncestorsFetcher(api, fileId, scope, taxonomyKey, nodeID),\n        [api, fileId],\n    );\n\n    useEffect(() => {\n        if (createSessionRequest && fileId && !isSessionInitiated.current) {\n            isSessionInitiated.current = true;\n            createSessionRequest({ items: [{ id: fileId }] }, fileId).then(\n                ({ metadata = { is_large_file: false } }) => {\n                    setIsLargeFile(metadata.is_large_file);\n                },\n            );\n        }\n    }, [createSessionRequest, fileId]);\n\n    return (\n        <SidebarContent\n            actions={metadataDropdown}\n            className={'bcs-MetadataSidebarRedesign'}\n            elementId={elementId}\n            sidebarView={SIDEBAR_VIEW_METADATA}\n            title={formatMessage(messages.sidebarMetadataTitle)}\n            subheader={filterDropdown}\n        >\n            <div className=\"bcs-MetadataSidebarRedesign-content\">\n                {errorMessageDisplay}\n                {isLoading && <LoadingIndicator aria-label={formatMessage(messages.loading)} />}\n                {showEmptyState && (\n                    <MetadataEmptyState level={'file'} isBoxAiSuggestionsFeatureEnabled={isBoxAiSuggestionsEnabled} />\n                )}\n                <AutofillContextProvider\n                    fetchSuggestions={extractSuggestions}\n                    isAiSuggestionsFeatureEnabled={isBoxAiSuggestionsEnabled}\n                >\n                    {editingTemplate && (\n                        <MetadataInstanceEditor\n                            areAiSuggestionsAvailable={areAiSuggestionsAvailable}\n                            errorCode={extractErrorCode}\n                            isBetaLanguageEnabled={isBetaLanguageEnabled}\n                            isBoxAiSuggestionsEnabled={isBoxAiSuggestionsEnabled}\n                            isDeleteButtonDisabled={isDeleteButtonDisabled}\n                            isDeleteConfirmationModalCheckboxEnabled={isDeleteConfirmationModalCheckboxEnabled}\n                            isLargeFile={isLargeFile}\n                            isMetadataMultiLevelTaxonomyFieldEnabled={isMetadataMultiLevelTaxonomyFieldEnabled}\n                            isUnsavedChangesModalOpen={isUnsavedChangesModalOpen}\n                            onCancel={handleCancel}\n                            onDelete={handleDeleteInstance}\n                            onDiscardUnsavedChanges={handleDiscardUnsavedChanges}\n                            onSubmit={handleSubmit}\n                            setIsUnsavedChangesModalOpen={setIsUnsavedChangesModalOpen}\n                            taxonomyOptionsFetcher={taxonomyOptionsFetcher}\n                            template={editingTemplate}\n                            isAdvancedExtractAgentEnabled={isAdvancedExtractAgentEnabled}\n                        />\n                    )}\n                    {showList && (\n                        <MetadataInstanceList\n                            areAiSuggestionsAvailable={areAiSuggestionsAvailable}\n                            isAdvancedExtractAgentEnabled={isAdvancedExtractAgentEnabled}\n                            isAiSuggestionsFeatureEnabled={isBoxAiSuggestionsEnabled}\n                            isBetaLanguageEnabled={isBetaLanguageEnabled}\n                            onEdit={templateInstance => {\n                                setEditingTemplate(templateInstance);\n                                setIsDeleteButtonDisabled(false);\n                            }}\n                            templateInstances={templateInstancesList}\n                            taxonomyNodeFetcher={taxonomyNodeFetcher}\n                        />\n                    )}\n                </AutofillContextProvider>\n            </div>\n        </SidebarContent>\n    );\n}\n\nexport { MetadataSidebarRedesign as MetadataSidebarRedesignComponent };\nexport default flow([\n    withRouter,\n    withLogger(ORIGIN_METADATA_SIDEBAR_REDESIGN),\n    withErrorBoundary(ORIGIN_METADATA_SIDEBAR_REDESIGN),\n    withAPIContext,\n])(MetadataSidebarRedesign);\n"],"mappings":"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","ignoreList":[]}