{"version":3,"file":"SkillsSidebar.js","names":["React","flow","getProp","noop","FormattedMessage","API","LoadingIndicator","messages","SidebarContent","SidebarSkills","EVENT_JS_READY","mark","withAPIContext","withErrorBoundary","withLogger","FIELD_PERMISSIONS_CAN_UPLOAD","SKILLS_TRANSCRIPT","ORIGIN_SKILLS_SIDEBAR","SIDEBAR_VIEW_SKILLS","MARK_NAME_JS_READY","SkillsSidebar","PureComponent","constructor","props","_defineProperty","errors","cards","updatePreviewTranscript","setState","getPreview","getViewer","preview","viewer","transcriptCard","find","card","skill_card_type","addListener","loadedViewer","loadAutoGeneratedCaptions","index","updatedCards","state","clone","_objectSpread","removes","adds","replaces","api","file","path","ops","canEdit","Array","isArray","forEach","replaced","replacement","idx","entries","findIndex","entry","push","op","value","deletes","removed","sort","a","b","added","length","splice","getMetadataAPI","updateSkills","onSaveSuccessHandler","onSaveErrorHandler","logger","onReadyMetric","endMarkName","componentDidMount","getSkills","fetchSkillsSuccessCallback","componentDidUpdate","refreshIdentity","prevRefreshIdentity","render","elementId","createElement","className","sidebarView","title","sidebarSkillsTitle","onSkillChange","onSave","SkillsSidebarComponent"],"sources":["../../../src/elements/content-sidebar/SkillsSidebar.js"],"sourcesContent":["/**\n * @flow\n * @file Skills sidebar component\n * @author Box\n */\n\nimport * as React from 'react';\nimport flow from 'lodash/flow';\nimport getProp from 'lodash/get';\nimport noop from 'lodash/noop';\nimport { FormattedMessage } from 'react-intl';\nimport API from '../../api';\nimport LoadingIndicator from '../../components/loading-indicator/LoadingIndicator';\nimport messages from '../common/messages';\nimport SidebarContent from './SidebarContent';\nimport SidebarSkills from './skills/SidebarSkills';\nimport { EVENT_JS_READY } from '../common/logger/constants';\nimport { mark } from '../../utils/performance';\nimport { withAPIContext } from '../common/api-context';\nimport { withErrorBoundary } from '../common/error-boundary';\nimport { withLogger } from '../common/logger';\nimport {\n    FIELD_PERMISSIONS_CAN_UPLOAD,\n    SKILLS_TRANSCRIPT,\n    ORIGIN_SKILLS_SIDEBAR,\n    SIDEBAR_VIEW_SKILLS,\n} from '../../constants';\nimport type { WithLoggerProps } from '../../common/types/logging';\nimport type { SkillCardEntry, SkillCard } from '../../common/types/skills';\nimport type { NumberBooleanMap, BoxItem } from '../../common/types/core';\nimport type { JSONPatchOperations } from '../../common/types/api';\nimport './SkillsSidebar.scss';\n\ntype PropsWithoutContext = {\n    elementId: string,\n    file: BoxItem,\n    getPreview: Function,\n    getViewer: Function,\n    hasSidebarInitialized?: boolean,\n    refreshIdentity?: boolean,\n};\n\ntype Props = {\n    api: API,\n} & PropsWithoutContext &\n    WithLoggerProps;\n\ntype State = {\n    cards?: Array<SkillCard>,\n    errors: NumberBooleanMap,\n};\n\nconst MARK_NAME_JS_READY = `${ORIGIN_SKILLS_SIDEBAR}_${EVENT_JS_READY}`;\n\nmark(MARK_NAME_JS_READY);\n\nclass SkillsSidebar extends React.PureComponent<Props, State> {\n    state: State = {\n        errors: {},\n    };\n\n    constructor(props: Props) {\n        super(props);\n        const { logger } = this.props;\n        logger.onReadyMetric({\n            endMarkName: MARK_NAME_JS_READY,\n        });\n    }\n\n    componentDidMount() {\n        const { api, file }: Props = this.props;\n        api.getMetadataAPI(false).getSkills(file, this.fetchSkillsSuccessCallback, noop);\n    }\n\n    componentDidUpdate({ refreshIdentity: prevRefreshIdentity }: Props) {\n        const { api, file, refreshIdentity }: Props = this.props;\n\n        if (refreshIdentity !== prevRefreshIdentity) {\n            api.getMetadataAPI(false).getSkills(file, this.fetchSkillsSuccessCallback, noop);\n        }\n    }\n\n    /**\n     * Handles skills fetch success\n     *\n     * @private\n     * @param {Array<SkillCard>} cards - Skills cards\n     * @return {void}\n     */\n    fetchSkillsSuccessCallback = (cards: Array<SkillCard>) => {\n        this.updatePreviewTranscript(cards);\n        this.setState({ cards });\n    };\n\n    /**\n     * Updates Preview with transcript data\n     *\n     * @private\n     * @param {Array<SkillCard>} cards - Skills cards\n     * @return {void}\n     */\n    updatePreviewTranscript = (cards: Array<SkillCard>): void => {\n        const { getPreview, getViewer } = this.props;\n        const preview = getPreview ? getPreview() : null;\n        const viewer = getViewer ? getViewer() : null;\n        const transcriptCard = cards.find(card => card.skill_card_type === SKILLS_TRANSCRIPT);\n        if (!transcriptCard || !preview) {\n            return;\n        }\n\n        if (!viewer) {\n            preview.addListener('load', ({ viewer: loadedViewer }) => {\n                if (typeof loadedViewer.loadAutoGeneratedCaptions === 'function') {\n                    loadedViewer.loadAutoGeneratedCaptions(transcriptCard);\n                }\n            });\n        } else if (typeof viewer.loadAutoGeneratedCaptions === 'function') {\n            viewer.loadAutoGeneratedCaptions(transcriptCard);\n        }\n    };\n\n    /**\n     * Success handler for save\n     *\n     * @private\n     * @param {Array} updatedCards - updated skill cards\n     * @param {number} index - index of the card being edited\n     * @return {void}\n     */\n    onSaveSuccessHandler = (index: number, updatedCards: Array<SkillCard>): void => {\n        const { errors }: State = this.state;\n        const clone = { ...errors };\n        delete clone[index];\n        this.updatePreviewTranscript(updatedCards);\n        this.setState({ cards: updatedCards, errors: clone });\n    };\n\n    /**\n     * Error handler for save\n     *\n     * @private\n     * @param {number} index - index of the card being edited\n     * @return {void}\n     */\n    onSaveErrorHandler = (index: number): void => {\n        const { errors }: State = this.state;\n        const clone = { ...errors };\n        clone[index] = true;\n        this.setState({ errors: clone });\n    };\n\n    /**\n     * Updates skill metadata\n     *\n     * @private\n     * @param {number} index - index of the card being edited\n     * @param {Array} removes - entries to remove\n     * @param {Array} adds - entries to add\n     * @param {Array} replaces - entries to replace\n     * @return {void}\n     */\n    onSave = (\n        index: number,\n        removes: Array<SkillCardEntry> = [],\n        adds: Array<SkillCardEntry> = [],\n        replaces: Array<{\n            replaced: SkillCardEntry,\n            replacement: SkillCardEntry,\n        }> = [],\n    ): void => {\n        const { api, file }: Props = this.props;\n        const { cards = [] }: State = this.state;\n        const card = cards[index];\n        const path = `/cards/${index}`;\n        const ops: JSONPatchOperations = [];\n        const canEdit = getProp(file, FIELD_PERMISSIONS_CAN_UPLOAD, false);\n\n        if (!canEdit || !card) {\n            return;\n        }\n\n        if (Array.isArray(replaces)) {\n            replaces.forEach(({ replaced, replacement }) => {\n                const idx = card.entries.findIndex(entry => entry === replaced);\n                if (idx > -1) {\n                    ops.push({\n                        op: 'replace',\n                        path: `${path}/entries/${idx}`,\n                        value: replacement,\n                    });\n                }\n            });\n        }\n\n        if (Array.isArray(removes)) {\n            const deletes = [];\n            removes.forEach(removed => {\n                const idx = card.entries.findIndex(entry => entry === removed);\n                if (idx > -1) {\n                    deletes.push(idx);\n                }\n            });\n            // To maintain metadata index positions, removes should be\n            // done is reverse order with largest index being removed first.\n            // Remove operations are atomic and don't happen in batch.\n            deletes\n                .sort((a, b) => b - a) // number sort in descending order\n                .forEach(idx => {\n                    ops.push({\n                        op: 'remove',\n                        path: `${path}/entries/${idx}`,\n                    });\n                });\n        }\n\n        if (Array.isArray(adds)) {\n            adds.forEach(added => {\n                ops.push({\n                    op: 'add',\n                    path: `${path}/entries/-`,\n                    value: added,\n                });\n            });\n        }\n\n        // If no ops, don't proceed\n        if (ops.length === 0) {\n            return;\n        }\n\n        // Add test ops before any other ops\n        ops.splice(0, 0, {\n            op: 'test',\n            path,\n            value: card,\n        });\n\n        api.getMetadataAPI(false).updateSkills(\n            file,\n            ops,\n            (updatedCards: Array<SkillCard>) => {\n                this.onSaveSuccessHandler(index, updatedCards);\n            },\n            () => {\n                this.onSaveErrorHandler(index);\n            },\n        );\n    };\n\n    render() {\n        const { file, getViewer, elementId }: Props = this.props;\n        const { cards, errors }: State = this.state;\n\n        return (\n            <SidebarContent\n                className=\"bcs-skills\"\n                elementId={elementId}\n                sidebarView={SIDEBAR_VIEW_SKILLS}\n                title={<FormattedMessage {...messages.sidebarSkillsTitle} />}\n            >\n                {cards ? (\n                    <SidebarSkills\n                        cards={cards}\n                        errors={errors}\n                        file={file}\n                        getViewer={getViewer}\n                        onSkillChange={this.onSave}\n                    />\n                ) : (\n                    <LoadingIndicator />\n                )}\n            </SidebarContent>\n        );\n    }\n}\n\nexport { SkillsSidebar as SkillsSidebarComponent };\nexport default flow([withLogger(ORIGIN_SKILLS_SIDEBAR), withErrorBoundary(ORIGIN_SKILLS_SIDEBAR), withAPIContext])(\n    SkillsSidebar,\n);\n"],"mappings":";;;;;AAAA;AACA;AACA;AACA;AACA;;AAEA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,OAAOC,IAAI,MAAM,aAAa;AAC9B,OAAOC,OAAO,MAAM,YAAY;AAChC,OAAOC,IAAI,MAAM,aAAa;AAC9B,SAASC,gBAAgB,QAAQ,YAAY;AAC7C,OAAOC,GAAG,MAAM,WAAW;AAC3B,OAAOC,gBAAgB,MAAM,qDAAqD;AAClF,OAAOC,QAAQ,MAAM,oBAAoB;AACzC,OAAOC,cAAc,MAAM,kBAAkB;AAC7C,OAAOC,aAAa,MAAM,wBAAwB;AAClD,SAASC,cAAc,QAAQ,4BAA4B;AAC3D,SAASC,IAAI,QAAQ,yBAAyB;AAC9C,SAASC,cAAc,QAAQ,uBAAuB;AACtD,SAASC,iBAAiB,QAAQ,0BAA0B;AAC5D,SAASC,UAAU,QAAQ,kBAAkB;AAC7C,SACIC,4BAA4B,EAC5BC,iBAAiB,EACjBC,qBAAqB,EACrBC,mBAAmB,QAChB,iBAAiB;AAKxB,OAAO,sBAAsB;AAqB7B,MAAMC,kBAAkB,GAAG,GAAGF,qBAAqB,IAAIP,cAAc,EAAE;AAEvEC,IAAI,CAACQ,kBAAkB,CAAC;AAExB,MAAMC,aAAa,SAASpB,KAAK,CAACqB,aAAa,CAAe;EAK1DC,WAAWA,CAACC,KAAY,EAAE;IACtB,KAAK,CAACA,KAAK,CAAC;IAACC,eAAA,gBALF;MACXC,MAAM,EAAE,CAAC;IACb,CAAC;IAuBD;AACJ;AACA;AACA;AACA;AACA;AACA;IANID,eAAA,qCAO8BE,KAAuB,IAAK;MACtD,IAAI,CAACC,uBAAuB,CAACD,KAAK,CAAC;MACnC,IAAI,CAACE,QAAQ,CAAC;QAAEF;MAAM,CAAC,CAAC;IAC5B,CAAC;IAED;AACJ;AACA;AACA;AACA;AACA;AACA;IANIF,eAAA,kCAO2BE,KAAuB,IAAW;MACzD,MAAM;QAAEG,UAAU;QAAEC;MAAU,CAAC,GAAG,IAAI,CAACP,KAAK;MAC5C,MAAMQ,OAAO,GAAGF,UAAU,GAAGA,UAAU,CAAC,CAAC,GAAG,IAAI;MAChD,MAAMG,MAAM,GAAGF,SAAS,GAAGA,SAAS,CAAC,CAAC,GAAG,IAAI;MAC7C,MAAMG,cAAc,GAAGP,KAAK,CAACQ,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACC,eAAe,KAAKpB,iBAAiB,CAAC;MACrF,IAAI,CAACiB,cAAc,IAAI,CAACF,OAAO,EAAE;QAC7B;MACJ;MAEA,IAAI,CAACC,MAAM,EAAE;QACTD,OAAO,CAACM,WAAW,CAAC,MAAM,EAAE,CAAC;UAAEL,MAAM,EAAEM;QAAa,CAAC,KAAK;UACtD,IAAI,OAAOA,YAAY,CAACC,yBAAyB,KAAK,UAAU,EAAE;YAC9DD,YAAY,CAACC,yBAAyB,CAACN,cAAc,CAAC;UAC1D;QACJ,CAAC,CAAC;MACN,CAAC,MAAM,IAAI,OAAOD,MAAM,CAACO,yBAAyB,KAAK,UAAU,EAAE;QAC/DP,MAAM,CAACO,yBAAyB,CAACN,cAAc,CAAC;MACpD;IACJ,CAAC;IAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;IAPIT,eAAA,+BAQuB,CAACgB,KAAa,EAAEC,YAA8B,KAAW;MAC5E,MAAM;QAAEhB;MAAc,CAAC,GAAG,IAAI,CAACiB,KAAK;MACpC,MAAMC,KAAK,GAAAC,aAAA,KAAQnB,MAAM,CAAE;MAC3B,OAAOkB,KAAK,CAACH,KAAK,CAAC;MACnB,IAAI,CAACb,uBAAuB,CAACc,YAAY,CAAC;MAC1C,IAAI,CAACb,QAAQ,CAAC;QAAEF,KAAK,EAAEe,YAAY;QAAEhB,MAAM,EAAEkB;MAAM,CAAC,CAAC;IACzD,CAAC;IAED;AACJ;AACA;AACA;AACA;AACA;AACA;IANInB,eAAA,6BAOsBgB,KAAa,IAAW;MAC1C,MAAM;QAAEf;MAAc,CAAC,GAAG,IAAI,CAACiB,KAAK;MACpC,MAAMC,KAAK,GAAAC,aAAA,KAAQnB,MAAM,CAAE;MAC3BkB,KAAK,CAACH,KAAK,CAAC,GAAG,IAAI;MACnB,IAAI,CAACZ,QAAQ,CAAC;QAAEH,MAAM,EAAEkB;MAAM,CAAC,CAAC;IACpC,CAAC;IAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IATInB,eAAA,iBAUS,CACLgB,KAAa,EACbK,OAA8B,GAAG,EAAE,EACnCC,IAA2B,GAAG,EAAE,EAChCC,QAGE,GAAG,EAAE,KACA;MACP,MAAM;QAAEC,GAAG;QAAEC;MAAY,CAAC,GAAG,IAAI,CAAC1B,KAAK;MACvC,MAAM;QAAEG,KAAK,GAAG;MAAU,CAAC,GAAG,IAAI,CAACgB,KAAK;MACxC,MAAMP,IAAI,GAAGT,KAAK,CAACc,KAAK,CAAC;MACzB,MAAMU,IAAI,GAAG,UAAUV,KAAK,EAAE;MAC9B,MAAMW,GAAwB,GAAG,EAAE;MACnC,MAAMC,OAAO,GAAGlD,OAAO,CAAC+C,IAAI,EAAElC,4BAA4B,EAAE,KAAK,CAAC;MAElE,IAAI,CAACqC,OAAO,IAAI,CAACjB,IAAI,EAAE;QACnB;MACJ;MAEA,IAAIkB,KAAK,CAACC,OAAO,CAACP,QAAQ,CAAC,EAAE;QACzBA,QAAQ,CAACQ,OAAO,CAAC,CAAC;UAAEC,QAAQ;UAAEC;QAAY,CAAC,KAAK;UAC5C,MAAMC,GAAG,GAAGvB,IAAI,CAACwB,OAAO,CAACC,SAAS,CAACC,KAAK,IAAIA,KAAK,KAAKL,QAAQ,CAAC;UAC/D,IAAIE,GAAG,GAAG,CAAC,CAAC,EAAE;YACVP,GAAG,CAACW,IAAI,CAAC;cACLC,EAAE,EAAE,SAAS;cACbb,IAAI,EAAE,GAAGA,IAAI,YAAYQ,GAAG,EAAE;cAC9BM,KAAK,EAAEP;YACX,CAAC,CAAC;UACN;QACJ,CAAC,CAAC;MACN;MAEA,IAAIJ,KAAK,CAACC,OAAO,CAACT,OAAO,CAAC,EAAE;QACxB,MAAMoB,OAAO,GAAG,EAAE;QAClBpB,OAAO,CAACU,OAAO,CAACW,OAAO,IAAI;UACvB,MAAMR,GAAG,GAAGvB,IAAI,CAACwB,OAAO,CAACC,SAAS,CAACC,KAAK,IAAIA,KAAK,KAAKK,OAAO,CAAC;UAC9D,IAAIR,GAAG,GAAG,CAAC,CAAC,EAAE;YACVO,OAAO,CAACH,IAAI,CAACJ,GAAG,CAAC;UACrB;QACJ,CAAC,CAAC;QACF;QACA;QACA;QACAO,OAAO,CACFE,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKA,CAAC,GAAGD,CAAC,CAAC,CAAC;QAAA,CACtBb,OAAO,CAACG,GAAG,IAAI;UACZP,GAAG,CAACW,IAAI,CAAC;YACLC,EAAE,EAAE,QAAQ;YACZb,IAAI,EAAE,GAAGA,IAAI,YAAYQ,GAAG;UAChC,CAAC,CAAC;QACN,CAAC,CAAC;MACV;MAEA,IAAIL,KAAK,CAACC,OAAO,CAACR,IAAI,CAAC,EAAE;QACrBA,IAAI,CAACS,OAAO,CAACe,KAAK,IAAI;UAClBnB,GAAG,CAACW,IAAI,CAAC;YACLC,EAAE,EAAE,KAAK;YACTb,IAAI,EAAE,GAAGA,IAAI,YAAY;YACzBc,KAAK,EAAEM;UACX,CAAC,CAAC;QACN,CAAC,CAAC;MACN;;MAEA;MACA,IAAInB,GAAG,CAACoB,MAAM,KAAK,CAAC,EAAE;QAClB;MACJ;;MAEA;MACApB,GAAG,CAACqB,MAAM,CAAC,CAAC,EAAE,CAAC,EAAE;QACbT,EAAE,EAAE,MAAM;QACVb,IAAI;QACJc,KAAK,EAAE7B;MACX,CAAC,CAAC;MAEFa,GAAG,CAACyB,cAAc,CAAC,KAAK,CAAC,CAACC,YAAY,CAClCzB,IAAI,EACJE,GAAG,EACFV,YAA8B,IAAK;QAChC,IAAI,CAACkC,oBAAoB,CAACnC,KAAK,EAAEC,YAAY,CAAC;MAClD,CAAC,EACD,MAAM;QACF,IAAI,CAACmC,kBAAkB,CAACpC,KAAK,CAAC;MAClC,CACJ,CAAC;IACL,CAAC;IAxLG,MAAM;MAAEqC;IAAO,CAAC,GAAG,IAAI,CAACtD,KAAK;IAC7BsD,MAAM,CAACC,aAAa,CAAC;MACjBC,WAAW,EAAE5D;IACjB,CAAC,CAAC;EACN;EAEA6D,iBAAiBA,CAAA,EAAG;IAChB,MAAM;MAAEhC,GAAG;MAAEC;IAAY,CAAC,GAAG,IAAI,CAAC1B,KAAK;IACvCyB,GAAG,CAACyB,cAAc,CAAC,KAAK,CAAC,CAACQ,SAAS,CAAChC,IAAI,EAAE,IAAI,CAACiC,0BAA0B,EAAE/E,IAAI,CAAC;EACpF;EAEAgF,kBAAkBA,CAAC;IAAEC,eAAe,EAAEC;EAA2B,CAAC,EAAE;IAChE,MAAM;MAAErC,GAAG;MAAEC,IAAI;MAAEmC;IAAuB,CAAC,GAAG,IAAI,CAAC7D,KAAK;IAExD,IAAI6D,eAAe,KAAKC,mBAAmB,EAAE;MACzCrC,GAAG,CAACyB,cAAc,CAAC,KAAK,CAAC,CAACQ,SAAS,CAAChC,IAAI,EAAE,IAAI,CAACiC,0BAA0B,EAAE/E,IAAI,CAAC;IACpF;EACJ;EAyKAmF,MAAMA,CAAA,EAAG;IACL,MAAM;MAAErC,IAAI;MAAEnB,SAAS;MAAEyD;IAAiB,CAAC,GAAG,IAAI,CAAChE,KAAK;IACxD,MAAM;MAAEG,KAAK;MAAED;IAAc,CAAC,GAAG,IAAI,CAACiB,KAAK;IAE3C,oBACI1C,KAAA,CAAAwF,aAAA,CAAChF,cAAc;MACXiF,SAAS,EAAC,YAAY;MACtBF,SAAS,EAAEA,SAAU;MACrBG,WAAW,EAAExE,mBAAoB;MACjCyE,KAAK,eAAE3F,KAAA,CAAAwF,aAAA,CAACpF,gBAAgB,EAAKG,QAAQ,CAACqF,kBAAqB;IAAE,GAE5DlE,KAAK,gBACF1B,KAAA,CAAAwF,aAAA,CAAC/E,aAAa;MACViB,KAAK,EAAEA,KAAM;MACbD,MAAM,EAAEA,MAAO;MACfwB,IAAI,EAAEA,IAAK;MACXnB,SAAS,EAAEA,SAAU;MACrB+D,aAAa,EAAE,IAAI,CAACC;IAAO,CAC9B,CAAC,gBAEF9F,KAAA,CAAAwF,aAAA,CAAClF,gBAAgB,MAAE,CAEX,CAAC;EAEzB;AACJ;AAEA,SAASc,aAAa,IAAI2E,sBAAsB;AAChD,eAAe9F,IAAI,CAAC,CAACa,UAAU,CAACG,qBAAqB,CAAC,EAAEJ,iBAAiB,CAACI,qBAAqB,CAAC,EAAEL,cAAc,CAAC,CAAC,CAC9GQ,aACJ,CAAC","ignoreList":[]}