{"version":3,"file":"useRepliesAPI.js","names":["APIFactory","useRepliesAPI","annotationId","api","errorCallback","fileId","filePermissions","createReply","message","requestId","successCallback","getAnnotationsAPI","createAnnotationReply","bind","deleteReply","id","permissions","getThreadedCommentsAPI","deleteComment","commentId","editReply","updateComment"],"sources":["../../../../../src/elements/content-sidebar/activity-feed/annotation-thread/useRepliesAPI.js"],"sourcesContent":["// @flow\nimport APIFactory from '../../../../api';\n\nimport type { BoxItemPermission } from '../../../../common/types/core';\nimport type { BoxCommentPermission, Comment } from '../../../../common/types/feed';\nimport type { ElementsXhrError } from '../../../../common/types/api';\n\ntype Props = {\n    annotationId?: string,\n    api: APIFactory,\n    errorCallback: (replyId: string, error: ElementsXhrError | Error, code: string) => void,\n    fileId: string,\n    filePermissions: BoxItemPermission,\n};\n\nconst useRepliesAPI = ({ annotationId, api, errorCallback, fileId, filePermissions }: Props) => {\n    const createReply = ({\n        message,\n        requestId,\n        successCallback,\n    }: {\n        message: string,\n        requestId: string,\n        successCallback: (comment: Comment) => void,\n    }) => {\n        if (!annotationId) {\n            return;\n        }\n        api.getAnnotationsAPI(false).createAnnotationReply(\n            fileId,\n            annotationId,\n            filePermissions,\n            message,\n            successCallback,\n            errorCallback.bind(null, requestId),\n        );\n    };\n\n    const deleteReply = ({\n        id,\n        permissions,\n        successCallback,\n    }: {\n        id: string,\n        permissions: BoxCommentPermission,\n        successCallback: () => void,\n    }) => {\n        api.getThreadedCommentsAPI(false).deleteComment({\n            fileId,\n            commentId: id,\n            permissions,\n            successCallback,\n            errorCallback: errorCallback.bind(null, id),\n        });\n    };\n\n    const editReply = ({\n        id,\n        message,\n        permissions,\n        successCallback,\n    }: {\n        id: string,\n        message: string,\n        permissions: BoxCommentPermission,\n        successCallback: (comment: Comment) => void,\n    }) => {\n        api.getThreadedCommentsAPI(false).updateComment({\n            fileId,\n            commentId: id,\n            message,\n            permissions,\n            successCallback,\n            errorCallback: errorCallback.bind(null, id),\n        });\n    };\n\n    return { createReply, deleteReply, editReply };\n};\n\nexport default useRepliesAPI;\n"],"mappings":"AACA,OAAOA,UAAU,MAAM,iBAAiB;AAcxC,MAAMC,aAAa,GAAGA,CAAC;EAAEC,YAAY;EAAEC,GAAG;EAAEC,aAAa;EAAEC,MAAM;EAAEC;AAAuB,CAAC,KAAK;EAC5F,MAAMC,WAAW,GAAGA,CAAC;IACjBC,OAAO;IACPC,SAAS;IACTC;EAKJ,CAAC,KAAK;IACF,IAAI,CAACR,YAAY,EAAE;MACf;IACJ;IACAC,GAAG,CAACQ,iBAAiB,CAAC,KAAK,CAAC,CAACC,qBAAqB,CAC9CP,MAAM,EACNH,YAAY,EACZI,eAAe,EACfE,OAAO,EACPE,eAAe,EACfN,aAAa,CAACS,IAAI,CAAC,IAAI,EAAEJ,SAAS,CACtC,CAAC;EACL,CAAC;EAED,MAAMK,WAAW,GAAGA,CAAC;IACjBC,EAAE;IACFC,WAAW;IACXN;EAKJ,CAAC,KAAK;IACFP,GAAG,CAACc,sBAAsB,CAAC,KAAK,CAAC,CAACC,aAAa,CAAC;MAC5Cb,MAAM;MACNc,SAAS,EAAEJ,EAAE;MACbC,WAAW;MACXN,eAAe;MACfN,aAAa,EAAEA,aAAa,CAACS,IAAI,CAAC,IAAI,EAAEE,EAAE;IAC9C,CAAC,CAAC;EACN,CAAC;EAED,MAAMK,SAAS,GAAGA,CAAC;IACfL,EAAE;IACFP,OAAO;IACPQ,WAAW;IACXN;EAMJ,CAAC,KAAK;IACFP,GAAG,CAACc,sBAAsB,CAAC,KAAK,CAAC,CAACI,aAAa,CAAC;MAC5ChB,MAAM;MACNc,SAAS,EAAEJ,EAAE;MACbP,OAAO;MACPQ,WAAW;MACXN,eAAe;MACfN,aAAa,EAAEA,aAAa,CAACS,IAAI,CAAC,IAAI,EAAEE,EAAE;IAC9C,CAAC,CAAC;EACN,CAAC;EAED,OAAO;IAAER,WAAW;IAAEO,WAAW;IAAEM;EAAU,CAAC;AAClD,CAAC;AAED,eAAenB,aAAa","ignoreList":[]}