{"version":3,"file":"ActivityMessage.js","names":["React","noop","FormattedMessage","injectIntl","CollapsableMessage","LoadingIndicator","LoadingIndicatorSize","ShowOriginalButton","TranslateButton","formatTaggedMessage","renderTimestampWithText","withFeatureConsumer","isFeatureEnabled","messages","ActivityMessage","Component","constructor","args","_defineProperty","isLoading","isTranslation","event","id","tagged_message","onTranslate","translatedTaggedMessage","props","setState","preventDefault","componentDidUpdate","prevProps","translationFailed","prevTaggedMessage","prevTranslationFailed","getButton","button","createElement","handleShowOriginal","handleTranslate","render","features","getUserProfileUrl","intl","isEdited","onClick","annotationsMillisecondTimestamp","translationEnabled","state","commentToDisplay","MessageWrapper","Fragment","className","size","SMALL","activityMessageEdited"],"sources":["../../../../../../src/elements/content-sidebar/activity-feed/common/activity-message/ActivityMessage.tsx"],"sourcesContent":["import * as React from 'react';\nimport noop from 'lodash/noop';\nimport { FormattedMessage, injectIntl, WrappedComponentProps } from 'react-intl';\n\nimport CollapsableMessage from './CollapsableMessage';\nimport LoadingIndicator, { LoadingIndicatorSize } from '../../../../../components/loading-indicator';\nimport ShowOriginalButton from './ShowOriginalButton';\nimport TranslateButton from './TranslateButton';\n\nimport formatTaggedMessage, { renderTimestampWithText } from '../../utils/formatTaggedMessage';\nimport { withFeatureConsumer, isFeatureEnabled } from '../../../../common/feature-checking';\n\nimport messages from './messages';\n\nimport type { GetProfileUrlCallback } from '../../../../common/flowTypes';\nimport type { FeatureConfig } from '../../../../common/feature-checking';\n\nimport './ActivityMessage.scss';\n\nexport interface ActivityMessageProps extends WrappedComponentProps {\n    features: FeatureConfig;\n    getUserProfileUrl?: GetProfileUrlCallback;\n    id: string;\n    isEdited?: boolean;\n    onClick?: () => void;\n    onTranslate?: ({ id, tagged_message }: { id: string; tagged_message: string }) => void;\n    tagged_message: string;\n    translatedTaggedMessage?: string;\n    translationEnabled?: boolean;\n    translationFailed?: boolean | null;\n    annotationsMillisecondTimestamp?: string | null;\n}\n\ntype State = {\n    isLoading?: boolean;\n    isTranslation?: boolean;\n};\n\nclass ActivityMessage extends React.Component<ActivityMessageProps, State> {\n    static readonly defaultProps = {\n        isEdited: false,\n        translationEnabled: false,\n    };\n\n    state = {\n        isLoading: false,\n        isTranslation: false,\n    };\n\n    componentDidUpdate(prevProps: ActivityMessageProps): void {\n        const { translatedTaggedMessage, translationFailed } = this.props;\n        const { translatedTaggedMessage: prevTaggedMessage, translationFailed: prevTranslationFailed } = prevProps;\n\n        if (prevTaggedMessage === translatedTaggedMessage || prevTranslationFailed === translationFailed) {\n            return;\n        }\n\n        if (translatedTaggedMessage || translationFailed) {\n            this.setState({ isLoading: false });\n        }\n    }\n\n    getButton(isTranslation?: boolean): React.ReactNode {\n        let button = null;\n        if (isTranslation) {\n            button = <ShowOriginalButton handleShowOriginal={this.handleShowOriginal} />;\n        } else {\n            button = <TranslateButton handleTranslate={this.handleTranslate} />;\n        }\n\n        return button;\n    }\n\n    handleTranslate = (event: React.MouseEvent): void => {\n        const { id, tagged_message, onTranslate = noop, translatedTaggedMessage } = this.props;\n        if (!translatedTaggedMessage) {\n            this.setState({ isLoading: true });\n            onTranslate({ id, tagged_message });\n        }\n\n        this.setState({ isTranslation: true });\n        event.preventDefault();\n    };\n\n    handleShowOriginal = (event: React.MouseEvent): void => {\n        this.setState({ isTranslation: false });\n        event.preventDefault();\n    };\n\n    render(): React.ReactNode {\n        const {\n            features,\n            getUserProfileUrl,\n            id,\n            intl,\n            isEdited,\n            onClick = noop,\n            annotationsMillisecondTimestamp,\n            tagged_message,\n            translatedTaggedMessage,\n            translationEnabled,\n        } = this.props;\n        const { isLoading, isTranslation } = this.state;\n        const commentToDisplay =\n            translationEnabled && isTranslation && translatedTaggedMessage ? translatedTaggedMessage : tagged_message;\n        const MessageWrapper = isFeatureEnabled(features, 'activityFeed.collapsableMessages.enabled')\n            ? CollapsableMessage\n            : React.Fragment;\n\n        return isLoading ? (\n            <div className=\"bcs-ActivityMessageLoading\">\n                <LoadingIndicator size={LoadingIndicatorSize.SMALL} />\n            </div>\n        ) : (\n            <div className=\"bcs-ActivityMessage\">\n                <MessageWrapper>\n                    {annotationsMillisecondTimestamp\n                        ? renderTimestampWithText(\n                              annotationsMillisecondTimestamp,\n                              onClick,\n                              intl,\n                              ` ${commentToDisplay}`,\n                          )\n                        : formatTaggedMessage(commentToDisplay, id, false, getUserProfileUrl, intl)}\n                    {isEdited && (\n                        <span className=\"bcs-ActivityMessage-edited\">\n                            <FormattedMessage {...messages.activityMessageEdited} />\n                        </span>\n                    )}\n                </MessageWrapper>\n                {translationEnabled ? this.getButton(isTranslation) : null}\n            </div>\n        );\n    }\n}\n\nexport { ActivityMessage };\nexport default withFeatureConsumer(injectIntl(ActivityMessage));\n"],"mappings":"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","ignoreList":[]}