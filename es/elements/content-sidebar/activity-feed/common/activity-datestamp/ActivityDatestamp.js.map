{"version":3,"file":"ActivityDatestamp.js","names":["React","ReadableTime","MILLISECONDS_PER_YEAR","ActivityDatestamp","_ref","date","rest","_objectWithoutProperties","_excluded","now","Date","getTime","dateInMs","showTime","createElement","_extends","timestamp","alwaysShowTime","relativeThreshold"],"sources":["../../../../../../src/elements/content-sidebar/activity-feed/common/activity-datestamp/ActivityDatestamp.tsx"],"sourcesContent":["import * as React from 'react';\nimport { IntlConfig } from 'react-intl';\n// @ts-ignore flow import\nimport ReadableTime from '../../../../../components/time/ReadableTime';\n\nexport const MILLISECONDS_PER_YEAR = 365 * 24 * 60 * 60 * 1000; // 365 days * 24 hours * 60 minutes * 60 seconds * 1000 milliseconds\n\n// TODO: duplicated ReadableTime props until it migrates to typescript\ntype ReadableTimeProps = {\n    allowFutureTimestamps?: boolean;\n    alwaysShowTime?: boolean;\n    intl: IntlConfig;\n    relativeThreshold?: number;\n    showWeekday?: boolean;\n    timestamp: number;\n    uppercase?: boolean;\n};\n\nexport type Props = {\n    date: string | Date | number;\n} & Partial<ReadableTimeProps>;\n\nconst ActivityDatestamp = ({ date, ...rest }: Props) => {\n    const now = new Date().getTime();\n    const dateInMs = new Date(date).getTime();\n    // Only show time if activity time is within the last year\n    const showTime = now - dateInMs < MILLISECONDS_PER_YEAR;\n    return <ReadableTime timestamp={dateInMs} alwaysShowTime={showTime} relativeThreshold={0} {...rest} />;\n};\n\nexport default ActivityDatestamp;\n"],"mappings":";;;;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAE9B;AACA,OAAOC,YAAY,MAAM,6CAA6C;AAEtE,OAAO,MAAMC,qBAAqB,GAAG,GAAG,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC;;AAEhE;;AAeA,MAAMC,iBAAiB,GAAGC,IAAA,IAA8B;EAAA,IAA7B;MAAEC;IAAqB,CAAC,GAAAD,IAAA;IAAbE,IAAI,GAAAC,wBAAA,CAAAH,IAAA,EAAAI,SAAA;EACtC,MAAMC,GAAG,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC;EAChC,MAAMC,QAAQ,GAAG,IAAIF,IAAI,CAACL,IAAI,CAAC,CAACM,OAAO,CAAC,CAAC;EACzC;EACA,MAAME,QAAQ,GAAGJ,GAAG,GAAGG,QAAQ,GAAGV,qBAAqB;EACvD,oBAAOF,KAAA,CAAAc,aAAA,CAACb,YAAY,EAAAc,QAAA;IAACC,SAAS,EAAEJ,QAAS;IAACK,cAAc,EAAEJ,QAAS;IAACK,iBAAiB,EAAE;EAAE,GAAKZ,IAAI,CAAG,CAAC;AAC1G,CAAC;AAED,eAAeH,iBAAiB","ignoreList":[]}