{"version":3,"file":"TaskForm.js","names":["React","noop","getProp","isEmpty","classNames","FormattedMessage","injectIntl","commonMessages","messages","commentFormMessages","Form","ModalActions","ContactDatalistItem","TextArea","DatePicker","Checkbox","PillSelectorDropdown","Button","FeatureFlag","PrimaryButton","TASK_COMPLETION_RULE_ANY","TASK_COMPLETION_RULE_ALL","TASK_EDIT_MODE_CREATE","TASK_EDIT_MODE_EDIT","ACTIVITY_TARGETS","INTERACTION_TARGET","TaskError","convertAssigneesToSelectorItems","approvers","map","target","newSelectorItem","id","name","item","value","text","TaskForm","Component","constructor","args","_defineProperty","getInitialFormState","only","invalidSubmitValidityState","setState","state","intl","props","message","approverTextInput","assigneeFieldMissingError","code","formatMessage","requiredFieldError","assigneeFieldInvalidError","invalidUserError","messageFieldError","taskDueDateError","invalidDateError","formValidityState","taskAssignees","length","taskName","taskDueDate","isValid","Object","values","every","val","_objectSpread","fieldName","validateForm","undefined","onSubmitSuccess","clearForm","isLoading","e","onSubmitError","taskType","editMode","dueDate","addedAssignees","getAddedAssignees","removedAssignees","getRemovedAssignees","filter","assignee","type","getTime","currentApprovers","approverIds","approver","currentApprover","indexOf","currentApproverIds","createTask","editTask","completionRule","dueDateString","toISOString","completion_rule","description","due_at","handleSubmitSuccess","handleSubmitError","date","dateValue","Date","setHours","event","checked","getApproverWithQuery","pills","concat","pill","role","status","permissions","can_delete","can_update","option","index","splice","persist","currentTarget","onCancel","render","approverSelectorContacts","className","error","isDisabled","inputContainerClassNames","isCreateEditMode","selectedApprovers","approverOptions","find","pillSelectorOverlayClasses","scrollable","submitButtonMessage","tasksAddTaskFormSubmitLabel","tasksEditTaskFormSubmitLabel","shouldShowCompletionRule","isCompletionRuleCheckboxDisabled","isCompletionRuleCheckboxChecked","isForbiddenErrorOnEdit","createElement","onInvalidSubmit","handleInvalidSubmit","onValidSubmit","handleValidSubmit","getErrorByFieldname","disabled","inputProps","isRequired","label","tasksAddTaskFormSelectAssigneesLabel","onBlur","onInput","handleApproverSelectorInput","onRemove","handleApproverSelectorRemove","onSelect","handleApproverSelectorSelect","placeholder","approvalAddAssignee","selectedOptions","selectorOptions","shouldSetActiveItemOnOpen","shouldClearUnmatchedInput","validateForError","key","subtitle","taskCreateGroupLabel","email","Fragment","feature","isChecked","taskAnyCheckboxLabel","tooltip","taskAnyInfoGroupTooltip","onChange","handleCompletionRuleChange","not","taskAnyInfoTooltip","tasksAddTaskFormMessageLabel","handleChangeMessage","commentWrite","errorTooltipPosition","TASK_DATE_PICKER","isAccessible","isKeyboardInputAllowed","tasksAddTaskFormDueDateLabel","minDate","handleDueDateChange","approvalSelectDate","_extends","APPROVAL_FORM_CANCEL","onClick","handleCancelClick","addResinInfo","tasksAddTaskFormCancelLabel","APPROVAL_FORM_POST","TaskFormUnwrapped"],"sources":["../../../../../src/elements/content-sidebar/activity-feed/task-form/TaskForm.js"],"sourcesContent":["/**\n * @flow\n * @file Component for Approval comment form\n */\n\nimport * as React from 'react';\nimport noop from 'lodash/noop';\nimport getProp from 'lodash/get';\nimport isEmpty from 'lodash/isEmpty';\nimport classNames from 'classnames';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport type { IntlShape } from 'react-intl';\nimport commonMessages from '../../../../common/messages';\nimport messages from './messages';\nimport commentFormMessages from '../comment-form/messages';\nimport Form from '../../../../components/form-elements/form/Form';\nimport ModalActions from '../../../../components/modal/ModalActions';\nimport ContactDatalistItem from '../../../../components/contact-datalist-item/ContactDatalistItem';\nimport TextArea from '../../../../components/text-area';\nimport DatePicker from '../../../../components/date-picker/DatePicker';\nimport Checkbox from '../../../../components/checkbox';\nimport PillSelectorDropdown from '../../../../components/pill-selector-dropdown/PillSelectorDropdown';\nimport Button from '../../../../components/button/Button';\nimport { FeatureFlag } from '../../../common/feature-checking';\nimport PrimaryButton from '../../../../components/primary-button/PrimaryButton';\nimport {\n    TASK_COMPLETION_RULE_ANY,\n    TASK_COMPLETION_RULE_ALL,\n    TASK_EDIT_MODE_CREATE,\n    TASK_EDIT_MODE_EDIT,\n} from '../../../../constants';\nimport { ACTIVITY_TARGETS, INTERACTION_TARGET } from '../../../common/interactionTargets';\nimport type {\n    TaskCompletionRule,\n    TaskCollabAssignee,\n    TaskType,\n    TaskEditMode,\n    TaskUpdatePayload,\n} from '../../../../common/types/tasks';\nimport TaskError from './TaskError';\nimport type { GetAvatarUrlCallback } from '../../../common/flowTypes';\nimport type { ElementsXhrError } from '../../../../common/types/api';\nimport type { SelectorItems, SelectorItem, UserMini, GroupMini } from '../../../../common/types/core';\n\nimport './TaskForm.scss';\n\ntype TaskFormProps = {|\n    error?: { status: number }, // TODO: update to ElementsXhrError once API supports it\n    isDisabled?: boolean,\n    onCancel: () => any,\n    onSubmitError: (e: ElementsXhrError) => any,\n    onSubmitSuccess: () => any,\n    taskType: TaskType,\n|};\n\ntype TaskFormFieldProps = {|\n    approvers: Array<TaskCollabAssignee>,\n    completionRule: TaskCompletionRule,\n    dueDate?: ?string,\n    id: string,\n    message: string,\n|};\n\ntype TaskFormConsumerProps = {|\n    ...TaskFormFieldProps,\n    approverSelectorContacts: SelectorItems<UserMini | GroupMini>,\n    className?: string,\n    createTask: (\n        text: string,\n        approvers: SelectorItems<>,\n        taskType: TaskType,\n        dueDate: ?string,\n        completionRule: TaskCompletionRule,\n        onSuccess: ?Function,\n        onError: ?Function,\n    ) => any,\n    editMode?: TaskEditMode,\n    editTask?: (task: TaskUpdatePayload, onSuccess: ?Function, onError: ?Function) => any,\n    getApproverWithQuery?: Function,\n    getAvatarUrl: GetAvatarUrlCallback,\n|};\n\ntype Props = TaskFormProps & TaskFormConsumerProps & { intl: IntlShape };\n\ntype TaskFormFieldName = 'taskName' | 'taskAssignees' | 'taskDueDate';\n\ntype TaskFormInvalidSubmitState = { [key: TaskFormFieldName]: ?{ validityState: ?{ patternMismatch: boolean } } };\n\ntype State = {|\n    approverTextInput: string, // partial text input value for approver field before autocomplete/select\n    approvers: Array<TaskCollabAssignee>,\n    completionRule: TaskCompletionRule,\n    dueDate?: ?Date,\n    formValidityState: { [key: TaskFormFieldName]: ?{ code: string, message: string } },\n    id: string,\n    isLoading: boolean,\n    isValid: ?boolean,\n    message: string,\n|};\n\nfunction convertAssigneesToSelectorItems(approvers: Array<TaskCollabAssignee>): SelectorItems<> {\n    return approvers.map(({ target }) => {\n        const newSelectorItem: SelectorItem<UserMini | GroupMini> = {\n            id: target.id,\n            name: target.name,\n            item: target,\n            value: target.id,\n            text: target.name, // for PillSelectorDropdown SelectorOptions type\n        };\n\n        return newSelectorItem;\n    });\n}\n\nclass TaskForm extends React.Component<Props, State> {\n    static defaultProps = {\n        approvers: [],\n        approverSelectorContacts: [],\n        editMode: TASK_EDIT_MODE_CREATE,\n        id: '',\n        message: '',\n    };\n\n    state = this.getInitialFormState();\n\n    getInitialFormState() {\n        const { dueDate, id, message, approvers, completionRule } = this.props;\n        return {\n            id,\n            completionRule: completionRule || TASK_COMPLETION_RULE_ALL,\n            approvers,\n            approverTextInput: '',\n            dueDate: dueDate ? new Date(dueDate) : null,\n            formValidityState: {},\n            message,\n            isLoading: false,\n            isValid: null,\n        };\n    }\n\n    validateForm = (only?: TaskFormFieldName, invalidSubmitValidityState?: ?TaskFormInvalidSubmitState) => {\n        this.setState(state => {\n            const { intl } = this.props;\n            const { approvers, message, approverTextInput } = state;\n            const assigneeFieldMissingError = {\n                code: 'required',\n                message: intl.formatMessage(commonMessages.requiredFieldError),\n            };\n            const assigneeFieldInvalidError = {\n                code: 'invalid',\n                message: intl.formatMessage(commonMessages.invalidUserError),\n            };\n            const messageFieldError = {\n                code: 'required',\n                message: intl.formatMessage(commonMessages.requiredFieldError),\n            };\n            const taskDueDateError = {\n                code: 'invalid',\n                message: intl.formatMessage(commonMessages.invalidDateError),\n            };\n            const formValidityState = {\n                taskAssignees:\n                    (approverTextInput.length ? assigneeFieldInvalidError : null) ||\n                    (approvers.length ? null : assigneeFieldMissingError),\n                taskName: message ? null : messageFieldError,\n                taskDueDate: getProp(invalidSubmitValidityState, 'taskDueDate.validityState.patternMismatch')\n                    ? taskDueDateError\n                    : null,\n            };\n            const isValid = Object.values(formValidityState).every(val => val == null);\n            return {\n                isValid,\n                formValidityState: only\n                    ? { ...state.formValidityState, [only]: formValidityState[only] }\n                    : formValidityState,\n            };\n        });\n    };\n\n    getErrorByFieldname = (fieldName: TaskFormFieldName) => {\n        const { formValidityState } = this.state;\n        return formValidityState[fieldName] ? formValidityState[fieldName].message : null;\n    };\n\n    clearForm = () => this.setState(this.getInitialFormState());\n\n    handleInvalidSubmit = (invalidSubmitValidityState?: ?TaskFormInvalidSubmitState) => {\n        if (!isEmpty(invalidSubmitValidityState)) {\n            this.validateForm(undefined, invalidSubmitValidityState);\n        } else {\n            this.validateForm();\n        }\n    };\n\n    handleSubmitSuccess = () => {\n        const { onSubmitSuccess } = this.props;\n        if (onSubmitSuccess) {\n            onSubmitSuccess();\n        }\n\n        this.clearForm();\n        this.setState({ isLoading: false });\n    };\n\n    handleSubmitError = (e: ElementsXhrError) => {\n        const { onSubmitError } = this.props;\n        onSubmitError(e);\n        this.setState({ isLoading: false });\n    };\n\n    addResinInfo = (): Object => {\n        const { id, taskType, editMode } = this.props;\n        const { dueDate } = this.state;\n        const addedAssignees = this.getAddedAssignees();\n        const removedAssignees = this.getRemovedAssignees();\n\n        return {\n            'data-resin-taskid': id,\n            'data-resin-tasktype': taskType,\n            'data-resin-isediting': editMode === TASK_EDIT_MODE_EDIT,\n            'data-resin-numassigneesadded': addedAssignees.filter(assignee => assignee.target.type === 'user').length,\n            'data-resin-numgroupssadded': addedAssignees.filter(assignee => assignee.target.type === 'group').length,\n            'data-resin-numassigneesremoved': removedAssignees.length,\n            'data-resin-assigneesadded': addedAssignees.map(assignee => assignee.target.id),\n            'data-resin-assigneesremoved': removedAssignees.map(assignee => assignee.target.id),\n            'data-resin-duedate': dueDate && dueDate.getTime(),\n        };\n    };\n\n    getAddedAssignees = (): Array<TaskCollabAssignee> => {\n        // Added assignees are the ones in state that weren't in the prop\n        const { approvers } = this.props;\n        const { approvers: currentApprovers } = this.state;\n        const approverIds = approvers.map(approver => approver.id);\n        return currentApprovers.filter(currentApprover => approverIds.indexOf(currentApprover.id) === -1);\n    };\n\n    getRemovedAssignees = (): Array<TaskCollabAssignee> => {\n        // Assignees to remove are the ones in the prop that cannot be found in state\n        const { approvers } = this.props;\n        const { approvers: currentApprovers } = this.state;\n        const currentApproverIds = currentApprovers.map(currentApprover => currentApprover.id);\n        return approvers.filter(approver => currentApproverIds.indexOf(approver.id) === -1);\n    };\n\n    handleValidSubmit = (): void => {\n        const { id, createTask, editTask, editMode, taskType } = this.props;\n        const { message, approvers: currentApprovers, dueDate, completionRule, isValid } = this.state;\n        const dueDateString = dueDate && dueDate.toISOString();\n\n        if (!isValid) return;\n\n        this.setState({ isLoading: true });\n\n        if (editMode === TASK_EDIT_MODE_EDIT && editTask) {\n            editTask(\n                {\n                    id,\n                    completion_rule: completionRule,\n                    description: message,\n                    due_at: dueDateString,\n                    addedAssignees: convertAssigneesToSelectorItems(this.getAddedAssignees()),\n                    removedAssignees: this.getRemovedAssignees(),\n                },\n                this.handleSubmitSuccess,\n                this.handleSubmitError,\n            );\n        } else {\n            createTask(\n                message,\n                convertAssigneesToSelectorItems(currentApprovers),\n                taskType,\n                dueDateString,\n                completionRule,\n                this.handleSubmitSuccess,\n                this.handleSubmitError,\n            );\n        }\n    };\n\n    handleDueDateChange = (date: ?string): void => {\n        let dateValue = null;\n        if (date) {\n            dateValue = new Date(date);\n            // The date given to us is midnight of the date selected.\n            // Modify date to be the end of day (minus 1 millisecond) for the given due date\n            dateValue.setHours(23, 59, 59, 999);\n        }\n        this.setState({ dueDate: dateValue });\n        this.validateForm('taskDueDate');\n    };\n\n    handleCompletionRuleChange = (event: SyntheticInputEvent<HTMLInputElement>) => {\n        this.setState({ completionRule: event.target.checked ? TASK_COMPLETION_RULE_ANY : TASK_COMPLETION_RULE_ALL });\n    };\n\n    handleApproverSelectorInput = (value: any): void => {\n        const { getApproverWithQuery = noop } = this.props;\n        this.setState({ approverTextInput: value });\n        getApproverWithQuery(value);\n    };\n\n    handleApproverSelectorSelect = (pills: Array<any>): void => {\n        this.setState({\n            approvers: this.state.approvers.concat(\n                pills.map(pill => {\n                    return {\n                        id: '',\n                        target: pill.item,\n                        role: 'ASSIGNEE',\n                        type: 'task_collaborator',\n                        status: 'NOT_STARTED',\n                        permissions: { can_delete: false, can_update: false },\n                    };\n                }),\n            ),\n            approverTextInput: '',\n        });\n\n        this.validateForm('taskAssignees');\n    };\n\n    handleApproverSelectorRemove = (option: any, index: number): void => {\n        const approvers = [...this.state.approvers];\n        approvers.splice(index, 1);\n        this.setState({ approvers });\n        this.validateForm('taskAssignees');\n    };\n\n    handleChangeMessage = (e: SyntheticInputEvent<HTMLTextAreaElement>) => {\n        e.persist();\n        this.setState({ message: e.currentTarget.value });\n        this.validateForm('taskName');\n    };\n\n    handleCancelClick = () => {\n        this.props.onCancel();\n    };\n\n    render() {\n        const { approverSelectorContacts, className, error, isDisabled, intl, editMode, taskType } = this.props;\n        const { dueDate, approvers, message, formValidityState, isLoading, completionRule } = this.state;\n        const inputContainerClassNames = classNames('bcs-task-input-container', 'bcs-task-input-is-open', className);\n        const isCreateEditMode = editMode === TASK_EDIT_MODE_CREATE;\n        const selectedApprovers = convertAssigneesToSelectorItems(approvers);\n\n        // filter out selected approvers\n        // map to datalist item format\n        const approverOptions = approverSelectorContacts.filter(\n            ({ id }) => !selectedApprovers.find(({ value }) => value === id),\n        );\n\n        const pillSelectorOverlayClasses = classNames({\n            scrollable: approverOptions.length > 4,\n        });\n\n        const submitButtonMessage = isCreateEditMode\n            ? messages.tasksAddTaskFormSubmitLabel\n            : messages.tasksEditTaskFormSubmitLabel;\n        const shouldShowCompletionRule = approvers.length > 0;\n\n        // Enable checkbox when there is a group or multiple users being assigned\n        // TODO: consider setting contants for assignee types to src/constants.js\n        // - move from src/features/collaborator-avatars/constants.js\n        const isCompletionRuleCheckboxDisabled =\n            approvers.filter(approver => approver.target.type === 'group').length <= 0 &&\n            approvers.filter(approver => approver.target.type === 'user').length <= 1;\n\n        const isCompletionRuleCheckboxChecked = completionRule === TASK_COMPLETION_RULE_ANY;\n        const isForbiddenErrorOnEdit = isLoading || (getProp(error, 'status') === 403 && !isCreateEditMode);\n\n        return (\n            <div className={inputContainerClassNames} data-resin-component=\"taskform\">\n                <div className=\"bcs-task-input-form-container\">\n                    <TaskError editMode={editMode} error={error} taskType={taskType} />\n                    <Form\n                        formValidityState={formValidityState}\n                        onInvalidSubmit={this.handleInvalidSubmit}\n                        onValidSubmit={this.handleValidSubmit}\n                    >\n                        <PillSelectorDropdown\n                            className={pillSelectorOverlayClasses}\n                            error={this.getErrorByFieldname('taskAssignees')}\n                            disabled={isForbiddenErrorOnEdit}\n                            inputProps={{\n                                'data-testid': 'task-form-assignee-input',\n                                'data-target-id': 'PillSelectorDropdown-selectAssigneesInput',\n                            }}\n                            isRequired\n                            label={<FormattedMessage {...messages.tasksAddTaskFormSelectAssigneesLabel} />}\n                            name=\"taskAssignees\"\n                            onBlur={() => this.validateForm('taskAssignees')}\n                            onInput={this.handleApproverSelectorInput}\n                            onRemove={this.handleApproverSelectorRemove}\n                            onSelect={this.handleApproverSelectorSelect}\n                            placeholder={intl.formatMessage(commentFormMessages.approvalAddAssignee)}\n                            selectedOptions={selectedApprovers}\n                            selectorOptions={approverOptions}\n                            shouldSetActiveItemOnOpen\n                            shouldClearUnmatchedInput\n                            validateForError={() => this.validateForm('taskAssignees')}\n                        >\n                            {approverOptions.map(({ id, name, item = {} }) => (\n                                <ContactDatalistItem\n                                    key={id}\n                                    data-testid=\"task-assignee-option\"\n                                    name={name}\n                                    subtitle={\n                                        item.type === 'group' ? (\n                                            <FormattedMessage {...messages.taskCreateGroupLabel} />\n                                        ) : (\n                                            item.email\n                                        )\n                                    }\n                                />\n                            ))}\n                        </PillSelectorDropdown>\n\n                        {shouldShowCompletionRule && (\n                            <>\n                                <FeatureFlag feature=\"activityFeed.tasks.assignToGroup\">\n                                    <Checkbox\n                                        data-testid=\"task-form-completion-rule-checkbox-group\"\n                                        isChecked={isCompletionRuleCheckboxChecked}\n                                        isDisabled={isCompletionRuleCheckboxDisabled || isForbiddenErrorOnEdit}\n                                        label={<FormattedMessage {...messages.taskAnyCheckboxLabel} />}\n                                        tooltip={intl.formatMessage(messages.taskAnyInfoGroupTooltip)}\n                                        name=\"completionRule\"\n                                        onChange={this.handleCompletionRuleChange}\n                                    />\n                                </FeatureFlag>\n                                <FeatureFlag not feature=\"activityFeed.tasks.assignToGroup\">\n                                    <Checkbox\n                                        data-testid=\"task-form-completion-rule-checkbox\"\n                                        isChecked={isCompletionRuleCheckboxChecked}\n                                        isDisabled={isCompletionRuleCheckboxDisabled || isForbiddenErrorOnEdit}\n                                        label={<FormattedMessage {...messages.taskAnyCheckboxLabel} />}\n                                        tooltip={intl.formatMessage(messages.taskAnyInfoTooltip)}\n                                        name=\"completionRule\"\n                                        onChange={this.handleCompletionRuleChange}\n                                    />\n                                </FeatureFlag>\n                            </>\n                        )}\n\n                        <TextArea\n                            className=\"bcs-task-name-input\"\n                            data-testid=\"task-form-name-input\"\n                            data-target-id=\"TextArea-messageInput\"\n                            disabled={isDisabled || isForbiddenErrorOnEdit}\n                            error={this.getErrorByFieldname('taskName')}\n                            isRequired\n                            label={<FormattedMessage {...messages.tasksAddTaskFormMessageLabel} />}\n                            name=\"taskName\"\n                            onBlur={() => this.validateForm('taskName')}\n                            onChange={this.handleChangeMessage}\n                            placeholder={intl.formatMessage(commentFormMessages.commentWrite)}\n                            value={message}\n                        />\n                        <DatePicker\n                            className=\"bcs-task-add-due-date-input\"\n                            error={this.getErrorByFieldname('taskDueDate')}\n                            errorTooltipPosition=\"bottom-right\"\n                            inputProps={{\n                                [INTERACTION_TARGET]: ACTIVITY_TARGETS.TASK_DATE_PICKER,\n                                'data-testid': 'task-form-date-input',\n                                'data-target-id': 'DatePicker-dateInput',\n                            }}\n                            isAccessible\n                            isDisabled={isForbiddenErrorOnEdit}\n                            isKeyboardInputAllowed\n                            isRequired={false}\n                            label={<FormattedMessage {...messages.tasksAddTaskFormDueDateLabel} />}\n                            minDate={new Date()}\n                            name=\"taskDueDate\"\n                            onChange={this.handleDueDateChange}\n                            placeholder={intl.formatMessage(commentFormMessages.approvalSelectDate)}\n                            value={dueDate || undefined}\n                        />\n                        <ModalActions>\n                            <Button\n                                className=\"bcs-task-input-cancel-btn\"\n                                data-resin-target={ACTIVITY_TARGETS.APPROVAL_FORM_CANCEL}\n                                data-testid=\"task-form-cancel-button\"\n                                data-target-id=\"Button-cancelButton\"\n                                onClick={this.handleCancelClick}\n                                isDisabled={isLoading}\n                                type=\"button\"\n                                {...this.addResinInfo()}\n                            >\n                                <FormattedMessage {...messages.tasksAddTaskFormCancelLabel} />\n                            </Button>\n                            <PrimaryButton\n                                className=\"bcs-task-input-submit-btn\"\n                                data-resin-target={ACTIVITY_TARGETS.APPROVAL_FORM_POST}\n                                data-testid=\"task-form-submit-button\"\n                                data-target-id=\"PrimaryButton-submitButton\"\n                                isDisabled={isForbiddenErrorOnEdit}\n                                isLoading={isLoading}\n                                {...this.addResinInfo()}\n                            >\n                                <FormattedMessage {...submitButtonMessage} />\n                            </PrimaryButton>\n                        </ModalActions>\n                    </Form>\n                </div>\n            </div>\n        );\n    }\n}\n\n// For testing only\nexport { TaskForm as TaskFormUnwrapped };\nexport type { TaskFormConsumerProps as TaskFormProps };\n\nexport default injectIntl(TaskForm);\n"],"mappings":"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","ignoreList":[]}