{"version":3,"file":"Task.js","names":["React","noop","flow","get","FormattedMessage","classNames","TetherComponent","withFeatureConsumer","getFeatureConfig","withAPIContext","Avatar","Media","MenuItem","ActivityCard","ActivityError","ActivityMessage","ActivityTimestamp","DeleteConfirmation","IconTaskApproval","IconTaskGeneral","IconTrash","IconPencil","UserLink","API","TASK_COMPLETION_RULE_ALL","TASK_NEW_APPROVED","TASK_NEW_REJECTED","TASK_NEW_NOT_STARTED","TASK_NEW_IN_PROGRESS","TASK_NEW_COMPLETED","TASK_TYPE_APPROVAL","PLACEHOLDER_USER","TASK_EDIT_MODE_EDIT","ACTIVITY_TARGETS","bdlGray80","TaskActions","TaskCompletionRuleIcon","TaskDueDate","TaskStatus","AssigneeList","TaskModal","TaskMultiFileIcon","commonMessages","messages","Task","Component","constructor","args","_defineProperty","loadCollabError","undefined","assignedToFull","props","assigned_to","modalError","isEditing","isLoading","isAssigneeListOpen","isConfirmingDelete","getAllTaskCollaborators","setState","id","onDelete","permissions","onModalClose","error","onSuccess","api","task_links","errorOccured","taskCollaboratorLoadErrorMessage","next_marker","fileId","getTaskCollaboratorsAPI","getTaskCollaborators","task","file","errorCallback","message","title","successCallback","taskId","assignmentId","taskStatus","onAssignmentUpdate","render","approverSelectorContacts","completion_rule","created_at","created_by","currentUser","due_at","features","getApproverWithQuery","getAvatarUrl","getUserProfileUrl","isPending","description","onEdit","onView","status","task_type","translatedTaggedMessage","translations","state","inlineError","assignments","entries","currentUserAssignment","find","target","createdByUser","createdAtTimestamp","Date","getTime","isTaskCompleted","isCreator","isMultiFile","length","shouldShowActions","can_update","TaskTypeIcon","createElement","approvalTaskAnnotationIconTitle","generalTaskAnnotationIconTitle","isMenuVisible","can_delete","className","Figure","badgeIcon","user","Body","attachment","constraints","to","targetAttachment","renderTarget","ref","style","display","Menu","isDisabled","menuProps","TASK_OPTIONS","TASK_OPTIONS_EDIT","onClick","handleEditClick","color","taskEditMenuItem","TASK_OPTIONS_DELETE","handleDeleteClick","taskDeleteMenuItem","renderElement","isOpen","taskDeletePrompt","onDeleteCancel","handleDeleteCancel","onDeleteConfirm","handleDeleteConfirm","name","_extends","PROFILE","priorCollaborator","date","completionRule","dueDate","tagged_message","translationFailed","onCollapse","handleAssigneeListCollapse","onExpand","handleAssigneeListExpand","initialAssigneeCount","users","taskType","onTaskApproval","handleTaskAction","onTaskReject","onTaskComplete","onTaskView","editMode","feedbackUrl","onSubmitError","handleEditSubmitError","onSubmitSuccess","handleEditModalClose","isTaskFormOpen","taskFormProps","approvers","createTask","editTask","TaskComponent"],"sources":["../../../../../src/elements/content-sidebar/activity-feed/task-new/Task.js"],"sourcesContent":["// @flow\nimport * as React from 'react';\nimport noop from 'lodash/noop';\nimport flow from 'lodash/flow';\nimport get from 'lodash/get';\nimport { FormattedMessage } from 'react-intl';\nimport classNames from 'classnames';\nimport TetherComponent from 'react-tether';\nimport { withFeatureConsumer, getFeatureConfig } from '../../../common/feature-checking';\nimport { withAPIContext } from '../../../common/api-context';\nimport Avatar from '../Avatar';\nimport Media from '../../../../components/media';\nimport { MenuItem } from '../../../../components/menu';\nimport ActivityCard from '../ActivityCard';\nimport ActivityError from '../common/activity-error';\nimport ActivityMessage from '../common/activity-message';\nimport ActivityTimestamp from '../common/activity-timestamp';\nimport DeleteConfirmation from '../common/delete-confirmation';\nimport IconTaskApproval from '../../../../icons/two-toned/IconTaskApproval';\nimport IconTaskGeneral from '../../../../icons/two-toned/IconTaskGeneral';\nimport IconTrash from '../../../../icons/general/IconTrash';\nimport IconPencil from '../../../../icons/general/IconPencil';\nimport UserLink from '../common/user-link';\nimport API from '../../../../api/APIFactory';\nimport {\n    TASK_COMPLETION_RULE_ALL,\n    TASK_NEW_APPROVED,\n    TASK_NEW_REJECTED,\n    TASK_NEW_NOT_STARTED,\n    TASK_NEW_IN_PROGRESS,\n    TASK_NEW_COMPLETED,\n    TASK_TYPE_APPROVAL,\n    PLACEHOLDER_USER,\n    TASK_EDIT_MODE_EDIT,\n} from '../../../../constants';\nimport type { TaskAssigneeCollection, TaskNew } from '../../../../common/types/tasks';\nimport { ACTIVITY_TARGETS } from '../../../common/interactionTargets';\nimport { bdlGray80 } from '../../../../styles/variables';\nimport TaskActions from './TaskActions';\nimport TaskCompletionRuleIcon from './TaskCompletionRuleIcon';\nimport TaskDueDate from './TaskDueDate';\nimport TaskStatus from './TaskStatus';\nimport AssigneeList from './AssigneeList';\nimport TaskModal from '../../TaskModal';\nimport TaskMultiFileIcon from './TaskMultiFileIcon';\nimport commonMessages from '../../../common/messages';\nimport messages from './messages';\nimport type { GetAvatarUrlCallback, GetProfileUrlCallback } from '../../../common/flowTypes';\nimport type { ElementsXhrError } from '../../../../common/types/api';\nimport type { SelectorItems, User } from '../../../../common/types/core';\nimport type { ActionItemError } from '../../../../common/types/feed';\nimport type { Translations } from '../../flowTypes';\nimport type { FeatureConfig } from '../../../common/feature-checking';\n\nimport './Task.scss';\n\ntype Props = {|\n    ...TaskNew,\n    api: API,\n    approverSelectorContacts: SelectorItems<>,\n    currentUser: User,\n    error?: ActionItemError,\n    features?: FeatureConfig,\n    getApproverWithQuery?: Function,\n    getAvatarUrl: GetAvatarUrlCallback,\n    getMentionWithQuery?: Function,\n    getUserProfileUrl?: GetProfileUrlCallback,\n    isPending?: boolean,\n    onAssignmentUpdate: Function,\n    onDelete?: Function,\n    onEdit?: Function,\n    onModalClose?: Function,\n    onView?: Function,\n    translatedTaggedMessage?: string,\n    translations?: Translations,\n|};\n\ntype State = {\n    // the complete list of assignees (when task.assigned_to is truncated)\n    assignedToFull: TaskAssigneeCollection,\n    isAssigneeListOpen: boolean,\n    isConfirmingDelete: boolean,\n    isEditing: boolean,\n    isLoading: boolean,\n    loadCollabError: ?ActionItemError,\n    modalError: ?ElementsXhrError,\n};\n\nclass Task extends React.Component<Props, State> {\n    static defaultProps = {\n        completion_rule: TASK_COMPLETION_RULE_ALL,\n    };\n\n    state = {\n        loadCollabError: undefined,\n        assignedToFull: this.props.assigned_to,\n        modalError: undefined,\n        isEditing: false,\n        isLoading: false,\n        isAssigneeListOpen: false,\n        isConfirmingDelete: false,\n    };\n\n    handleAssigneeListExpand = () => {\n        this.getAllTaskCollaborators(() => {\n            this.setState({ isAssigneeListOpen: true });\n        });\n    };\n\n    handleAssigneeListCollapse = () => {\n        this.setState({ isAssigneeListOpen: false });\n    };\n\n    handleEditClick = () => {\n        this.getAllTaskCollaborators(() => {\n            this.setState({ isEditing: true });\n        });\n    };\n\n    handleDeleteClick = () => {\n        this.setState({ isConfirmingDelete: true });\n    };\n\n    handleDeleteConfirm = (): void => {\n        const { id, onDelete, permissions } = this.props;\n\n        if (onDelete) {\n            onDelete({ id, permissions });\n        }\n    };\n\n    handleDeleteCancel = (): void => {\n        this.setState({ isConfirmingDelete: false });\n    };\n\n    handleEditModalClose = () => {\n        const { onModalClose } = this.props;\n        this.setState({ isEditing: false, modalError: undefined });\n\n        if (onModalClose) {\n            onModalClose();\n        }\n    };\n\n    handleEditSubmitError = (error: ElementsXhrError) => {\n        this.setState({ modalError: error });\n    };\n\n    getAllTaskCollaborators = (onSuccess: () => any) => {\n        const { id, api, task_links, assigned_to } = this.props;\n        const { errorOccured } = commonMessages;\n        const { taskCollaboratorLoadErrorMessage } = messages;\n\n        // skip fetch when there are no additional collaborators\n        if (!assigned_to.next_marker) {\n            this.setState({ assignedToFull: assigned_to });\n            onSuccess();\n            return;\n        }\n\n        // fileid is required for api calls, check for presence\n        const fileId = get(task_links, 'entries[0].target.id');\n        if (!fileId) {\n            return;\n        }\n\n        this.setState({ isLoading: true });\n        api.getTaskCollaboratorsAPI(false).getTaskCollaborators({\n            task: { id },\n            file: { id: fileId },\n            errorCallback: () => {\n                this.setState({\n                    isLoading: false,\n                    loadCollabError: {\n                        message: taskCollaboratorLoadErrorMessage,\n                        title: errorOccured,\n                    },\n                });\n            },\n            successCallback: assignedToFull => {\n                this.setState({ assignedToFull, isLoading: false });\n                onSuccess();\n            },\n        });\n    };\n\n    handleTaskAction = (taskId: string, assignmentId: string, taskStatus: string) => {\n        const { onAssignmentUpdate } = this.props;\n\n        this.setState({ isAssigneeListOpen: false });\n\n        onAssignmentUpdate(taskId, assignmentId, taskStatus);\n    };\n\n    render() {\n        const {\n            approverSelectorContacts,\n            assigned_to,\n            completion_rule,\n            created_at,\n            created_by,\n            currentUser,\n            due_at,\n            error,\n            features,\n            getApproverWithQuery,\n            getAvatarUrl,\n            getUserProfileUrl,\n            id,\n            isPending,\n            description,\n            onEdit,\n            onView,\n            permissions,\n            status,\n            task_links,\n            task_type,\n            translatedTaggedMessage,\n            translations,\n        } = this.props;\n\n        const {\n            assignedToFull,\n            modalError,\n            isEditing,\n            isLoading,\n            loadCollabError,\n            isAssigneeListOpen,\n            isConfirmingDelete,\n        } = this.state;\n\n        const inlineError = loadCollabError || error;\n\n        const assignments = assigned_to && assigned_to.entries;\n\n        const currentUserAssignment = assignments && assignments.find(({ target }) => target.id === currentUser.id);\n\n        const createdByUser = created_by.target || PLACEHOLDER_USER;\n\n        const createdAtTimestamp = new Date(created_at).getTime();\n\n        const isTaskCompleted = !(status === TASK_NEW_NOT_STARTED || status === TASK_NEW_IN_PROGRESS);\n\n        const isCreator = created_by.target?.id === currentUser.id;\n\n        const isMultiFile = task_links.entries.length > 1;\n\n        let shouldShowActions;\n        if (isTaskCompleted) {\n            shouldShowActions = false;\n        } else if (isMultiFile && isCreator) {\n            shouldShowActions = true;\n        } else {\n            shouldShowActions =\n                currentUserAssignment &&\n                currentUserAssignment.permissions &&\n                currentUserAssignment.permissions.can_update &&\n                currentUserAssignment.status === TASK_NEW_NOT_STARTED;\n        }\n\n        const TaskTypeIcon =\n            task_type === TASK_TYPE_APPROVAL ? (\n                <IconTaskApproval title={<FormattedMessage {...messages.approvalTaskAnnotationIconTitle} />} />\n            ) : (\n                <IconTaskGeneral title={<FormattedMessage {...messages.generalTaskAnnotationIconTitle} />} />\n            );\n\n        const isMenuVisible = (permissions.can_delete || permissions.can_update) && !isPending;\n\n        return (\n            <ActivityCard\n                className=\"bcs-Task\"\n                data-resin-feature=\"tasks\"\n                data-resin-taskid={id}\n                data-resin-tasktype={task_type}\n                data-resin-numassignees={assignments && assignments.length}\n            >\n                {/* $FlowFixMe */}\n                {inlineError ? <ActivityError {...inlineError} /> : null}\n                <Media\n                    className={classNames('bcs-Task-media', {\n                        'bcs-is-pending': isPending || isLoading,\n                    })}\n                    data-testid=\"task-card\"\n                >\n                    <Media.Figure className=\"bcs-Task-avatar\">\n                        <Avatar badgeIcon={TaskTypeIcon} getAvatarUrl={getAvatarUrl} user={createdByUser} />\n                    </Media.Figure>\n                    <Media.Body>\n                        {isMenuVisible && (\n                            <TetherComponent\n                                attachment=\"top right\"\n                                className=\"bcs-Task-deleteConfirmationModal\"\n                                constraints={[{ to: 'scrollParent', attachment: 'together' }]}\n                                targetAttachment=\"bottom right\"\n                                renderTarget={ref => (\n                                    <div ref={ref} style={{ display: 'inline-block' }}>\n                                        <Media.Menu\n                                            isDisabled={isConfirmingDelete}\n                                            data-testid=\"task-actions-menu\"\n                                            menuProps={{\n                                                'data-resin-component': ACTIVITY_TARGETS.TASK_OPTIONS,\n                                            }}\n                                        >\n                                            {permissions.can_update && (\n                                                <MenuItem\n                                                    data-resin-target={ACTIVITY_TARGETS.TASK_OPTIONS_EDIT}\n                                                    data-testid=\"edit-task\"\n                                                    onClick={this.handleEditClick}\n                                                >\n                                                    <IconPencil color={bdlGray80} />\n                                                    <FormattedMessage {...messages.taskEditMenuItem} />\n                                                </MenuItem>\n                                            )}\n                                            {permissions.can_delete && (\n                                                <MenuItem\n                                                    data-resin-target={ACTIVITY_TARGETS.TASK_OPTIONS_DELETE}\n                                                    data-testid=\"delete-task\"\n                                                    onClick={this.handleDeleteClick}\n                                                >\n                                                    <IconTrash color={bdlGray80} />\n                                                    <FormattedMessage {...messages.taskDeleteMenuItem} />\n                                                </MenuItem>\n                                            )}\n                                        </Media.Menu>\n                                    </div>\n                                )}\n                                renderElement={ref => {\n                                    return isConfirmingDelete ? (\n                                        <div ref={ref}>\n                                            <DeleteConfirmation\n                                                data-resin-component={ACTIVITY_TARGETS.TASK_OPTIONS}\n                                                isOpen={isConfirmingDelete}\n                                                message={messages.taskDeletePrompt}\n                                                onDeleteCancel={this.handleDeleteCancel}\n                                                onDeleteConfirm={this.handleDeleteConfirm}\n                                            />\n                                        </div>\n                                    ) : null;\n                                }}\n                            />\n                        )}\n                        <div className=\"bcs-Task-headline\">\n                            {createdByUser.name ? (\n                                <UserLink\n                                    {...createdByUser}\n                                    data-resin-target={ACTIVITY_TARGETS.PROFILE}\n                                    getUserProfileUrl={getUserProfileUrl}\n                                />\n                            ) : (\n                                <FormattedMessage {...commonMessages.priorCollaborator} />\n                            )}\n                        </div>\n                        <div>\n                            <ActivityTimestamp date={createdAtTimestamp} />\n                        </div>\n                        <div className=\"bcs-Task-status\">\n                            <TaskStatus status={status} />\n                            <TaskMultiFileIcon isMultiFile={isMultiFile} />\n                            <TaskCompletionRuleIcon completionRule={completion_rule} />\n                        </div>\n                        <div className=\"bcs-Task-dueDate\">\n                            {!!due_at && <TaskDueDate dueDate={due_at} status={status} />}\n                        </div>\n                        <div>\n                            <ActivityMessage\n                                id={id}\n                                tagged_message={description}\n                                translatedTaggedMessage={translatedTaggedMessage}\n                                {...translations}\n                                translationFailed={error ? true : null}\n                                getUserProfileUrl={getUserProfileUrl}\n                            />\n                        </div>\n                        <div className=\"bcs-Task-assigneeListContainer\">\n                            <AssigneeList\n                                isOpen={isAssigneeListOpen}\n                                onCollapse={this.handleAssigneeListCollapse}\n                                onExpand={this.handleAssigneeListExpand}\n                                getAvatarUrl={getAvatarUrl}\n                                initialAssigneeCount={3}\n                                users={isAssigneeListOpen ? assignedToFull : assigned_to}\n                            />\n                        </div>\n                        {shouldShowActions && (\n                            <div className=\"bcs-Task-actionsContainer\" data-testid=\"action-container\">\n                                <TaskActions\n                                    isMultiFile={isMultiFile}\n                                    taskType={task_type}\n                                    onTaskApproval={\n                                        isPending\n                                            ? noop\n                                            : () =>\n                                                  // $FlowFixMe checked by shouldShowActions\n                                                  this.handleTaskAction(id, currentUserAssignment.id, TASK_NEW_APPROVED)\n                                    }\n                                    onTaskReject={\n                                        isPending\n                                            ? noop\n                                            : () =>\n                                                  // $FlowFixMe checked by shouldShowActions\n                                                  this.handleTaskAction(id, currentUserAssignment.id, TASK_NEW_REJECTED)\n                                    }\n                                    onTaskComplete={\n                                        isPending\n                                            ? noop\n                                            : () =>\n                                                  this.handleTaskAction(\n                                                      id,\n                                                      // $FlowFixMe checked by shouldShowActions\n                                                      currentUserAssignment.id,\n                                                      TASK_NEW_COMPLETED,\n                                                  )\n                                    }\n                                    onTaskView={onView && (() => onView(id, isCreator))}\n                                />\n                            </div>\n                        )}\n                    </Media.Body>\n                </Media>\n                <TaskModal\n                    editMode={TASK_EDIT_MODE_EDIT}\n                    error={modalError}\n                    feedbackUrl={getFeatureConfig(features, 'activityFeed.tasks').feedbackUrl || ''}\n                    onSubmitError={this.handleEditSubmitError}\n                    onSubmitSuccess={this.handleEditModalClose}\n                    onModalClose={this.handleEditModalClose}\n                    isTaskFormOpen={isEditing}\n                    taskFormProps={{\n                        id,\n                        approvers: assignedToFull.entries,\n                        approverSelectorContacts,\n                        completionRule: completion_rule,\n                        getApproverWithQuery,\n                        getAvatarUrl,\n                        createTask: () => {},\n                        editTask: onEdit,\n                        dueDate: due_at,\n                        message: description,\n                    }}\n                    taskType={task_type}\n                />\n            </ActivityCard>\n        );\n    }\n}\n\nexport { Task as TaskComponent };\nexport default flow([withFeatureConsumer, withAPIContext])(Task);\n"],"mappings":"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","ignoreList":[]}