{"version":3,"file":"Avatar.js","names":["React","AvatarComponent","Avatar","PureComponent","constructor","args","_defineProperty","avatarUrl","isMounted","setState","getAvatarUrl","user","props","avatar_url","id","avatarPromise","Promise","resolve","then","getAvatarUrlHandler","componentDidMount","componentWillUnmount","render","badgeIcon","className","state","name","createElement"],"sources":["../../../../src/elements/content-sidebar/activity-feed/Avatar.js"],"sourcesContent":["/**\n * @flow\n * @file avatar component\n * @author Box\n */\nimport * as React from 'react';\nimport AvatarComponent from '../../../components/avatar';\nimport type { GetAvatarUrlCallback } from '../../common/flowTypes';\nimport type { User } from '../../../common/types/core';\n\ntype Props = {\n    badgeIcon?: React.Element<any>,\n    className?: string,\n    getAvatarUrl?: GetAvatarUrlCallback,\n    user: User,\n};\n\ntype State = {\n    avatarUrl?: ?string,\n};\n\nclass Avatar extends React.PureComponent<Props, State> {\n    state = {\n        avatarUrl: null,\n    };\n\n    isMounted: boolean = false;\n\n    /**\n     * Success handler for getting avatar url\n     *\n     * @param {string} avatarUrl the user avatar url\n     */\n    getAvatarUrlHandler = (avatarUrl: ?string) => {\n        if (this.isMounted) {\n            this.setState({\n                avatarUrl,\n            });\n        }\n    };\n\n    /**\n     * Gets the avatar URL for the user from the getAvatarUrl prop\n     *\n     * @return {Promise<?string>} Promise which resolve with the avatar url string\n     */\n    getAvatarUrl(): Promise<?string> {\n        const { user = {}, getAvatarUrl }: Props = this.props;\n        const { avatar_url = null, id } = user;\n\n        const avatarPromise = id && getAvatarUrl ? getAvatarUrl(`${id}`) : Promise.resolve(avatar_url);\n        return avatarPromise.then(this.getAvatarUrlHandler);\n    }\n\n    componentDidMount() {\n        this.isMounted = true;\n        this.getAvatarUrl();\n    }\n\n    componentWillUnmount() {\n        this.isMounted = false;\n    }\n\n    render() {\n        const { badgeIcon, className, user }: Props = this.props;\n        const { avatarUrl }: State = this.state;\n        const { id, name } = user;\n\n        return (\n            <AvatarComponent avatarUrl={avatarUrl} badgeIcon={badgeIcon} className={className} id={id} name={name} />\n        );\n    }\n}\n\nexport default Avatar;\n"],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,OAAOC,eAAe,MAAM,4BAA4B;AAexD,MAAMC,MAAM,SAASF,KAAK,CAACG,aAAa,CAAe;EAAAC,YAAA,GAAAC,IAAA;IAAA,SAAAA,IAAA;IAAAC,eAAA,gBAC3C;MACJC,SAAS,EAAE;IACf,CAAC;IAAAD,eAAA,oBAEoB,KAAK;IAE1B;AACJ;AACA;AACA;AACA;IAJIA,eAAA,8BAKuBC,SAAkB,IAAK;MAC1C,IAAI,IAAI,CAACC,SAAS,EAAE;QAChB,IAAI,CAACC,QAAQ,CAAC;UACVF;QACJ,CAAC,CAAC;MACN;IACJ,CAAC;EAAA;EAED;AACJ;AACA;AACA;AACA;EACIG,YAAYA,CAAA,EAAqB;IAC7B,MAAM;MAAEC,IAAI,GAAG,CAAC,CAAC;MAAED;IAAoB,CAAC,GAAG,IAAI,CAACE,KAAK;IACrD,MAAM;MAAEC,UAAU,GAAG,IAAI;MAAEC;IAAG,CAAC,GAAGH,IAAI;IAEtC,MAAMI,aAAa,GAAGD,EAAE,IAAIJ,YAAY,GAAGA,YAAY,CAAC,GAAGI,EAAE,EAAE,CAAC,GAAGE,OAAO,CAACC,OAAO,CAACJ,UAAU,CAAC;IAC9F,OAAOE,aAAa,CAACG,IAAI,CAAC,IAAI,CAACC,mBAAmB,CAAC;EACvD;EAEAC,iBAAiBA,CAAA,EAAG;IAChB,IAAI,CAACZ,SAAS,GAAG,IAAI;IACrB,IAAI,CAACE,YAAY,CAAC,CAAC;EACvB;EAEAW,oBAAoBA,CAAA,EAAG;IACnB,IAAI,CAACb,SAAS,GAAG,KAAK;EAC1B;EAEAc,MAAMA,CAAA,EAAG;IACL,MAAM;MAAEC,SAAS;MAAEC,SAAS;MAAEb;IAAY,CAAC,GAAG,IAAI,CAACC,KAAK;IACxD,MAAM;MAAEL;IAAiB,CAAC,GAAG,IAAI,CAACkB,KAAK;IACvC,MAAM;MAAEX,EAAE;MAAEY;IAAK,CAAC,GAAGf,IAAI;IAEzB,oBACIX,KAAA,CAAA2B,aAAA,CAAC1B,eAAe;MAACM,SAAS,EAAEA,SAAU;MAACgB,SAAS,EAAEA,SAAU;MAACC,SAAS,EAAEA,SAAU;MAACV,EAAE,EAAEA,EAAG;MAACY,IAAI,EAAEA;IAAK,CAAE,CAAC;EAEjH;AACJ;AAEA,eAAexB,MAAM","ignoreList":[]}