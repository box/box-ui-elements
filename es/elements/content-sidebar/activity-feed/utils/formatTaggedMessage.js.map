{"version":3,"file":"formatTaggedMessage.js","names":["React","Link","ACTIVITY_TARGETS","UserLink","messages","convertTimestampToSeconds","convertMillisecondsToHMMSS","renderTimestampWithText","timestampInHHMMSS","handleClick","intl","textAfterTimestamp","createElement","Fragment","className","formatMessage","activityMessageTimestampLabel","type","onClick","formatTimestamp","text","timestamp","replace","strippedTimestamp","timestampSection","exec","timestampValue","split","timestampInMilliseconds","parseInt","Number","isNaN","e","preventDefault","videoContainer","document","querySelector","video","totalSeconds","currentTime","pause","splitRegex","formatTaggedMessage","tagged_message","itemID","shouldReturnString","getUserProfileUrl","contentItems","map","contentIndex","contentKey","mentionMatch","match","trigger","id","name","key","MENTION","timestampMatch","urlMatch","url","href","join"],"sources":["../../../../../src/elements/content-sidebar/activity-feed/utils/formatTaggedMessage.js"],"sourcesContent":["/**\n * @flow\n * @file Util for formatting tagged messages\n */\n\nimport * as React from 'react';\nimport type { IntlShape } from 'react-intl';\nimport { Link } from '../../../../components/link';\nimport { ACTIVITY_TARGETS } from '../../../common/interactionTargets';\nimport UserLink from '../common/user-link';\nimport messages from '../common/activity-message/messages';\nimport { convertTimestampToSeconds, convertMillisecondsToHMMSS } from '../../../../utils/timestamp';\n\n/**\n * Renders the timestamp button and remaining text\n * @param timestampInHHMMSS The formatted timestamp string (HH:MM:SS)\n * @param timestampLabel The aria label for the timestamp button\n * @param handleClick The click handler for the timestamp button\n * @param textAfterTimestamp The text that comes after the timestamp\n * @returns A React Fragment with timestamp button and text\n */\nexport const renderTimestampWithText = (\n    timestampInHHMMSS: string,\n    handleClick: (e: SyntheticMouseEvent<HTMLButtonElement>) => void,\n    intl: IntlShape,\n    textAfterTimestamp: string,\n): React$Element<any> => (\n    <>\n        <div className=\"bcs-ActivityMessage-timestamp\">\n            <button\n                aria-label={intl.formatMessage(messages.activityMessageTimestampLabel)}\n                type=\"button\"\n                onClick={handleClick}\n            >\n                {timestampInHHMMSS}\n            </button>\n        </div>\n        {textAfterTimestamp}\n    </>\n);\n\n/**\n * Formats text containing a timestamp by wrapping the timestamp in a Link component\n * @param text The text containing the timestamp\n * @param timestamp The timestamp string\n * @param intl The intl object method to add the timestamp aria label\n * @returns A React Fragment with formatted timestamp\n */\nconst formatTimestamp = (text: string, timestamp: string, intl: IntlShape): React$Element<any> | string => {\n    if (!timestamp || typeof timestamp !== 'string') {\n        return text;\n    }\n    const textAfterTimestamp = text.replace(timestamp ?? '', '');\n    const strippedTimestamp = timestamp.replace(/#\\[|\\]/g, '');\n    if (!strippedTimestamp) {\n        return text;\n    }\n\n    const timestampSection = /timestamp:\\d+/.exec(timestamp);\n    const timestampValue = timestampSection && timestampSection[0] ? timestampSection[0].split(':')[1] : null;\n    const timestampInMilliseconds = parseInt(timestampValue, 10);\n    if (Number.isNaN(timestampInMilliseconds)) {\n        return textAfterTimestamp;\n    }\n    // convert milliseconds to HH:MM:SS\n    const timestampInHHMMSS = convertMillisecondsToHMMSS(timestampInMilliseconds);\n\n    const handleClick = (e: SyntheticMouseEvent<HTMLButtonElement>): void => {\n        e.preventDefault();\n        const videoContainer = document.querySelector('.bp-media-dash');\n        if (videoContainer) {\n            // $FlowFixMe: querySelector('video') returns an HTMLVideoElement\n            const video: ?HTMLVideoElement = videoContainer.querySelector('video');\n            if (video) {\n                const totalSeconds = convertTimestampToSeconds(timestampInMilliseconds);\n                video.currentTime = totalSeconds;\n                video.pause();\n            }\n        }\n    };\n\n    return renderTimestampWithText(timestampInHHMMSS, handleClick, intl, textAfterTimestamp);\n};\n\n// this regex matches one of the following regular expressions:\n// mentions: ([@＠﹫]\\[[0-9]+:[^\\]]+])\n// urls: (?:\\b)((?:(?:ht|f)tps?:\\/\\/)[\\w\\._\\-]+(:\\d+)?(\\/[\\w\\-_\\.~\\+\\/#\\?&%=:\\[\\]@!$'\\(\\)\\*;,]*)?)\n// NOTE: There are useless escapes in the regex below, should probably remove them when safe\n/* eslint-disable no-useless-escape */\nconst splitRegex =\n    /((?:[@＠﹫]\\[[0-9]+:[^\\]]+])|(?:\\b(?:(?:ht|f)tps?:\\/\\/)[\\w\\._\\-]+(?::\\d+)?(?:\\/[\\w\\-_\\.~\\+\\/#\\?&%=:\\[\\]@!$'\\(\\)\\*;,]*)?))/gim;\n// eslint-enable no-useless-escape\n/**\n * Formats a message a string and replaces the following:\n * - all occurrence of mention patterns with a UserLink component\n * - all occurrence of urls with a Link component\n * Ex mention format: @[123:Hello World]\n * @param {String} tagged_message The message string to format\n * @param {String} itemID The id of the tagged message\n * @param {Boolean} shouldReturnString The boolean value whether it should return string\n * @param {Function} [getUserProfileUrl] The method to generate a user profile url\n * @param {IntlShape} intl The intl object method to add the timestamp aria label\n * @returns {String|Array<React.Node|String>}\n */\nconst formatTaggedMessage = (\n    tagged_message: string,\n    itemID: string,\n    shouldReturnString: boolean,\n    getUserProfileUrl?: Function,\n    intl: IntlShape,\n): string | Array<React.Node | string> => {\n    const contentItems = tagged_message.split(splitRegex).map((text: string, contentIndex: number) => {\n        const contentKey = `${contentIndex}-${itemID}`;\n        // attempt mention match\n        const mentionMatch = text.match(/([@＠﹫])\\[([0-9]+):([^\\]]+)]/i);\n        if (mentionMatch) {\n            const [, trigger, id, name] = mentionMatch;\n            if (shouldReturnString) {\n                return `${trigger}${name}`;\n            }\n\n            return (\n                <UserLink\n                    key={contentKey}\n                    className=\"bcs-comment-mention\"\n                    data-resin-target={ACTIVITY_TARGETS.MENTION}\n                    getUserProfileUrl={getUserProfileUrl}\n                    id={id}\n                    name={`${trigger}${name}`}\n                />\n            );\n        }\n\n        // Check for timestamp in first item only\n        if (contentIndex === 0 && !shouldReturnString) {\n            const timestampMatch = text.match(/#\\[timestamp:\\d+,versionId:\\d+\\]/);\n            const timestamp = timestampMatch && timestampMatch[0];\n            if (timestamp) {\n                return formatTimestamp(text, timestamp, intl);\n            }\n        }\n\n        if (!shouldReturnString) {\n            // attempt url match\n            // NOTE: There are useless escapes in the regex below, should probably remove them when safe\n            const urlMatch = text.match(\n                // eslint-disable-next-line no-useless-escape\n                /((?:(?:ht|f)tps?:\\/\\/)[\\w\\._\\-]+(?::\\d+)?(?:\\/[\\w\\-_\\.~\\+\\/#\\?&%=:\\[\\]@!$'\\(\\)\\*;,]*)?)/i,\n            );\n            if (urlMatch) {\n                const [, url] = urlMatch;\n                return (\n                    <Link key={contentKey} href={url}>\n                        {url}\n                    </Link>\n                );\n            }\n        }\n\n        return text;\n    });\n\n    if (shouldReturnString) {\n        return contentItems.join('');\n    }\n\n    return contentItems;\n};\n\nexport default formatTaggedMessage;\n"],"mappings":"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","ignoreList":[]}