{"version":3,"file":"BoxAISidebar.js","names":["React","useIntl","AgentsProvider","BoxAISidebarContent","BoxAISidebarContext","SPREADSHEET_FILE_EXTENSIONS","messages","BoxAISidebar","props","cache","contentName","elementId","fileExtension","fileID","getSuggestedQuestions","isIntelligentQueryMode","isFeedbackEnabled","isFeedbackFormEnabled","isStopResponseEnabled","items","itemSize","localizedQuestions","onFeedbackFormSubmit","onUserInteraction","recordAction","renderRemoteModule","setCacheValue","shouldFeedbackFormIncludeFeedbackText","shouldPreinitSession","setHasQuestions","rest","_objectWithoutProperties","_excluded","questions","formatMessage","contextValue","useMemo","useEffect","length","questionsWithoutInProgress","isCompleted","slice","isSpreadsheet","includes","spreadsheetNotice","welcomeMessageSpreadsheetNotice","welcomeMessageIntelligentQueryNotice","handleSuggestedQuestionsFetched","fetchedSuggestedQuestions","suggestedQuestions","createElement","value","agents","Provider","_extends","cachedSuggestedQuestions","isOpen","itemID","itemIDs","onSuggestedQuestionsFetched","restoredQuestions","restoredSession","encodedSession","restoredShouldShowLandingPage","shouldShowLandingPage","warningNotice","warningNoticeAriaLabel","welcomeMessageSpreadsheetNoticeAriaLabel"],"sources":["../../../src/elements/content-sidebar/BoxAISidebar.tsx"],"sourcesContent":["/**\n * @file Box AI Sidebar Container\n * @author Box\n */\nimport * as React from 'react';\nimport { useIntl } from 'react-intl';\nimport { type FeedbackFormData, type ItemType, SuggestedQuestionType } from '@box/box-ai-content-answers';\nimport { AgentsProvider, RecordActionType } from '@box/box-ai-agent-selector';\nimport BoxAISidebarContent from './BoxAISidebarContent';\nimport { BoxAISidebarContext } from './context/BoxAISidebarContext';\nimport { SPREADSHEET_FILE_EXTENSIONS } from '../common/content-answers/constants';\nimport type { BoxAISidebarCache, BoxAISidebarCacheSetter } from './types/BoxAISidebarTypes';\nimport messages from '../common/content-answers/messages';\n\nexport interface BoxAISidebarProps {\n    contentName: string;\n    cache: BoxAISidebarCache;\n    createSessionRequest: (payload: Record<string, unknown>, itemID: string) => Promise<unknown>;\n    elementId: string;\n    fetchTimeout: Record<string, unknown>;\n    fileExtension: string;\n    fileID: string;\n    getAgentConfig: (payload: Record<string, unknown>) => Promise<unknown>;\n    getAIStudioAgents: () => Promise<unknown>;\n    getAnswer: (\n        payload: Record<string, unknown>,\n        itemID?: string,\n        itemIDs?: Array<string>,\n        state?: Record<string, unknown>,\n    ) => Promise<unknown>;\n    getAnswerStreaming: (\n        payload: Record<string, unknown>,\n        itemID?: string,\n        itemIDs?: Array<string>,\n        abortController?: AbortController,\n        state?: Record<string, unknown>,\n    ) => Promise<unknown>;\n    getSuggestedQuestions: (itemID: string) => Promise<unknown> | null;\n    hostAppName: string;\n    isAgentSelectorEnabled: boolean;\n    isAIStudioAgentSelectorEnabled: boolean;\n    isCitationsEnabled: boolean;\n    isDebugModeEnabled: boolean;\n    isFeedbackEnabled: boolean;\n    isFeedbackFormEnabled: boolean;\n    isIntelligentQueryMode: boolean;\n    isMarkdownEnabled: boolean;\n    isStopResponseEnabled?: boolean;\n    isStreamingEnabled: boolean;\n    items: Array<ItemType>;\n    itemSize?: string;\n    localizedQuestions: Array<{ id: string; label: string; prompt: string }>;\n    onFeedbackFormSubmit?: (data: FeedbackFormData, onSuccess: () => void) => void;\n    onUserInteraction?: () => void;\n    recordAction: (params: RecordActionType) => void;\n    setCacheValue: BoxAISidebarCacheSetter;\n    shouldFeedbackFormIncludeFeedbackText?: boolean;\n    renderRemoteModule?: (elementId: string) => React.ReactNode;\n    shouldPreinitSession?: boolean;\n    setHasQuestions: (hasQuestions: boolean) => void;\n}\n\nconst BoxAISidebar = (props: BoxAISidebarProps) => {\n    const {\n        cache,\n        contentName,\n        elementId,\n        fileExtension,\n        fileID,\n        getSuggestedQuestions,\n        isIntelligentQueryMode,\n        isFeedbackEnabled,\n        isFeedbackFormEnabled,\n        isStopResponseEnabled,\n        items,\n        itemSize,\n        localizedQuestions,\n        onFeedbackFormSubmit,\n        onUserInteraction,\n        recordAction,\n        renderRemoteModule,\n        setCacheValue,\n        shouldFeedbackFormIncludeFeedbackText,\n        shouldPreinitSession = true,\n        setHasQuestions,\n        ...rest\n    } = props;\n    const { questions } = cache;\n    const { formatMessage } = useIntl();\n    const contextValue = React.useMemo(\n        () => ({\n            cache,\n            contentName,\n            elementId,\n            fileExtension,\n            isFeedbackEnabled,\n            isFeedbackFormEnabled,\n            isStopResponseEnabled,\n            items,\n            itemSize,\n            onFeedbackFormSubmit,\n            onUserInteraction,\n            recordAction,\n            setCacheValue,\n            shouldFeedbackFormIncludeFeedbackText,\n            shouldPreinitSession,\n        }),\n        [\n            cache,\n            contentName,\n            elementId,\n            fileExtension,\n            isFeedbackEnabled,\n            isFeedbackFormEnabled,\n            isStopResponseEnabled,\n            items,\n            itemSize,\n            onFeedbackFormSubmit,\n            onUserInteraction,\n            recordAction,\n            setCacheValue,\n            shouldFeedbackFormIncludeFeedbackText,\n            shouldPreinitSession,\n        ],\n    );\n\n    React.useEffect(() => {\n        if (setHasQuestions) {\n            setHasQuestions(questions.length > 0);\n        }\n    }, [questions.length, setHasQuestions]);\n\n    if (renderRemoteModule) {\n        return renderRemoteModule(elementId);\n    }\n\n    let questionsWithoutInProgress = questions;\n    if (questions.length > 0 && !questions[questions.length - 1].isCompleted) {\n        // pass only fully completed questions to not show loading indicator of question where we canceled API request\n        questionsWithoutInProgress = questionsWithoutInProgress.slice(0, -1);\n    }\n\n    const isSpreadsheet = SPREADSHEET_FILE_EXTENSIONS.includes(fileExtension);\n\n    let spreadsheetNotice = isSpreadsheet ? formatMessage(messages.welcomeMessageSpreadsheetNotice) : '';\n    if (isIntelligentQueryMode) {\n        spreadsheetNotice = formatMessage(messages.welcomeMessageIntelligentQueryNotice);\n    } else if (isSpreadsheet) {\n        spreadsheetNotice = formatMessage(messages.welcomeMessageSpreadsheetNotice);\n    }\n\n    const handleSuggestedQuestionsFetched = (fetchedSuggestedQuestions: SuggestedQuestionType[]) => {\n        setCacheValue('suggestedQuestions', fetchedSuggestedQuestions);\n    };\n\n    const suggestedQuestions = getSuggestedQuestions === null ? localizedQuestions : [];\n\n    return (\n        // BoxAISidebarContent is using withApiWrapper that is not passing all provided props,\n        // that's why we need to use provider to pass other props\n        <AgentsProvider value={cache.agents}>\n            <BoxAISidebarContext.Provider value={contextValue}>\n                <BoxAISidebarContent\n                    cachedSuggestedQuestions={cache.suggestedQuestions}\n                    getSuggestedQuestions={getSuggestedQuestions}\n                    isOpen\n                    isStopResponseEnabled={isStopResponseEnabled}\n                    itemID={fileID}\n                    itemIDs={[fileID]}\n                    onSuggestedQuestionsFetched={handleSuggestedQuestionsFetched}\n                    restoredQuestions={questionsWithoutInProgress}\n                    restoredSession={cache.encodedSession}\n                    restoredShouldShowLandingPage={cache.shouldShowLandingPage}\n                    shouldPreinitSession={shouldPreinitSession}\n                    suggestedQuestions={\n                        cache.suggestedQuestions.length > 0 ? cache.suggestedQuestions : suggestedQuestions\n                    }\n                    warningNotice={spreadsheetNotice}\n                    warningNoticeAriaLabel={formatMessage(messages.welcomeMessageSpreadsheetNoticeAriaLabel)}\n                    {...rest}\n                />\n            </BoxAISidebarContext.Provider>\n        </AgentsProvider>\n    );\n};\n\nexport default BoxAISidebar;\n"],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,OAAO,QAAQ,YAAY;AAEpC,SAASC,cAAc,QAA0B,4BAA4B;AAC7E,OAAOC,mBAAmB,MAAM,uBAAuB;AACvD,SAASC,mBAAmB,QAAQ,+BAA+B;AACnE,SAASC,2BAA2B,QAAQ,qCAAqC;AAEjF,OAAOC,QAAQ,MAAM,oCAAoC;AAkDzD,MAAMC,YAAY,GAAIC,KAAwB,IAAK;EAC/C,MAAM;MACFC,KAAK;MACLC,WAAW;MACXC,SAAS;MACTC,aAAa;MACbC,MAAM;MACNC,qBAAqB;MACrBC,sBAAsB;MACtBC,iBAAiB;MACjBC,qBAAqB;MACrBC,qBAAqB;MACrBC,KAAK;MACLC,QAAQ;MACRC,kBAAkB;MAClBC,oBAAoB;MACpBC,iBAAiB;MACjBC,YAAY;MACZC,kBAAkB;MAClBC,aAAa;MACbC,qCAAqC;MACrCC,oBAAoB,GAAG,IAAI;MAC3BC;IAEJ,CAAC,GAAGrB,KAAK;IADFsB,IAAI,GAAAC,wBAAA,CACPvB,KAAK,EAAAwB,SAAA;EACT,MAAM;IAAEC;EAAU,CAAC,GAAGxB,KAAK;EAC3B,MAAM;IAAEyB;EAAc,CAAC,GAAGjC,OAAO,CAAC,CAAC;EACnC,MAAMkC,YAAY,GAAGnC,KAAK,CAACoC,OAAO,CAC9B,OAAO;IACH3B,KAAK;IACLC,WAAW;IACXC,SAAS;IACTC,aAAa;IACbI,iBAAiB;IACjBC,qBAAqB;IACrBC,qBAAqB;IACrBC,KAAK;IACLC,QAAQ;IACRE,oBAAoB;IACpBC,iBAAiB;IACjBC,YAAY;IACZE,aAAa;IACbC,qCAAqC;IACrCC;EACJ,CAAC,CAAC,EACF,CACInB,KAAK,EACLC,WAAW,EACXC,SAAS,EACTC,aAAa,EACbI,iBAAiB,EACjBC,qBAAqB,EACrBC,qBAAqB,EACrBC,KAAK,EACLC,QAAQ,EACRE,oBAAoB,EACpBC,iBAAiB,EACjBC,YAAY,EACZE,aAAa,EACbC,qCAAqC,EACrCC,oBAAoB,CAE5B,CAAC;EAED5B,KAAK,CAACqC,SAAS,CAAC,MAAM;IAClB,IAAIR,eAAe,EAAE;MACjBA,eAAe,CAACI,SAAS,CAACK,MAAM,GAAG,CAAC,CAAC;IACzC;EACJ,CAAC,EAAE,CAACL,SAAS,CAACK,MAAM,EAAET,eAAe,CAAC,CAAC;EAEvC,IAAIJ,kBAAkB,EAAE;IACpB,OAAOA,kBAAkB,CAACd,SAAS,CAAC;EACxC;EAEA,IAAI4B,0BAA0B,GAAGN,SAAS;EAC1C,IAAIA,SAAS,CAACK,MAAM,GAAG,CAAC,IAAI,CAACL,SAAS,CAACA,SAAS,CAACK,MAAM,GAAG,CAAC,CAAC,CAACE,WAAW,EAAE;IACtE;IACAD,0BAA0B,GAAGA,0BAA0B,CAACE,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;EACxE;EAEA,MAAMC,aAAa,GAAGrC,2BAA2B,CAACsC,QAAQ,CAAC/B,aAAa,CAAC;EAEzE,IAAIgC,iBAAiB,GAAGF,aAAa,GAAGR,aAAa,CAAC5B,QAAQ,CAACuC,+BAA+B,CAAC,GAAG,EAAE;EACpG,IAAI9B,sBAAsB,EAAE;IACxB6B,iBAAiB,GAAGV,aAAa,CAAC5B,QAAQ,CAACwC,oCAAoC,CAAC;EACpF,CAAC,MAAM,IAAIJ,aAAa,EAAE;IACtBE,iBAAiB,GAAGV,aAAa,CAAC5B,QAAQ,CAACuC,+BAA+B,CAAC;EAC/E;EAEA,MAAME,+BAA+B,GAAIC,yBAAkD,IAAK;IAC5FtB,aAAa,CAAC,oBAAoB,EAAEsB,yBAAyB,CAAC;EAClE,CAAC;EAED,MAAMC,kBAAkB,GAAGnC,qBAAqB,KAAK,IAAI,GAAGO,kBAAkB,GAAG,EAAE;EAEnF;IAAA;IACI;IACA;IACArB,KAAA,CAAAkD,aAAA,CAAChD,cAAc;MAACiD,KAAK,EAAE1C,KAAK,CAAC2C;IAAO,gBAChCpD,KAAA,CAAAkD,aAAA,CAAC9C,mBAAmB,CAACiD,QAAQ;MAACF,KAAK,EAAEhB;IAAa,gBAC9CnC,KAAA,CAAAkD,aAAA,CAAC/C,mBAAmB,EAAAmD,QAAA;MAChBC,wBAAwB,EAAE9C,KAAK,CAACwC,kBAAmB;MACnDnC,qBAAqB,EAAEA,qBAAsB;MAC7C0C,MAAM;MACNtC,qBAAqB,EAAEA,qBAAsB;MAC7CuC,MAAM,EAAE5C,MAAO;MACf6C,OAAO,EAAE,CAAC7C,MAAM,CAAE;MAClB8C,2BAA2B,EAAEZ,+BAAgC;MAC7Da,iBAAiB,EAAErB,0BAA2B;MAC9CsB,eAAe,EAAEpD,KAAK,CAACqD,cAAe;MACtCC,6BAA6B,EAAEtD,KAAK,CAACuD,qBAAsB;MAC3DpC,oBAAoB,EAAEA,oBAAqB;MAC3CqB,kBAAkB,EACdxC,KAAK,CAACwC,kBAAkB,CAACX,MAAM,GAAG,CAAC,GAAG7B,KAAK,CAACwC,kBAAkB,GAAGA,kBACpE;MACDgB,aAAa,EAAErB,iBAAkB;MACjCsB,sBAAsB,EAAEhC,aAAa,CAAC5B,QAAQ,CAAC6D,wCAAwC;IAAE,GACrFrC,IAAI,CACX,CACyB,CAClB;EAAC;AAEzB,CAAC;AAED,eAAevB,YAAY","ignoreList":[]}