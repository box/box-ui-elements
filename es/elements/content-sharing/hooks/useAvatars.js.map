{"version":3,"file":"useAvatars.js","names":["React","API","useAvatars","api","itemID","collaboratorsList","avatarURLMap","setAvatarURLMap","useState","useEffect","entries","usersAPI","getUsersAPI","retrievedAvatarURLMap","Promise","all","map","collab","accessible_by","id","userID","url","getAvatarUrlWithAccessToken","toString"],"sources":["../../../../src/elements/content-sharing/hooks/useAvatars.js"],"sourcesContent":["// @flow\n\nimport * as React from 'react';\nimport API from '../../../api';\nimport type { Collaboration, Collaborations } from '../../../common/types/core';\nimport type { AvatarURLMap } from '../types';\n\n/**\n * Generate a map of avatar URLs, which are used to display collaborators in the USM.\n *\n * @param {API} api\n * @param {string} itemID\n * @param {Collaborations | null} collaboratorsList\n * @returns {AvatarURLMap | null}\n */\nfunction useAvatars(api: API, itemID: string, collaboratorsList: Collaborations | null): AvatarURLMap | null {\n    const [avatarURLMap, setAvatarURLMap] = React.useState<AvatarURLMap | null>(null);\n\n    React.useEffect(() => {\n        if (avatarURLMap || !collaboratorsList || !collaboratorsList.entries) return;\n\n        const usersAPI = api.getUsersAPI(false);\n\n        (async () => {\n            const retrievedAvatarURLMap: AvatarURLMap = {};\n            const entries = collaboratorsList ? collaboratorsList.entries : []; // needed for Flow\n            await Promise.all(\n                entries.map(async (collab: Collaboration) => {\n                    if (!collab || !collab.accessible_by) return;\n                    const {\n                        accessible_by: { id: userID },\n                    } = collab;\n                    const url = await usersAPI.getAvatarUrlWithAccessToken(userID.toString(), itemID);\n                    retrievedAvatarURLMap[userID] = url;\n                }),\n            );\n            setAvatarURLMap(retrievedAvatarURLMap);\n        })();\n    }, [api, avatarURLMap, collaboratorsList, itemID]);\n\n    return avatarURLMap;\n}\n\nexport default useAvatars;\n"],"mappings":"AAEA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,OAAOC,GAAG,MAAM,cAAc;AAI9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,UAAUA,CAACC,GAAQ,EAAEC,MAAc,EAAEC,iBAAwC,EAAuB;EACzG,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGP,KAAK,CAACQ,QAAQ,CAAsB,IAAI,CAAC;EAEjFR,KAAK,CAACS,SAAS,CAAC,MAAM;IAClB,IAAIH,YAAY,IAAI,CAACD,iBAAiB,IAAI,CAACA,iBAAiB,CAACK,OAAO,EAAE;IAEtE,MAAMC,QAAQ,GAAGR,GAAG,CAACS,WAAW,CAAC,KAAK,CAAC;IAEvC,CAAC,YAAY;MACT,MAAMC,qBAAmC,GAAG,CAAC,CAAC;MAC9C,MAAMH,OAAO,GAAGL,iBAAiB,GAAGA,iBAAiB,CAACK,OAAO,GAAG,EAAE,CAAC,CAAC;MACpE,MAAMI,OAAO,CAACC,GAAG,CACbL,OAAO,CAACM,GAAG,CAAC,MAAOC,MAAqB,IAAK;QACzC,IAAI,CAACA,MAAM,IAAI,CAACA,MAAM,CAACC,aAAa,EAAE;QACtC,MAAM;UACFA,aAAa,EAAE;YAAEC,EAAE,EAAEC;UAAO;QAChC,CAAC,GAAGH,MAAM;QACV,MAAMI,GAAG,GAAG,MAAMV,QAAQ,CAACW,2BAA2B,CAACF,MAAM,CAACG,QAAQ,CAAC,CAAC,EAAEnB,MAAM,CAAC;QACjFS,qBAAqB,CAACO,MAAM,CAAC,GAAGC,GAAG;MACvC,CAAC,CACL,CAAC;MACDd,eAAe,CAACM,qBAAqB,CAAC;IAC1C,CAAC,EAAE,CAAC;EACR,CAAC,EAAE,CAACV,GAAG,EAAEG,YAAY,EAAED,iBAAiB,EAAED,MAAM,CAAC,CAAC;EAElD,OAAOE,YAAY;AACvB;AAEA,eAAeJ,UAAU","ignoreList":[]}