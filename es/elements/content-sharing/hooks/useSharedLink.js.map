{"version":3,"file":"useSharedLink.js","names":["React","noop","API","ACCESS_NONE","TYPE_FILE","TYPE_FOLDER","CONTENT_SHARING_SHARED_LINK_UPDATE_PARAMS","useSharedLink","api","itemID","itemType","permissions","accessLevel","options","onAddLink","setOnAddLink","useState","onRemoveLink","setOnRemoveLink","changeSharedLinkAccessLevel","setChangeSharedLinkAccessLevel","changeSharedLinkPermissionLevel","setChangeSharedLinkPermissionLevel","onSubmitSettings","setOnSubmitSettings","generatedFunctions","setGeneratedFunctions","currentAccessLevel","useRef","handleRemoveSharedLinkError","handleRemoveSharedLinkSuccess","arg","handleUpdateSharedLinkError","handleUpdateSharedLinkSuccess","setIsLoading","transformAccess","transformPermissions","transformSettings","data","access","useEffect","itemData","id","itemAPIInstance","getFileAPI","getFolderAPI","connectToItemShare","requestOptions","successFn","errorFn","share","updatedOnAddLinkFn","shared_link","current","updatedOnRemoveLinkFn","updatedChangeSharedLinkAccessLevelFn","newAccessLevel","connectToUpdateSharedLink","newSharedLinkData","updateSharedLink","updatedChangeSharedLinkPermissionLevelFn","newSharedLinkPermissionLevel","updatedOnSubmitSettingsFn","newSettings"],"sources":["../../../../src/elements/content-sharing/hooks/useSharedLink.js"],"sourcesContent":["// @flow\nimport * as React from 'react';\nimport noop from 'lodash/noop';\nimport API from '../../../api';\nimport { ACCESS_NONE, TYPE_FILE, TYPE_FOLDER } from '../../../constants';\nimport { CONTENT_SHARING_SHARED_LINK_UPDATE_PARAMS } from '../constants';\nimport type { BoxItemPermission, ItemType } from '../../../common/types/core';\nimport type {\n    ConnectToItemShareFnType,\n    ContentSharingHooksOptions,\n    SharedLinkUpdateLevelFnType,\n    SharedLinkUpdateSettingsFnType,\n} from '../types';\n\n/**\n * Generate CRUD functions for shared links.\n *\n * @param {API} api\n * @param {string} itemID\n * @param {ItemType} itemType\n * @param {BoxItemPermission} permissions\n * @param {string} accessLevel\n * @param {ContentSharingHooksOptions} [options]\n */\nfunction useSharedLink(\n    api: API,\n    itemID: string,\n    itemType: ItemType,\n    permissions: ?BoxItemPermission,\n    accessLevel: string,\n    options: ContentSharingHooksOptions = {},\n) {\n    const [onAddLink, setOnAddLink] = React.useState<null | SharedLinkUpdateLevelFnType>(null);\n    const [onRemoveLink, setOnRemoveLink] = React.useState<null | SharedLinkUpdateLevelFnType>(null);\n    const [\n        changeSharedLinkAccessLevel,\n        setChangeSharedLinkAccessLevel,\n    ] = React.useState<null | SharedLinkUpdateLevelFnType>(null);\n    const [\n        changeSharedLinkPermissionLevel,\n        setChangeSharedLinkPermissionLevel,\n    ] = React.useState<null | SharedLinkUpdateLevelFnType>(null);\n    const [onSubmitSettings, setOnSubmitSettings] = React.useState<null | SharedLinkUpdateSettingsFnType>(null);\n    const [generatedFunctions, setGeneratedFunctions] = React.useState<boolean>(false);\n\n    /**\n     * Storing the access level in a ref allows us to update settings, which depend on the access level, in the following potential scenarios:\n     * - After changing the shared link's access level\n     * - After removing and recreating the shared link\n     */\n    const currentAccessLevel = React.useRef(accessLevel);\n\n    const {\n        handleRemoveSharedLinkError = noop,\n        handleRemoveSharedLinkSuccess = arg => arg,\n        handleUpdateSharedLinkError = noop,\n        handleUpdateSharedLinkSuccess = arg => arg,\n        setIsLoading = noop,\n        transformAccess = arg => arg,\n        transformPermissions = arg => arg,\n        transformSettings = (data, access) => data, // eslint-disable-line no-unused-vars\n    } = options;\n\n    React.useEffect(() => {\n        if (!permissions || generatedFunctions) return;\n\n        const itemData = {\n            id: itemID,\n            permissions,\n        };\n\n        let itemAPIInstance;\n\n        if (itemType === TYPE_FILE) {\n            itemAPIInstance = api.getFileAPI();\n        } else if (itemType === TYPE_FOLDER) {\n            itemAPIInstance = api.getFolderAPI();\n        }\n\n        // Create functions that alter the access level of a shared link\n        const connectToItemShare: ConnectToItemShareFnType = ({\n            access,\n            requestOptions = CONTENT_SHARING_SHARED_LINK_UPDATE_PARAMS,\n            successFn = handleUpdateSharedLinkSuccess,\n            errorFn = handleUpdateSharedLinkError,\n        }) => {\n            setIsLoading(true);\n            return itemAPIInstance.share(itemData, access, successFn, errorFn, requestOptions);\n        };\n\n        /**\n         * Set the shared link creation function.\n         *\n         * The backend will determine the default access level for the shared link, so we should not pass a value for \"access.\"\n         * The \"open\" and \"company\" access levels may be disabled due to certain policies, and attempting to set a disabled\n         * access level will throw a 400. The only access level that we can reliably set is \"collaborators,\" but defaulting\n         * to that level diverges from existing shared link creation behavior in the WebApp.\n         *\n         * After a shared link is successfully created, we save the access level from the API response into our ref.\n         */\n        const updatedOnAddLinkFn: SharedLinkUpdateLevelFnType = () => () =>\n            connectToItemShare({\n                successFn: data => {\n                    const {\n                        shared_link: { access },\n                    } = data;\n                    currentAccessLevel.current = access;\n                    handleUpdateSharedLinkSuccess(data);\n                },\n            });\n        setOnAddLink(updatedOnAddLinkFn);\n\n        // Shared link removal function\n        const updatedOnRemoveLinkFn: SharedLinkUpdateLevelFnType = () => () =>\n            connectToItemShare({\n                access: ACCESS_NONE,\n                successFn: handleRemoveSharedLinkSuccess,\n                errorFn: handleRemoveSharedLinkError,\n            });\n        setOnRemoveLink(updatedOnRemoveLinkFn);\n\n        // Shared link access level change function\n        const updatedChangeSharedLinkAccessLevelFn: SharedLinkUpdateLevelFnType = () => (newAccessLevel: string) =>\n            connectToItemShare({\n                // $FlowFixMe\n                access: transformAccess(newAccessLevel),\n                successFn: data => {\n                    currentAccessLevel.current = newAccessLevel;\n                    handleUpdateSharedLinkSuccess(data);\n                },\n            });\n        setChangeSharedLinkAccessLevel(updatedChangeSharedLinkAccessLevelFn);\n\n        // Create functions that update shared link settings aside from the access level\n        const connectToUpdateSharedLink = (newSharedLinkData: Object) => {\n            setIsLoading(true);\n            return itemAPIInstance.updateSharedLink(\n                itemData,\n                newSharedLinkData,\n                handleUpdateSharedLinkSuccess,\n                handleUpdateSharedLinkError,\n                CONTENT_SHARING_SHARED_LINK_UPDATE_PARAMS,\n            );\n        };\n\n        // Shared link permission level change function\n        const updatedChangeSharedLinkPermissionLevelFn: SharedLinkUpdateLevelFnType = () => (\n            newSharedLinkPermissionLevel: string,\n        ) => connectToUpdateSharedLink({ permissions: transformPermissions(newSharedLinkPermissionLevel) });\n        setChangeSharedLinkPermissionLevel(updatedChangeSharedLinkPermissionLevelFn);\n\n        /**\n         * Set the shared link settings update function. This is currently used in the Shared Link Settings Modal,\n         * but it may also be used to update any settings not covered by the above functions.\n         */\n        const updatedOnSubmitSettingsFn: SharedLinkUpdateSettingsFnType = () => newSettings =>\n            connectToUpdateSharedLink(transformSettings(newSettings, currentAccessLevel.current));\n        setOnSubmitSettings(updatedOnSubmitSettingsFn);\n\n        setGeneratedFunctions(true);\n    }, [\n        permissions,\n        generatedFunctions,\n        itemID,\n        itemType,\n        handleUpdateSharedLinkSuccess,\n        handleRemoveSharedLinkSuccess,\n        transformAccess,\n        accessLevel,\n        transformPermissions,\n        transformSettings,\n        currentAccessLevel,\n        api,\n        setIsLoading,\n        handleRemoveSharedLinkError,\n        handleUpdateSharedLinkError,\n    ]);\n\n    return {\n        changeSharedLinkAccessLevel,\n        changeSharedLinkPermissionLevel,\n        onAddLink,\n        onRemoveLink,\n        onSubmitSettings,\n    };\n}\n\nexport default useSharedLink;\n"],"mappings":"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","ignoreList":[]}