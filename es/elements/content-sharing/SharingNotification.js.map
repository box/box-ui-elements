{"version":3,"file":"SharingNotification.js","names":["React","FormattedMessage","API","Notification","DURATION_SHORT","TYPE_ERROR","TYPE_INFO","NotificationsWrapper","useSharedLink","convertCollab","convertCollabsRequest","convertCollabsResponse","convertGroupContactsResponse","convertItemResponse","convertSharedLinkPermissions","convertSharedLinkSettings","convertUserContactsResponse","USM_TO_API_ACCESS_LEVEL_MAP","useAvatars","useCollaborators","useContacts","useInvites","contentSharingMessages","SharingNotification","accessLevel","api","closeComponent","closeSettings","collaboratorsList","currentUserID","getContacts","isDownloadAvailable","itemID","itemType","ownerEmail","ownerID","permissions","sendInvites","serverURL","setChangeSharedLinkAccessLevel","setChangeSharedLinkPermissionLevel","setGetContacts","setCollaboratorsList","setIsLoading","setItem","setOnAddLink","setOnRemoveLink","setOnSubmitSettings","setSendInvites","setSharedLink","notifications","setNotifications","useState","notificationID","setNotificationID","handleNotificationClose","useCallback","id","updatedNotifications","_objectSpread","createNotification","notificationType","message","createElement","key","duration","onClose","type","handleUpdateSharedLinkSuccess","itemData","item","updatedItem","sharedLink","updatedSharedLink","prevItem","prevSharedLink","handleRemoveSharedLinkSuccess","enterpriseName","changeSharedLinkAccessLevel","changeSharedLinkPermissionLevel","onAddLink","onRemoveLink","onSubmitSettings","handleUpdateSharedLinkError","sharedLinkUpdateError","sharedLinkSettingsUpdateSuccess","handleRemoveSharedLinkError","sharedLinkRemovalSuccess","transformAccess","newAccessLevel","transformPermissions","newSharedLinkPermissionLevel","transformSettings","settings","access","collaboratorsListFromAPI","handleError","collaboratorsLoadingError","avatarsFromAPI","getContactsFn","getContactsError","transformGroups","data","transformUsers","sendInvitesFn","handleSuccess","response","sendInvitesSuccess","prevList","newList","collaborators","newCollab","collab","isCurrentUserOwner","push","sendInvitesError","transformRequest","Fragment","Object","values"],"sources":["../../../src/elements/content-sharing/SharingNotification.js"],"sourcesContent":["// @flow\nimport * as React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport type { MessageDescriptor } from 'react-intl';\nimport API from '../../api';\nimport Notification from '../../components/notification/Notification';\nimport { DURATION_SHORT, TYPE_ERROR, TYPE_INFO } from '../../components/notification/constants';\nimport NotificationsWrapper from '../../components/notification/NotificationsWrapper';\nimport useSharedLink from './hooks/useSharedLink';\nimport {\n    convertCollab,\n    convertCollabsRequest,\n    convertCollabsResponse,\n    convertGroupContactsResponse,\n    convertItemResponse,\n    convertSharedLinkPermissions,\n    convertSharedLinkSettings,\n    convertUserContactsResponse,\n    USM_TO_API_ACCESS_LEVEL_MAP,\n} from '../../features/unified-share-modal/utils/convertData';\nimport useAvatars from './hooks/useAvatars';\nimport useCollaborators from './hooks/useCollaborators';\nimport useContacts from './hooks/useContacts';\nimport useInvites from './hooks/useInvites';\nimport contentSharingMessages from './messages';\nimport type { BoxItemPermission, Collaborations, ItemType, NotificationType } from '../../common/types/core';\nimport type { collaboratorsListType, item as itemFlowType } from '../../features/unified-share-modal/flowTypes';\nimport type {\n    ContentSharingItemAPIResponse,\n    ContentSharingSharedLinkType,\n    GetContactsFnType,\n    SendInvitesFnType,\n    SharedLinkUpdateLevelFnType,\n    SharedLinkUpdateSettingsFnType,\n} from './types';\n\ntype SharingNotificationProps = {\n    accessLevel: string,\n    api: API,\n    closeComponent: () => void,\n    closeSettings: () => void,\n    collaboratorsList: collaboratorsListType | null,\n    currentUserID: string | null,\n    getContacts: GetContactsFnType | null,\n    isDownloadAvailable: boolean,\n    itemID: string,\n    itemType: ItemType,\n    ownerEmail: ?string,\n    ownerID: ?string,\n    permissions: ?BoxItemPermission,\n    sendInvites: SendInvitesFnType | null,\n    serverURL: string,\n    setChangeSharedLinkAccessLevel: (changeSharedLinkAccessLevel: () => SharedLinkUpdateLevelFnType | null) => void,\n    setChangeSharedLinkPermissionLevel: (\n        changeSharedLinkPermissionLevel: () => SharedLinkUpdateLevelFnType | null,\n    ) => void,\n    setCollaboratorsList: (\n        collaboratorsList:\n            | collaboratorsListType\n            | null\n            | ((prevList: collaboratorsListType | null) => collaboratorsListType),\n    ) => void,\n    setGetContacts: (getContacts: () => GetContactsFnType | null) => void,\n    setIsLoading: boolean => void,\n    setItem: ((item: itemFlowType | null) => itemFlowType) => void,\n    setOnAddLink: (addLink: () => SharedLinkUpdateLevelFnType | null) => void,\n    setOnRemoveLink: (removeLink: () => SharedLinkUpdateLevelFnType | null) => void,\n    setOnSubmitSettings: (submitSettings: () => SharedLinkUpdateSettingsFnType | null) => void,\n    setSendInvites: (sendInvites: () => SendInvitesFnType | null) => void,\n    setSharedLink: ((sharedLink: ContentSharingSharedLinkType | null) => ContentSharingSharedLinkType) => void,\n};\n\nfunction SharingNotification({\n    accessLevel,\n    api,\n    closeComponent,\n    closeSettings,\n    collaboratorsList,\n    currentUserID,\n    getContacts,\n    isDownloadAvailable,\n    itemID,\n    itemType,\n    ownerEmail,\n    ownerID,\n    permissions,\n    sendInvites,\n    serverURL,\n    setChangeSharedLinkAccessLevel,\n    setChangeSharedLinkPermissionLevel,\n    setGetContacts,\n    setCollaboratorsList,\n    setIsLoading,\n    setItem,\n    setOnAddLink,\n    setOnRemoveLink,\n    setOnSubmitSettings,\n    setSendInvites,\n    setSharedLink,\n}: SharingNotificationProps) {\n    const [notifications, setNotifications] = React.useState<{ [string]: typeof Notification }>({});\n    const [notificationID, setNotificationID] = React.useState<number>(0);\n\n    // Close a notification\n    const handleNotificationClose = React.useCallback(\n        (id: number) => {\n            const updatedNotifications = { ...notifications };\n            delete updatedNotifications[id];\n            setNotifications(updatedNotifications);\n        },\n        [notifications],\n    );\n\n    // Create a notification\n    const createNotification = React.useCallback(\n        (notificationType: NotificationType, message: MessageDescriptor) => {\n            const updatedNotifications = { ...notifications };\n            if (updatedNotifications[notificationID]) {\n                return;\n            }\n            updatedNotifications[notificationID] = (\n                <Notification\n                    key={notificationID}\n                    duration={DURATION_SHORT}\n                    onClose={() => handleNotificationClose(notificationID)}\n                    type={notificationType}\n                >\n                    <span>\n                        <FormattedMessage {...message} />\n                    </span>\n                </Notification>\n            );\n            setNotifications(updatedNotifications);\n            setNotificationID(notificationID + 1);\n        },\n        [handleNotificationClose, notificationID, notifications],\n    );\n\n    // Handle successful PUT requests to /files or /folders\n    const handleUpdateSharedLinkSuccess = (itemData: ContentSharingItemAPIResponse) => {\n        const { item: updatedItem, sharedLink: updatedSharedLink } = convertItemResponse(itemData);\n        setItem((prevItem: itemFlowType | null) => ({ ...prevItem, ...updatedItem }));\n        setSharedLink((prevSharedLink: ContentSharingSharedLinkType | null) => {\n            return {\n                ...prevSharedLink,\n                ...updatedSharedLink,\n            };\n        }); // merge new shared link data with current shared link data\n    };\n\n    /**\n     * Handle a successful shared link removal request.\n     *\n     * Most of the data for the shared link will be removed, with the exception of the \"canInvite\", \"serverURL\"\n     * and \"enterpriseName\" properties, both of which are still necessary for rendering the form-only version of ContentSharing.\n     * We retain \"serverURL\" and \"enterpriseName\" from the previous shared link, to avoid having to make another call to the Users API.\n     *\n     * @param {ContentSharingItemAPIResponse} itemData\n     */\n    const handleRemoveSharedLinkSuccess = (itemData: ContentSharingItemAPIResponse) => {\n        const { item: updatedItem, sharedLink: updatedSharedLink } = convertItemResponse(itemData);\n        setItem((prevItem: itemFlowType | null) => ({ ...prevItem, ...updatedItem }));\n        setSharedLink((prevSharedLink: ContentSharingSharedLinkType | null) => {\n            return {\n                ...updatedSharedLink,\n                serverURL: prevSharedLink ? prevSharedLink.serverURL : '',\n                enterpriseName: prevSharedLink && prevSharedLink.enterpriseName ? prevSharedLink.enterpriseName : '',\n            };\n        });\n    };\n\n    // Generate shared link CRUD functions for the item\n    const {\n        changeSharedLinkAccessLevel,\n        changeSharedLinkPermissionLevel,\n        onAddLink,\n        onRemoveLink,\n        onSubmitSettings,\n    } = useSharedLink(api, itemID, itemType, permissions, accessLevel, {\n        handleUpdateSharedLinkError: () => {\n            createNotification(TYPE_ERROR, contentSharingMessages.sharedLinkUpdateError);\n            setIsLoading(false);\n            closeSettings();\n        },\n        handleUpdateSharedLinkSuccess: itemData => {\n            createNotification(TYPE_INFO, contentSharingMessages.sharedLinkSettingsUpdateSuccess);\n            handleUpdateSharedLinkSuccess(itemData);\n            setIsLoading(false);\n            closeSettings();\n        },\n        handleRemoveSharedLinkError: () => {\n            createNotification(TYPE_ERROR, contentSharingMessages.sharedLinkUpdateError);\n            setIsLoading(false);\n            closeComponent(); // if this function is provided, it will close the modal\n        },\n        handleRemoveSharedLinkSuccess: itemData => {\n            createNotification(TYPE_INFO, contentSharingMessages.sharedLinkRemovalSuccess);\n            handleRemoveSharedLinkSuccess(itemData);\n            setIsLoading(false);\n            closeComponent();\n        },\n        setIsLoading,\n        transformAccess: newAccessLevel => USM_TO_API_ACCESS_LEVEL_MAP[newAccessLevel],\n        transformPermissions: newSharedLinkPermissionLevel =>\n            convertSharedLinkPermissions(newSharedLinkPermissionLevel),\n        transformSettings: (settings, access) =>\n            convertSharedLinkSettings(settings, access, isDownloadAvailable, serverURL),\n    });\n\n    setChangeSharedLinkAccessLevel(() => changeSharedLinkAccessLevel);\n    setChangeSharedLinkPermissionLevel(() => changeSharedLinkPermissionLevel);\n    setOnAddLink(() => onAddLink);\n    setOnRemoveLink(() => onRemoveLink);\n    setOnSubmitSettings(() => onSubmitSettings);\n\n    // Set the collaborators list\n    const collaboratorsListFromAPI: Collaborations | null = useCollaborators(api, itemID, itemType, {\n        handleError: () => createNotification(TYPE_ERROR, contentSharingMessages.collaboratorsLoadingError),\n    });\n    const avatarsFromAPI = useAvatars(api, itemID, collaboratorsListFromAPI);\n\n    if (collaboratorsListFromAPI && avatarsFromAPI && !collaboratorsList) {\n        setCollaboratorsList(\n            convertCollabsResponse(collaboratorsListFromAPI, avatarsFromAPI, ownerEmail, currentUserID === ownerID),\n        );\n    }\n\n    // Set the getContacts function\n    const getContactsFn: GetContactsFnType | null = useContacts(api, itemID, {\n        handleError: () => createNotification(TYPE_ERROR, contentSharingMessages.getContactsError),\n        transformGroups: data => convertGroupContactsResponse(data),\n        transformUsers: data => convertUserContactsResponse(data, currentUserID),\n    });\n    if (getContactsFn && !getContacts) {\n        setGetContacts(() => getContactsFn);\n    }\n\n    // Set the sendInvites function\n    const sendInvitesFn = useInvites(api, itemID, itemType, {\n        handleSuccess: response => {\n            createNotification(TYPE_INFO, contentSharingMessages.sendInvitesSuccess);\n            setIsLoading(false);\n            setCollaboratorsList((prevList: collaboratorsListType | null) => {\n                const newList = prevList ? { ...prevList } : { collaborators: [] };\n                const newCollab = convertCollab({\n                    collab: response,\n                    ownerEmail,\n                    isCurrentUserOwner: currentUserID === ownerID,\n                });\n                if (newCollab) {\n                    newList.collaborators.push(newCollab);\n                }\n                return newList;\n            });\n            closeComponent();\n        },\n        handleError: () => {\n            createNotification(TYPE_ERROR, contentSharingMessages.sendInvitesError);\n            setIsLoading(false);\n            closeComponent();\n        },\n        setIsLoading,\n        transformRequest: data => convertCollabsRequest(data, collaboratorsList),\n    });\n    if (sendInvitesFn && !sendInvites) {\n        setSendInvites(() => sendInvitesFn);\n    }\n\n    return (\n        <NotificationsWrapper>\n            <>{[...Object.values(notifications)]}</>\n        </NotificationsWrapper>\n    );\n}\n\nexport default SharingNotification;\n"],"mappings":"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","ignoreList":[]}