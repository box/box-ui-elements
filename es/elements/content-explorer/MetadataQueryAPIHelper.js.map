{"version":3,"file":"MetadataQueryAPIHelper.js","names":["cloneDeep","find","getProp","includes","isArray","areFieldValuesEqual","isEmptyValue","isMultiValuesField","JSON_PATCH_OP_ADD","JSON_PATCH_OP_REMOVE","JSON_PATCH_OP_REPLACE","JSON_PATCH_OP_TEST","METADATA_FIELD_TYPE_ENUM","METADATA_FIELD_TYPE_MULTISELECT","FIELD_ITEM_NAME","FIELD_METADATA","FIELD_EXTENSION","FIELD_PERMISSIONS","getMimeTypeFilter","getRangeFilter","getSelectFilter","getStringFilter","mergeQueries","mergeQueryParams","SELECT_TYPES","MetadataQueryAPIHelper","constructor","api","_defineProperty","field","oldValue","newValue","operation","testOp","op","path","value","patchOp","fields","from","metadataQuery","filter","map","split","pop","metadata","templateFields","metadataTemplate","instance","templateScope","templateKey","queryFields","getMetadataQueryFields","queryField","templateField","type","displayName","key","options","enterprise","id","$id","templateSchemaResponse","entries","items","next_marker","nextMarker","metadataQueryResponseData","data","scope","getMetadataAPI","getSchemaByTemplateKey","item","templateOldFields","templateNewFields","itemFields","operations","flatMap","newField","newFieldValue","Number","oldField","f","oldFieldValue","shouldUseItemFieldValue","createJSONPatchOperations","Promise","resolve","reject","getMetadataQueryAPI","queryMetadata","forceFetch","successCallback","errorCallback","verifyQueryFields","then","getTemplateSchemaInfo","getDataWithTypes","collection","catch","file","updateMetadata","forEach","generateOperations","push","bulkUpdateMetadata","filters","argIndex","queries","queryParams","Object","keys","fieldType","result","keysGenerated","arrayValue","Array","v","String","query","reduce","acc","curr","index","customQuery","filterQuery","clonedQuery","clonedFields","filteredQueryParams","buildMetadataQueryParams","query_params","customQueryParams","mergeQuery"],"sources":["../../../src/elements/content-explorer/MetadataQueryAPIHelper.ts"],"sourcesContent":["import cloneDeep from 'lodash/cloneDeep';\nimport find from 'lodash/find';\nimport getProp from 'lodash/get';\nimport includes from 'lodash/includes';\nimport isArray from 'lodash/isArray';\nimport type { MetadataTemplateField } from '@box/metadata-editor';\nimport type { MetadataFieldType } from '@box/metadata-view';\n\nimport API from '../../api';\nimport { areFieldValuesEqual, isEmptyValue, isMultiValuesField } from './utils';\n\nimport {\n    JSON_PATCH_OP_ADD,\n    JSON_PATCH_OP_REMOVE,\n    JSON_PATCH_OP_REPLACE,\n    JSON_PATCH_OP_TEST,\n    METADATA_FIELD_TYPE_ENUM,\n    METADATA_FIELD_TYPE_MULTISELECT,\n} from '../../common/constants';\nimport { FIELD_ITEM_NAME, FIELD_METADATA, FIELD_EXTENSION, FIELD_PERMISSIONS } from '../../constants';\n\nimport type { MetadataQuery as MetadataQueryType, MetadataQueryResponseData } from '../../common/types/metadataQueries';\nimport type {\n    MetadataTemplateSchemaResponse,\n    MetadataTemplate,\n    MetadataFieldValue,\n    MetadataType,\n    MetadataQueryInstanceTypeField,\n} from '../../common/types/metadata';\nimport type { ElementsXhrError, JSONPatchOperations } from '../../common/types/api';\nimport type { Collection, BoxItem } from '../../common/types/core';\nimport {\n    getMimeTypeFilter,\n    getRangeFilter,\n    getSelectFilter,\n    getStringFilter,\n    mergeQueries,\n    mergeQueryParams,\n} from './MetadataQueryBuilder';\nimport type { ExternalFilterValues } from './MetadataViewContainer';\n\ntype SuccessCallback = (metadataQueryCollection: Collection, metadataTemplate: MetadataTemplate) => void;\ntype ErrorCallback = (e: ElementsXhrError) => void;\n\nconst SELECT_TYPES: Array<typeof METADATA_FIELD_TYPE_ENUM | typeof METADATA_FIELD_TYPE_MULTISELECT> = [\n    METADATA_FIELD_TYPE_ENUM,\n    METADATA_FIELD_TYPE_MULTISELECT,\n];\n\nexport default class MetadataQueryAPIHelper {\n    api: API;\n\n    metadataQueryResponseData: MetadataQueryResponseData;\n\n    metadataTemplate: MetadataTemplate;\n\n    templateKey: string;\n\n    templateScope: string;\n\n    metadataQuery: MetadataQueryType;\n\n    constructor(api: API) {\n        this.api = api;\n    }\n\n    createJSONPatchOperations = (\n        field: string,\n        oldValue: MetadataFieldValue | null,\n        newValue: MetadataFieldValue | null,\n    ): JSONPatchOperations => {\n        // check if two values are the same, return empty operations if so\n        if (areFieldValuesEqual(oldValue, newValue)) {\n            return [];\n        }\n\n        let operation = JSON_PATCH_OP_REPLACE;\n\n        if (isEmptyValue(oldValue) && !isEmptyValue(newValue)) {\n            operation = JSON_PATCH_OP_ADD;\n        }\n\n        if (!isEmptyValue(oldValue) && isEmptyValue(newValue)) {\n            operation = JSON_PATCH_OP_REMOVE;\n        }\n\n        const testOp = {\n            op: JSON_PATCH_OP_TEST,\n            path: `/${field}`,\n            value: oldValue,\n        };\n        const patchOp = {\n            op: operation,\n            path: `/${field}`,\n            value: newValue,\n        };\n\n        if (operation === JSON_PATCH_OP_REMOVE) {\n            delete patchOp.value;\n        }\n\n        return operation === JSON_PATCH_OP_ADD ? [patchOp] : [testOp, patchOp];\n    };\n\n    getMetadataQueryFields = (): string[] => {\n        /*\n            Example metadata query:\n            const query = {\n                from: 'enterprise_12345.myAwesomeTemplateKey',\n                fields: [\n                    'name', // base representation field for an item (name, size, etag etc.)\n                    'metadata.enterprise_12345.myAwesomeTemplateKey.field_1', // metadata instance field\n                    'metadata.enterprise_12345.myAwesomeTemplateKey.field_2', // metadata instance field\n                    'metadata.enterprise_12345.myAwesomeTemplateKey.field_3' // metadata instance field\n                ],\n                ancestor_folder_id: 0,\n            };\n\n            This function will return ['field_1', 'field_2', 'field_3']\n        */\n        const { fields = [], from } = this.metadataQuery;\n        return fields.filter(field => field.includes(from)).map(field => field.split('.').pop());\n    };\n\n    flattenMetadata = (metadata?: MetadataType): MetadataType => {\n        const templateFields = getProp(this.metadataTemplate, 'fields', []);\n        const instance = getProp(metadata, `${this.templateScope}.${this.templateKey}`);\n\n        if (!instance) {\n            return {};\n        }\n\n        const queryFields = this.getMetadataQueryFields();\n\n        const fields = queryFields.map((queryField: string) => {\n            const templateField = find(templateFields, ['key', queryField]);\n            const type = getProp(templateField, 'type'); // get data type\n            const displayName = getProp(templateField, 'displayName', queryField); // get displayName, defaults to key\n\n            const field: MetadataQueryInstanceTypeField = {\n                key: `${FIELD_METADATA}.${this.templateScope}.${this.templateKey}.${queryField}`,\n                value: instance[queryField],\n                type,\n                displayName,\n            };\n\n            if (includes(SELECT_TYPES, type)) {\n                // get \"options\" for enums or multiselects\n                field.options = getProp(templateField, 'options');\n            }\n\n            return field;\n        });\n\n        return {\n            enterprise: {\n                fields,\n                id: instance.$id,\n            },\n        };\n    };\n\n    getDataWithTypes = (templateSchemaResponse?: MetadataTemplateSchemaResponse): Collection => {\n        this.metadataTemplate = getProp(templateSchemaResponse, 'data');\n\n        const { entries: items, next_marker: nextMarker }: MetadataQueryResponseData = this.metadataQueryResponseData;\n\n        return {\n            items,\n            nextMarker,\n        };\n    };\n\n    getTemplateSchemaInfo = (data: MetadataQueryResponseData): Promise<MetadataTemplateSchemaResponse | void> => {\n        this.metadataQueryResponseData = data;\n\n        const [scope, key] = this.metadataQuery.from.split('.');\n        this.templateScope = scope;\n        this.templateKey = key;\n\n        return this.api.getMetadataAPI(true).getSchemaByTemplateKey(this.templateKey);\n    };\n\n    /**\n     * Generate operations for all fields update in the metadata sidepanel\n     *\n     * @private\n     * @return {JSONPatchOperations}\n     */\n    generateOperations = (\n        item: BoxItem,\n        templateOldFields: MetadataTemplateField[],\n        templateNewFields: MetadataTemplateField[],\n    ): JSONPatchOperations => {\n        const { scope, templateKey } = this.metadataTemplate;\n        const itemFields = item.metadata[scope][templateKey];\n        const operations = templateNewFields.flatMap(newField => {\n            let newFieldValue = newField.value;\n            const { key, type } = newField;\n            // when retrieve value from float type field, it gives a string instead\n            if (type === 'float' && newFieldValue !== '') {\n                newFieldValue = Number(newFieldValue);\n            }\n            const oldField = templateOldFields.find(f => f.key === key);\n            const oldFieldValue = oldField.value;\n\n            /*\n                Generate operations array based on all the fields' orignal value and the incoming updated value.\n\n                Edge Case:\n                    If there are multiple items shared different value for enum or multi-select field, the form will\n                    return 'Multiple values' as the value. In this case, it needs to generate operation based on the\n                    actual item's field value.\n            */\n            const shouldUseItemFieldValue =\n                isMultiValuesField(type as MetadataFieldType, oldFieldValue) &&\n                !isMultiValuesField(type as MetadataFieldType, newFieldValue);\n\n            return this.createJSONPatchOperations(\n                key,\n                shouldUseItemFieldValue ? itemFields[key] : oldFieldValue,\n                newFieldValue,\n            );\n        });\n\n        return operations;\n    };\n\n    queryMetadata = (): Promise<MetadataQueryResponseData> => {\n        return new Promise((resolve, reject) => {\n            this.api.getMetadataQueryAPI().queryMetadata(this.metadataQuery, resolve, reject, { forceFetch: true });\n        });\n    };\n\n    fetchMetadataQueryResults = (\n        metadataQuery: MetadataQueryType,\n        successCallback: SuccessCallback,\n        errorCallback: ErrorCallback,\n        fields?: ExternalFilterValues,\n    ): Promise<void> => {\n        this.metadataQuery = this.verifyQueryFields(metadataQuery, fields);\n\n        return this.queryMetadata()\n            .then(this.getTemplateSchemaInfo)\n            .then(this.getDataWithTypes)\n            .then((collection: Collection) => {\n                return successCallback(collection, this.metadataTemplate);\n            })\n            .catch(errorCallback);\n    };\n\n    updateMetadata = (\n        file: BoxItem,\n        field: string,\n        oldValue: MetadataFieldValue | null,\n        newValue: MetadataFieldValue | null,\n        successCallback: () => void,\n        errorCallback: ErrorCallback,\n    ): Promise<void> => {\n        const operations = this.createJSONPatchOperations(field, oldValue, newValue);\n        return this.api\n            .getMetadataAPI(true)\n            .updateMetadata(file, this.metadataTemplate, operations, successCallback, errorCallback);\n    };\n\n    updateMetadataWithOperations = (\n        item: BoxItem,\n        operations: JSONPatchOperations,\n        successCallback: () => void,\n        errorCallback: ErrorCallback,\n    ): Promise<void> => {\n        return this.api\n            .getMetadataAPI(true)\n            .updateMetadata(item, this.metadataTemplate, operations, successCallback, errorCallback);\n    };\n\n    bulkUpdateMetadata = (\n        items: BoxItem[],\n        templateOldFields: MetadataTemplateField[],\n        templateNewFields: MetadataTemplateField[],\n        successCallback: () => void,\n        errorCallback: ErrorCallback,\n    ): Promise<void> => {\n        const operations: JSONPatchOperations = [];\n        items.forEach(item => {\n            const operation = this.generateOperations(item, templateOldFields, templateNewFields);\n            operations.push(operation);\n        });\n        return this.api\n            .getMetadataAPI(true)\n            .bulkUpdateMetadata(items, this.metadataTemplate, operations, successCallback, errorCallback);\n    };\n\n    buildMetadataQueryParams = (filters: ExternalFilterValues) => {\n        let argIndex = 0;\n        let queries: string[] = [];\n        let queryParams: { [key: string]: number | Date | string } = {};\n\n        if (filters) {\n            Object.keys(filters).forEach(key => {\n                const filter = filters[key];\n                if (!filter) {\n                    return;\n                }\n\n                const { fieldType, value } = filter;\n\n                switch (fieldType) {\n                    case 'date':\n                    case 'float': {\n                        if (typeof value === 'object' && value !== null && 'range' in value) {\n                            const result = getRangeFilter(value, key, argIndex);\n                            queryParams = mergeQueryParams(queryParams, result.queryParams);\n                            queries = mergeQueries(queries, result.queries);\n                            argIndex += result.keysGenerated;\n                            break;\n                        }\n                        break;\n                    }\n                    case 'enum':\n                    case 'multiSelect': {\n                        const arrayValue = Array.isArray(value) ? value.map(v => String(v)) : [String(value)];\n                        let result;\n                        if (key === 'mimetype-filter') {\n                            result = getMimeTypeFilter(arrayValue, key, argIndex);\n                        } else {\n                            result = getSelectFilter(arrayValue, key, argIndex);\n                        }\n                        queryParams = mergeQueryParams(queryParams, result.queryParams);\n                        queries = mergeQueries(queries, result.queries);\n                        argIndex += result.keysGenerated;\n                        break;\n                    }\n\n                    case 'string': {\n                        if (value && value[0]) {\n                            const result = getStringFilter(value[0], key, argIndex);\n                            queryParams = mergeQueryParams(queryParams, result.queryParams);\n                            queries = mergeQueries(queries, result.queries);\n                            argIndex += result.keysGenerated;\n                        }\n                        break;\n                    }\n\n                    default:\n                        break;\n                }\n            });\n        }\n\n        const query = queries.reduce((acc, curr, index) => {\n            if (index > 0) {\n                acc += ` AND ${curr}`;\n            } else {\n                acc = curr;\n            }\n            return acc;\n        }, '');\n\n        return {\n            queryParams,\n            query,\n        };\n    };\n\n    mergeQuery = (customQuery: string, filterQuery: string): string => {\n        if (!customQuery) {\n            return filterQuery;\n        }\n        if (!filterQuery) {\n            return customQuery;\n        }\n        // Merge queries with AND operator\n        return `${customQuery} AND ${filterQuery}`;\n    };\n\n    /**\n     * Verify that the metadata query has required fields and update it if necessary\n     * For a file item, default fields included in the response are \"type\", \"id\", \"etag\"\n     *\n     * @param {MetadataQueryType} metadataQuery metadata query object\n     * @param {ExternalFilterValues} [fields] optional filter values to apply to the metadata query\n     * @return {MetadataQueryType} updated metadata query object with required fields\n     */\n    verifyQueryFields = (metadataQuery: MetadataQueryType, fields?: ExternalFilterValues): MetadataQueryType => {\n        const clonedQuery = cloneDeep(metadataQuery);\n        const clonedFields = isArray(clonedQuery.fields) ? clonedQuery.fields : [];\n\n        if (fields) {\n            const { query: filterQuery, queryParams: filteredQueryParams } = this.buildMetadataQueryParams(fields);\n            const { query: customQuery, query_params: customQueryParams } = clonedQuery;\n            const query = this.mergeQuery(customQuery, filterQuery);\n            const queryParams = mergeQueryParams(filteredQueryParams, customQueryParams);\n            if (query) {\n                clonedQuery.query = query;\n                clonedQuery.query_params = queryParams;\n            }\n        }\n        // Make sure the query fields array has \"name\" field which is necessary to display info.\n        if (!clonedFields.includes(FIELD_ITEM_NAME)) {\n            clonedFields.push(FIELD_ITEM_NAME);\n        }\n\n        if (!clonedFields.includes(FIELD_EXTENSION)) {\n            clonedFields.push(FIELD_EXTENSION);\n        }\n\n        // This field is necessary to check if the user has permission to update metadata\n        if (!clonedFields.includes(FIELD_PERMISSIONS)) {\n            clonedFields.push(FIELD_PERMISSIONS);\n        }\n\n        clonedQuery.fields = clonedFields;\n\n        return clonedQuery;\n    };\n}\n"],"mappings":"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","ignoreList":[]}