{"version":3,"file":"MetadataQueryBuilder.js","names":["isNil","getFileExtensions","mergeQueryParams","targetParams","sourceParams","_objectSpread","mergeQueries","targetQueries","sourceQueries","generateArgKey","key","index","purifyKey","replace","escapeValue","value","getStringFilter","filterValue","fieldKey","argIndexStart","currentArgIndex","argKey","queryParams","queries","keysGenerated","isInvalid","getRangeFilter","range","gt","lt","argKeyGt","argKeyLt","push","getSelectFilter","Array","isArray","length","multiSelectQueryParams","Object","fromEntries","map","String","keys","join","getMimeTypeFilter","extensions","hasFolder","extension","folderArgKey","flattenExtensions","flat","extensionQueryParams","_extends","finalQueries"],"sources":["../../../src/elements/content-explorer/MetadataQueryBuilder.ts"],"sourcesContent":["import isNil from 'lodash/isNil';\nimport { getFileExtensions } from './utils';\n\ntype QueryResult = {\n    queryParams: { [key: string]: number | Date | string };\n    queries: string[];\n    keysGenerated: number;\n};\n\n// Custom type for range filters\ntype SimpleRangeType = {\n    range: {\n        gt: number | string;\n        lt: number | string;\n    };\n};\n\n// Union type for filter values\ntype SimpleFilterValue = string[] | SimpleRangeType;\n\nexport const mergeQueryParams = (\n    targetParams: { [key: string]: number | Date | string },\n    sourceParams: { [key: string]: number | Date | string },\n): { [key: string]: number | Date | string } => {\n    return { ...targetParams, ...sourceParams };\n};\n\nexport const mergeQueries = (targetQueries: string[], sourceQueries: string[]): string[] => {\n    return [...targetQueries, ...sourceQueries];\n};\n\nconst generateArgKey = (key: string, index: number): string => {\n    const purifyKey = key.replace(/[^\\w]/g, '_');\n    return `arg_${purifyKey}_${index}`;\n};\n\nconst escapeValue = (value: string): string => value.replace(/([_%])/g, '\\\\$1');\n\nexport const getStringFilter = (filterValue: string, fieldKey: string, argIndexStart: number): QueryResult => {\n    let currentArgIndex = argIndexStart;\n\n    const argKey = generateArgKey(fieldKey, (currentArgIndex += 1));\n    return {\n        queryParams: { [argKey]: `%${escapeValue(filterValue)}%` },\n        queries: [`(${fieldKey} ILIKE :${argKey})`],\n        keysGenerated: currentArgIndex - argIndexStart,\n    };\n};\n\nconst isInvalid = (value: number | string) => {\n    return isNil(value) || value === '';\n};\n\nexport const getRangeFilter = (\n    filterValue: SimpleFilterValue,\n    fieldKey: string,\n    argIndexStart: number,\n): QueryResult => {\n    let currentArgIndex = argIndexStart;\n\n    if (filterValue && typeof filterValue === 'object' && 'range' in filterValue && filterValue.range) {\n        const { gt, lt } = filterValue.range;\n        const queryParams: { [key: string]: number | string } = {};\n        const queries: string[] = [];\n\n        if (!isInvalid(gt) && !isInvalid(lt)) {\n            // Both gt and lt: between values\n            const argKeyGt = generateArgKey(fieldKey, (currentArgIndex += 1));\n            const argKeyLt = generateArgKey(fieldKey, (currentArgIndex += 1));\n            queryParams[argKeyGt] = gt;\n            queryParams[argKeyLt] = lt;\n            queries.push(`(${fieldKey} >= :${argKeyGt} AND ${fieldKey} <= :${argKeyLt})`);\n        } else if (!isInvalid(gt)) {\n            // Only gt: greater than\n            const argKey = generateArgKey(fieldKey, (currentArgIndex += 1));\n            queryParams[argKey] = gt;\n            queries.push(`(${fieldKey} >= :${argKey})`);\n        } else if (!isInvalid(lt)) {\n            // Only lt: less than\n            const argKey = generateArgKey(fieldKey, (currentArgIndex += 1));\n            queryParams[argKey] = lt;\n            queries.push(`(${fieldKey} <= :${argKey})`);\n        }\n\n        return {\n            queryParams,\n            queries,\n            keysGenerated: currentArgIndex - argIndexStart,\n        };\n    }\n    return {\n        queryParams: {},\n        queries: [],\n        keysGenerated: 0,\n    };\n};\n\nexport const getSelectFilter = (filterValue: string[], fieldKey: string, argIndexStart: number): QueryResult => {\n    if (!Array.isArray(filterValue) || filterValue.length === 0) {\n        return {\n            queryParams: {},\n            queries: [],\n            keysGenerated: 0,\n        };\n    }\n\n    let currentArgIndex = argIndexStart;\n\n    const multiSelectQueryParams = Object.fromEntries(\n        filterValue.map(value => {\n            currentArgIndex += 1;\n            return [generateArgKey(fieldKey, currentArgIndex), String(value)];\n        }),\n    );\n\n    return {\n        queryParams: multiSelectQueryParams,\n        queries: [\n            `(${fieldKey} HASANY (${Object.keys(multiSelectQueryParams)\n                .map(argKey => `:${argKey}`)\n                .join(', ')}))`,\n        ],\n        keysGenerated: currentArgIndex - argIndexStart,\n    };\n};\n\nexport const getMimeTypeFilter = (filterValue: string[], fieldKey: string, argIndexStart: number): QueryResult => {\n    if (!Array.isArray(filterValue) || filterValue.length === 0) {\n        return {\n            queryParams: {},\n            queries: [],\n            keysGenerated: 0,\n        };\n    }\n\n    let currentArgIndex = argIndexStart;\n    const queryParams: { [key: string]: number | Date | string } = {};\n    const queries: string[] = [];\n\n    // Handle specific extensions and folder type\n    const extensions: string[][] = [];\n    let hasFolder = false;\n    for (const extension of filterValue) {\n        if (extension === 'folderType' && !hasFolder) {\n            currentArgIndex += 1;\n            const folderArgKey = generateArgKey('mime_folderType', currentArgIndex);\n            queryParams[folderArgKey] = 'folder';\n            queries.push(`(item.type = :${folderArgKey})`);\n            hasFolder = true;\n        } else {\n            extensions.push(getFileExtensions(extension));\n        }\n    }\n\n    // flat the array of arrays\n    const flattenExtensions = extensions.flat();\n    // Handle extensions in batch if any exist\n    if (flattenExtensions.length > 0) {\n        const extensionQueryParams = Object.fromEntries(\n            flattenExtensions.map(extension => {\n                currentArgIndex += 1;\n                return [generateArgKey(fieldKey, currentArgIndex), extension];\n            }),\n        );\n\n        Object.assign(queryParams, extensionQueryParams);\n        queries.push(\n            `(item.extension IN (${Object.keys(extensionQueryParams)\n                .map(argKey => `:${argKey}`)\n                .join(', ')}))`,\n        );\n    }\n\n    // Combine queries with OR if multiple exist\n    const finalQueries = queries.length > 1 ? [`(${queries.join(' OR ')})`] : queries;\n\n    return {\n        queryParams,\n        queries: finalQueries,\n        keysGenerated: currentArgIndex - argIndexStart,\n    };\n};\n"],"mappings":"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","ignoreList":[]}