{"version":3,"file":"MetadataViewContainer.js","names":["React","useIntl","IconColumnVariant","MetadataView","PredefinedFilterName","cloneDeep","FIELD_ITEM_NAME","messages","ITEM_FILTER_NAME","trimMetadataFieldPrefix","column","startsWith","split","length","parts","slice","join","transformInitialFilterValuesToInternal","publicValues","undefined","Object","entries","reduce","acc","key","value","Array","isArray","enum","convertFilterValuesToExternal","fields","field","options","fieldType","transformedValue","transformInternalFieldsToPublic","MetadataViewContainer","_ref","actionBarProps","columns","currentCollection","metadataTemplate","onMetadataFilter","onSortChange","onSortChangeInternal","tableProps","rest","_objectWithoutProperties","_excluded","formatMessage","items","initialFilterValues","initialFilterValuesProp","onFilterSubmit","newColumns","useMemo","clonedColumns","hasItemNameField","some","col","id","allowsSorting","isItemMetadata","isRowHeader","minWidth","textValue","name","type","filterGroups","clonedTemplate","columnIds","map","filter","columnId","trimmedColumnId","displayName","shouldRenderChip","toggleable","filters","handleFilterSubmit","useCallback","transformed","handleSortChange","direction","trimmedColumn","String","onSortChangeExternal","transformedActionBarProps","_objectSpread","sortDropdownProps","predefinedFilterOptions","KeywordSearchFilterGroup","isDisabled","LocationFilterGroup","newTableProps","iconColumnVariant","INLINE","createElement","_extends"],"sources":["../../../src/elements/content-explorer/MetadataViewContainer.tsx"],"sourcesContent":["import * as React from 'react';\nimport { useIntl } from 'react-intl';\nimport {\n    EnumType,\n    FloatType,\n    MetadataFormFieldValue,\n    MetadataTemplateFieldOption,\n    RangeType,\n} from '@box/metadata-filter';\nimport {\n    IconColumnVariant,\n    MetadataView,\n    PredefinedFilterName,\n    type FilterValues,\n    type MetadataViewProps,\n    type MetadataFieldType,\n    type Column,\n} from '@box/metadata-view';\nimport { type Key } from '@react-types/shared';\nimport cloneDeep from 'lodash/cloneDeep';\n\nimport { SortDescriptor } from 'react-aria-components';\n\nimport { FIELD_ITEM_NAME } from '../../constants';\nimport type { Collection } from '../../common/types/core';\nimport type { MetadataTemplate, MetadataTemplateField } from '../../common/types/metadata';\n\nimport messages from '../common/messages';\n\n// Public-friendly version of MetadataFormFieldValue from @box/metadata-filter\n// (string[] for enum type, range/float objects stay the same)\ntype EnumToStringArray<T> = T extends EnumType ? string[] : T;\ntype ExternalMetadataFormFieldValue = EnumToStringArray<MetadataFormFieldValue>;\n\nexport type ExternalFilterValues = Record<\n    string,\n    {\n        options?: FilterValues[string]['options'] | MetadataTemplateFieldOption[];\n        fieldType: FilterValues[string]['fieldType'] | MetadataFieldType;\n        value: ExternalMetadataFormFieldValue;\n    }\n>;\n\ntype ActionBarProps = Omit<\n    MetadataViewProps['actionBarProps'],\n    'initialFilterValues' | 'onFilterSubmit' | 'filterGroups'\n> & {\n    initialFilterValues?: ExternalFilterValues;\n    onFilterSubmit?: (filterValues: ExternalFilterValues) => void;\n};\n\nconst ITEM_FILTER_NAME = 'item_name';\n\n/**\n * Helper function to trim metadataFieldNamePrefix from column names\n * For example: 'metadata.enterprise_1515946.mdViewTemplate1.industry' -> 'industry'\n */\nfunction trimMetadataFieldPrefix(column: string): string {\n    // Check if the column starts with 'metadata.' and contains at least 2 dots\n    if (column.startsWith('metadata.') && column.split('.').length >= 3) {\n        // Split by dots and take everything after the first 3 parts\n        // metadata.enterprise_1515946.mdViewTemplate1.industry -> industry\n        const parts = column.split('.');\n        return parts.slice(3).join('.');\n    }\n    return column;\n}\n\nfunction transformInitialFilterValuesToInternal(\n    publicValues?: ExternalFilterValues,\n): Record<string, { value: MetadataFormFieldValue }> | undefined {\n    if (!publicValues) return undefined;\n\n    return Object.entries(publicValues).reduce<Record<string, { value: MetadataFormFieldValue }>>(\n        (acc, [key, { value }]) => {\n            acc[key] = Array.isArray(value) ? { value: { enum: value } } : { value };\n            return acc;\n        },\n        {},\n    );\n}\n\nexport function convertFilterValuesToExternal(fields: FilterValues): ExternalFilterValues {\n    return Object.entries(fields).reduce<ExternalFilterValues>((acc, [key, field]) => {\n        const { value, options, fieldType } = field;\n\n        // Transform the value based on its type\n        const transformedValue: ExternalMetadataFormFieldValue =\n            'enum' in value && Array.isArray(value.enum)\n                ? value.enum // Convert enum type to string array\n                : (value as RangeType | FloatType); // Keep range/float objects as-is\n\n        acc[key === ITEM_FILTER_NAME ? FIELD_ITEM_NAME : key] = {\n            options,\n            fieldType,\n            value: transformedValue,\n        };\n\n        return acc;\n    }, {});\n}\n\n// Internal helper function for component use\nfunction transformInternalFieldsToPublic(fields: FilterValues): ExternalFilterValues {\n    return convertFilterValuesToExternal(fields);\n}\n\nexport interface MetadataViewContainerProps extends Omit<MetadataViewProps, 'items' | 'actionBarProps'> {\n    actionBarProps?: ActionBarProps;\n    currentCollection: Collection;\n    metadataTemplate: MetadataTemplate;\n    onMetadataFilter: (fields: ExternalFilterValues) => void;\n    /* Internally controlled onSortChange prop for the MetadataView component. */\n    onSortChange?: (sortBy: Key, sortDirection: string) => void;\n}\n\nconst MetadataViewContainer = ({\n    actionBarProps,\n    columns,\n    currentCollection,\n    metadataTemplate,\n    onMetadataFilter,\n    onSortChange: onSortChangeInternal,\n    tableProps,\n    ...rest\n}: MetadataViewContainerProps) => {\n    const { formatMessage } = useIntl();\n    const { items = [] } = currentCollection;\n    const { initialFilterValues: initialFilterValuesProp, onFilterSubmit } = actionBarProps ?? {};\n\n    const newColumns = React.useMemo(() => {\n        let clonedColumns = cloneDeep(columns);\n\n        const hasItemNameField = clonedColumns.some((col: Column) => col.id === FIELD_ITEM_NAME);\n\n        if (!hasItemNameField) {\n            clonedColumns = [\n                {\n                    allowsSorting: true,\n                    id: FIELD_ITEM_NAME,\n                    isItemMetadata: true,\n                    isRowHeader: true,\n                    minWidth: 300,\n                    textValue: formatMessage(messages.name),\n                    type: 'string',\n                },\n                ...clonedColumns,\n            ];\n        }\n\n        return clonedColumns;\n    }, [columns, formatMessage]);\n\n    const filterGroups = React.useMemo(() => {\n        const clonedTemplate = cloneDeep(metadataTemplate);\n        let fields = clonedTemplate?.fields || [];\n\n        // Filter fields to only include those that have corresponding columns\n        const columnIds = newColumns.map(col => col.id);\n        fields = fields.filter((field: MetadataTemplateField) => {\n            // For metadata fields, check if the column ID matches the field key\n            // Column IDs for metadata fields are typically in format: metadata.template.fieldKey\n            return columnIds.some(columnId => {\n                const trimmedColumnId = trimMetadataFieldPrefix(columnId);\n                return trimmedColumnId === field.key;\n            });\n        });\n\n        // Check if item_name field already exists to avoid duplicates\n        const hasItemNameField = fields.some((field: MetadataTemplateField) => field.key === ITEM_FILTER_NAME);\n\n        if (!hasItemNameField) {\n            fields = [\n                {\n                    key: ITEM_FILTER_NAME,\n                    displayName: formatMessage(messages.name),\n                    type: 'string',\n                    shouldRenderChip: true,\n                },\n                ...fields,\n            ];\n        }\n\n        return [\n            {\n                toggleable: true,\n                filters:\n                    fields?.map(field => {\n                        return {\n                            id: field.key,\n                            name: field.displayName,\n                            fieldType: field.type,\n                            options: field.options?.map(({ key }) => key) || [],\n                            shouldRenderChip: true,\n                        };\n                    }) || [],\n            },\n        ];\n    }, [formatMessage, metadataTemplate, newColumns]);\n\n    const initialFilterValues = React.useMemo(\n        () => transformInitialFilterValuesToInternal(initialFilterValuesProp),\n        [initialFilterValuesProp],\n    );\n\n    const handleFilterSubmit = React.useCallback(\n        (fields: FilterValues) => {\n            const transformed = transformInternalFieldsToPublic(fields);\n            onMetadataFilter(transformed);\n            if (onFilterSubmit) {\n                onFilterSubmit(transformed);\n            }\n        },\n        [onFilterSubmit, onMetadataFilter],\n    );\n\n    // Create a wrapper function that calls both. The wrapper function should follow the signature of onSortChange from RAC\n    const handleSortChange = React.useCallback(\n        ({ column, direction }: SortDescriptor) => {\n            // Call the internal onSortChange first\n            // API accepts asc/desc \"https://developer.box.com/reference/post-metadata-queries-execute-read/\"\n            if (onSortChangeInternal) {\n                const trimmedColumn = trimMetadataFieldPrefix(String(column));\n                onSortChangeInternal(trimmedColumn, direction === 'ascending' ? 'ASC' : 'DESC');\n            }\n            const onSortChangeExternal = tableProps?.onSortChange;\n            // Then call the original customer-provided onSortChange if it exists\n            // Accepts \"ascending\" / \"descending\" (https://react-spectrum.adobe.com/react-aria/Table.html)\n            if (onSortChangeExternal) {\n                onSortChangeExternal({\n                    column,\n                    direction,\n                });\n            }\n        },\n        [onSortChangeInternal, tableProps],\n    );\n\n    const transformedActionBarProps = React.useMemo(() => {\n        return {\n            ...actionBarProps,\n            initialFilterValues,\n            onFilterSubmit: handleFilterSubmit,\n            filterGroups,\n            sortDropdownProps: {\n                onSortChange: handleSortChange,\n            },\n            predefinedFilterOptions: {\n                [PredefinedFilterName.KeywordSearchFilterGroup]: { isDisabled: true },\n                [PredefinedFilterName.LocationFilterGroup]: { isDisabled: true },\n            },\n        };\n    }, [actionBarProps, initialFilterValues, handleFilterSubmit, handleSortChange, filterGroups]);\n\n    // Create new tableProps with our wrapper function\n    const newTableProps = {\n        ...tableProps,\n        iconColumnVariant: IconColumnVariant.INLINE,\n        onSortChange: handleSortChange,\n    };\n\n    return (\n        <MetadataView\n            actionBarProps={transformedActionBarProps}\n            columns={newColumns}\n            items={items}\n            tableProps={newTableProps}\n            {...rest}\n        />\n    );\n};\n\nexport default MetadataViewContainer;\n"],"mappings":"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","ignoreList":[]}