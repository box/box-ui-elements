{"version":3,"file":"MetadataSidePanel.js","names":["React","useState","useIntl","IconButton","SidePanel","Text","useNotification","XMark","FileDefault","AutofillContextProvider","MetadataInstance","MetadataInstanceForm","useTemplateInstance","useSelectedItemText","messages","MetadataSidePanel","currentCollection","metadataTemplate","onClose","onUpdate","refreshCollection","selectedItemIds","addNotification","formatMessage","isEditing","setIsEditing","isUnsavedChangesModalOpen","setIsUnsavedChangesModalOpen","selectedItemText","selectedItems","items","filter","item","has","id","templateInstance","handleMetadataInstanceEdit","handleMetadataInstanceFormCancel","handleMetadataInstanceFormDiscardUnsavedChanges","handleUpdateMetadataSuccess","closeButtonAriaLabel","close","sensitivity","styledText","metadataUpdateSuccessNotification","numSelected","length","typeIconAriaLabel","success","variant","handleUpdateMetadataError","metadataUpdateErrorNotification","error","handleMetadataInstanceFormSubmit","values","operations","fields","templateNewFields","metadata","templateOldFields","createElement","Header","as","sidebarMetadataTitle","className","color","icon","onClick","size","ScrollableContainer","fetchSuggestions","isAiSuggestionsFeatureEnabled","areAiSuggestionsAvailable","isBetaLanguageEnabled","isDeleteButtonDisabled","isDeleteConfirmationModalCheckboxEnabled","isLargeFile","isMultilevelTaxonomyFieldEnabled","selectedTemplateInstance","onCancel","onChange","onDelete","onDiscardUnsavedChanges","onSubmit","taxonomyOptionsFetcher","onEdit","taxonomyNodeFetcher"],"sources":["../../../src/elements/content-explorer/MetadataSidePanel.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { useIntl } from 'react-intl';\n\nimport { IconButton, SidePanel, Text, useNotification } from '@box/blueprint-web';\nimport { XMark } from '@box/blueprint-web-assets/icons/Fill/index';\nimport { FileDefault } from '@box/blueprint-web-assets/icons/Line/index';\nimport {\n    AutofillContextProvider,\n    FormValues,\n    JSONPatchOperations,\n    MetadataInstance,\n    MetadataInstanceForm,\n    type MetadataTemplateField,\n} from '@box/metadata-editor';\n\nimport type { Selection } from 'react-aria-components';\nimport type { BoxItem, Collection } from '../../common/types/core';\nimport type { MetadataTemplate } from '../../common/types/metadata';\nimport { useTemplateInstance, useSelectedItemText } from './utils';\n\nimport messages from '../common/messages';\n\nimport './MetadataSidePanel.scss';\n\nexport interface MetadataSidePanelProps {\n    currentCollection: Collection;\n    metadataTemplate: MetadataTemplate;\n    onClose: () => void;\n    onUpdate: (\n        items: BoxItem[],\n        operations: JSONPatchOperations,\n        templateOldFields: MetadataTemplateField[],\n        templateNewFields: MetadataTemplateField[],\n        successCallback: () => void,\n        errorCallback: ErrorCallback,\n    ) => Promise<void>;\n    refreshCollection: () => void;\n    selectedItemIds: Selection;\n}\n\nconst MetadataSidePanel = ({\n    currentCollection,\n    metadataTemplate,\n    onClose,\n    onUpdate,\n    refreshCollection,\n    selectedItemIds,\n}: MetadataSidePanelProps) => {\n    const { addNotification } = useNotification();\n    const { formatMessage } = useIntl();\n    const [isEditing, setIsEditing] = useState<boolean>(false);\n    const [isUnsavedChangesModalOpen, setIsUnsavedChangesModalOpen] = useState<boolean>(false);\n\n    const selectedItemText = useSelectedItemText(currentCollection, selectedItemIds);\n    const selectedItems =\n        selectedItemIds === 'all'\n            ? currentCollection.items\n            : currentCollection.items.filter(item => selectedItemIds.has(item.id));\n    const templateInstance = useTemplateInstance(metadataTemplate, selectedItems, isEditing);\n\n    const handleMetadataInstanceEdit = () => {\n        setIsEditing(true);\n    };\n\n    const handleMetadataInstanceFormCancel = () => {\n        setIsEditing(false);\n    };\n\n    const handleMetadataInstanceFormDiscardUnsavedChanges = () => {\n        setIsUnsavedChangesModalOpen(false);\n        setIsEditing(false);\n    };\n\n    const handleUpdateMetadataSuccess = () => {\n        addNotification({\n            closeButtonAriaLabel: formatMessage(messages.close),\n            sensitivity: 'foreground',\n            styledText: formatMessage(messages.metadataUpdateSuccessNotification, {\n                numSelected: selectedItems.length,\n            }),\n            typeIconAriaLabel: formatMessage(messages.success),\n            variant: 'success',\n        });\n        setIsEditing(false);\n        refreshCollection();\n    };\n\n    const handleUpdateMetadataError = () => {\n        addNotification({\n            closeButtonAriaLabel: formatMessage(messages.close),\n            sensitivity: 'foreground',\n            styledText: formatMessage(messages.metadataUpdateErrorNotification),\n            typeIconAriaLabel: formatMessage(messages.error),\n            variant: 'error',\n        });\n    };\n\n    const handleMetadataInstanceFormSubmit = async (values: FormValues, operations: JSONPatchOperations) => {\n        const { fields: templateNewFields } = values.metadata;\n        const { fields: templateOldFields } = templateInstance;\n\n        await onUpdate(\n            selectedItems,\n            operations,\n            templateOldFields,\n            templateNewFields,\n            handleUpdateMetadataSuccess,\n            handleUpdateMetadataError,\n        );\n    };\n\n    return (\n        <SidePanel variant=\"persistent\">\n            <SidePanel.Header>\n                <div>\n                    <Text as=\"span\" variant=\"titleLarge\">\n                        {formatMessage(messages.sidebarMetadataTitle)}\n                    </Text>\n                    <div className=\"bce-MetadataSidePanel-subtitle\">\n                        <FileDefault />\n                        <Text as=\"span\" color=\"textOnLightSecondary\" variant=\"subtitle\">\n                            {selectedItemText}\n                        </Text>\n                    </div>\n                </div>\n                <IconButton aria-label={formatMessage(messages.close)} icon={XMark} onClick={onClose} size=\"large\" />\n            </SidePanel.Header>\n            <SidePanel.ScrollableContainer>\n                <div className=\"bce-MetadataSidePanel-content\">\n                    <AutofillContextProvider fetchSuggestions={null} isAiSuggestionsFeatureEnabled={false}>\n                        {isEditing ? (\n                            <MetadataInstanceForm\n                                areAiSuggestionsAvailable={false}\n                                isAiSuggestionsFeatureEnabled={false}\n                                isBetaLanguageEnabled={false}\n                                isDeleteButtonDisabled={true}\n                                isDeleteConfirmationModalCheckboxEnabled={false}\n                                isLargeFile={false}\n                                isMultilevelTaxonomyFieldEnabled={false}\n                                isUnsavedChangesModalOpen={isUnsavedChangesModalOpen}\n                                selectedTemplateInstance={templateInstance}\n                                onCancel={handleMetadataInstanceFormCancel}\n                                onChange={null}\n                                onDelete={null}\n                                onDiscardUnsavedChanges={handleMetadataInstanceFormDiscardUnsavedChanges}\n                                onSubmit={handleMetadataInstanceFormSubmit}\n                                setIsUnsavedChangesModalOpen={setIsUnsavedChangesModalOpen}\n                                taxonomyOptionsFetcher={null}\n                            />\n                        ) : (\n                            <MetadataInstance\n                                areAiSuggestionsAvailable={false}\n                                isAiSuggestionsFeatureEnabled={false}\n                                isBetaLanguageEnabled={false}\n                                onEdit={handleMetadataInstanceEdit}\n                                templateInstance={templateInstance}\n                                taxonomyNodeFetcher={null}\n                            />\n                        )}\n                    </AutofillContextProvider>\n                </div>\n            </SidePanel.ScrollableContainer>\n        </SidePanel>\n    );\n};\n\nexport default MetadataSidePanel;\n"],"mappings":"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","ignoreList":[]}