{"version":3,"file":"DateField.js","names":["React","FormattedMessage","useIntl","isToday","isYesterday","messages","DEFAULT_DATE_FORMAT","weekday","month","year","day","DateField","date","dateFormat","omitCommas","relative","capitalize","formatDate","d","Date","isTodaysDate","isYesterdaysDate","Message","createElement","today","yesterday","className","formattedDate","replace"],"sources":["../../../../src/elements/common/date/DateField.tsx"],"sourcesContent":["// @deprecated, use DateValue component\nimport * as React from 'react';\nimport { FormatDateOptions, FormattedMessage, useIntl } from 'react-intl';\nimport { isToday, isYesterday } from '../../../utils/datetime';\n\nimport messages from '../messages';\nimport './DateField.scss';\n\nconst DEFAULT_DATE_FORMAT = {\n    weekday: 'short',\n    month: 'short',\n    year: 'numeric',\n    day: 'numeric',\n} as const;\n\nexport interface DateFieldProps {\n    capitalize?: boolean;\n    date: string;\n    dateFormat?: FormatDateOptions;\n    omitCommas?: boolean;\n    relative?: boolean;\n}\n\n// This component has internationalization concerns, e.g. comma removal, capitalization\nconst DateField = ({\n    date,\n    dateFormat = DEFAULT_DATE_FORMAT,\n    omitCommas = false,\n    relative = true,\n    capitalize = false,\n}: DateFieldProps): React.ReactNode | string => {\n    const { formatDate } = useIntl();\n    const d = new Date(date);\n    const isTodaysDate = isToday(d);\n    const isYesterdaysDate = isYesterday(d);\n\n    if (relative && (isTodaysDate || isYesterdaysDate)) {\n        let Message = <FormattedMessage {...messages.today} />;\n        if (isYesterdaysDate) {\n            Message = <FormattedMessage {...messages.yesterday} />;\n        }\n\n        if (capitalize) {\n            return <span className=\"be-date-capitalize\">{Message}</span>;\n        }\n\n        return Message;\n    }\n\n    let formattedDate = formatDate(d, dateFormat);\n    formattedDate = omitCommas ? formattedDate.replace(/,/g, '') : formattedDate;\n    return formattedDate;\n};\n\nexport default DateField;\n"],"mappings":"AAAA;AACA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAA4BC,gBAAgB,EAAEC,OAAO,QAAQ,YAAY;AACzE,SAASC,OAAO,EAAEC,WAAW,QAAQ,yBAAyB;AAE9D,OAAOC,QAAQ,MAAM,aAAa;AAClC,OAAO,kBAAkB;AAEzB,MAAMC,mBAAmB,GAAG;EACxBC,OAAO,EAAE,OAAO;EAChBC,KAAK,EAAE,OAAO;EACdC,IAAI,EAAE,SAAS;EACfC,GAAG,EAAE;AACT,CAAU;AAUV;AACA,MAAMC,SAAS,GAAGA,CAAC;EACfC,IAAI;EACJC,UAAU,GAAGP,mBAAmB;EAChCQ,UAAU,GAAG,KAAK;EAClBC,QAAQ,GAAG,IAAI;EACfC,UAAU,GAAG;AACD,CAAC,KAA+B;EAC5C,MAAM;IAAEC;EAAW,CAAC,GAAGf,OAAO,CAAC,CAAC;EAChC,MAAMgB,CAAC,GAAG,IAAIC,IAAI,CAACP,IAAI,CAAC;EACxB,MAAMQ,YAAY,GAAGjB,OAAO,CAACe,CAAC,CAAC;EAC/B,MAAMG,gBAAgB,GAAGjB,WAAW,CAACc,CAAC,CAAC;EAEvC,IAAIH,QAAQ,KAAKK,YAAY,IAAIC,gBAAgB,CAAC,EAAE;IAChD,IAAIC,OAAO,gBAAGtB,KAAA,CAAAuB,aAAA,CAACtB,gBAAgB,EAAKI,QAAQ,CAACmB,KAAQ,CAAC;IACtD,IAAIH,gBAAgB,EAAE;MAClBC,OAAO,gBAAGtB,KAAA,CAAAuB,aAAA,CAACtB,gBAAgB,EAAKI,QAAQ,CAACoB,SAAY,CAAC;IAC1D;IAEA,IAAIT,UAAU,EAAE;MACZ,oBAAOhB,KAAA,CAAAuB,aAAA;QAAMG,SAAS,EAAC;MAAoB,GAAEJ,OAAc,CAAC;IAChE;IAEA,OAAOA,OAAO;EAClB;EAEA,IAAIK,aAAa,GAAGV,UAAU,CAACC,CAAC,EAAEL,UAAU,CAAC;EAC7Cc,aAAa,GAAGb,UAAU,GAAGa,aAAa,CAACC,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,GAAGD,aAAa;EAC5E,OAAOA,aAAa;AACxB,CAAC;AAED,eAAehB,SAAS","ignoreList":[]}