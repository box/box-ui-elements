{"version":3,"file":"Logger.js","names":["React","noop","v4","uuidv4","isMarkSupported","EVENT_DATA_READY","EVENT_JS_READY","METRIC_TYPE_PREVIEW","METRIC_TYPE_ELEMENTS_LOAD_METRIC","METRIC_TYPE_UAA_PARITY_METRIC","SESSION_ID","uniqueEvents","Set","Logger","Component","constructor","props","_defineProperty","data","onMetric","type","_objectSpread","uniqueId","logUniqueMetric","startMarkName","metricData","loggerProps","onDataReadyMetric","handleDataReadyMetric","onPreviewMetric","handlePreviewMetric","onReadyMetric","handleReadyMetric","sessionId","createEventName","name","source","eventName","hasLoggedEvent","has","logMetric","metric","component","timestamp","getTimestamp","add","Date","toISOString","render","_this$props","children","rest","_objectWithoutProperties","_excluded","cloneElement","logger"],"sources":["../../../../src/elements/common/logger/Logger.js"],"sourcesContent":["// @flow\nimport * as React from 'react';\nimport noop from 'lodash/noop';\nimport { v4 as uuidv4 } from 'uuid';\nimport { isMarkSupported } from '../../../utils/performance';\nimport { EVENT_DATA_READY, EVENT_JS_READY } from './constants';\nimport {\n    METRIC_TYPE_PREVIEW,\n    METRIC_TYPE_ELEMENTS_LOAD_METRIC,\n    METRIC_TYPE_UAA_PARITY_METRIC,\n} from '../../../constants';\nimport type { ElementOrigin } from '../flowTypes';\nimport type { MetricType, ElementsLoadMetricData, LoggerProps } from '../../../common/types/logging';\n\ntype ElementsMetric = {\n    component: ElementOrigin,\n    name: string,\n    sessionId: string,\n    timestamp: string,\n    type: MetricType,\n} & ElementsLoadMetricData;\n\ntype Props = {\n    children: React.Element<any>,\n    fileId?: string,\n    onMetric: (data: Object) => void,\n    source: ElementOrigin,\n    startMarkName?: string,\n};\n\nconst SESSION_ID = uuidv4();\nconst uniqueEvents: Set<string> = new Set();\n\nclass Logger extends React.Component<Props> {\n    static defaultProps = {\n        onMetric: noop,\n    };\n\n    constructor(props: Props) {\n        super(props);\n        this.loggerProps = {\n            onDataReadyMetric: this.handleDataReadyMetric,\n            onPreviewMetric: this.handlePreviewMetric,\n            onReadyMetric: this.handleReadyMetric,\n        };\n    }\n\n    loggerProps: LoggerProps;\n\n    get uniqueEvents(): Set<string> {\n        return uniqueEvents;\n    }\n\n    get sessionId(): string {\n        return SESSION_ID;\n    }\n\n    /**\n     * Creates an event name meant for use with an event which is unique and meant to be logged only once\n     *\n     * @param {string} name - The event name\n     * @param {string} [uniqueId] - an optional unique id\n     * @returns {string} A string containing the component and event name and optional unique id\n     */\n    createEventName(name: string, uniqueId?: string): string {\n        const { source } = this.props;\n        const eventName = `${source}::${name}`;\n        return uniqueId ? `${eventName}::${uniqueId}` : eventName;\n    }\n\n    /**\n     * Checks to see if the specified event for the component has already been fired.\n     *\n     * @param {string} component - the component name\n     * @param {string} name - the event name\n     * @returns {boolean} True if the event has already been fired\n     */\n    hasLoggedEvent(name: string): boolean {\n        return this.uniqueEvents.has(name);\n    }\n\n    /**\n     * Invokes the provided metric logging callback.\n     *\n     * @param {string} type - the type of the event\n     * @param {string} name - the name of the event\n     * @param {Object} data  - the event data\n     */\n    logMetric(type: MetricType, name: string, data: Object): void {\n        const { onMetric, source } = this.props;\n        const metric: ElementsMetric = {\n            ...data,\n            component: source,\n            name,\n            timestamp: this.getTimestamp(),\n            sessionId: this.sessionId,\n            type,\n        };\n\n        onMetric(metric);\n    }\n\n    /**\n     * Logs a unique metric event. Prevents duplicate events from being logged in the session.\n     *\n     * @param {string} type - the type of the event\n     * @param {string} name - the name of the event\n     * @param {Object} data  - the event data\n     * @param {string} [uniqueId] - an optional unique id\n     * @returns {void}\n     */\n    logUniqueMetric(type: MetricType, name: string, data: Object, uniqueId?: string): void {\n        const eventName = this.createEventName(name, uniqueId);\n        if (this.hasLoggedEvent(eventName)) {\n            return;\n        }\n\n        this.logMetric(type, name, data);\n        this.uniqueEvents.add(eventName);\n    }\n\n    /**\n     * Preview metric handler\n     *\n     * @param {Object} data - the metric data\n     * @returns {void}\n     */\n    handlePreviewMetric = (data: Object) => {\n        const { onMetric } = this.props;\n\n        if (data.type === METRIC_TYPE_UAA_PARITY_METRIC) {\n            onMetric({\n                ...data,\n                type: METRIC_TYPE_UAA_PARITY_METRIC,\n            });\n        } else {\n            onMetric({\n                ...data,\n                type: METRIC_TYPE_PREVIEW,\n            });\n        }\n    };\n\n    /**\n     * Data ready metric handler\n     *\n     * @param {Object} data - the metric data\n     * @returns {void}\n     */\n    handleDataReadyMetric = (data: ElementsLoadMetricData, uniqueId?: string) => {\n        if (!isMarkSupported) {\n            return;\n        }\n\n        this.logUniqueMetric(METRIC_TYPE_ELEMENTS_LOAD_METRIC, EVENT_DATA_READY, data, uniqueId);\n    };\n\n    /**\n     * JS ready metric handler\n     *\n     * @param {Object} data - the metric data\n     * @returns {void}\n     */\n    handleReadyMetric = (data: ElementsLoadMetricData) => {\n        if (!isMarkSupported) {\n            return;\n        }\n\n        const { startMarkName } = this.props;\n        const metricData = {\n            ...data,\n            startMarkName,\n        };\n        this.logUniqueMetric(METRIC_TYPE_ELEMENTS_LOAD_METRIC, EVENT_JS_READY, metricData);\n    };\n\n    /**\n     * Create an ISO Timestamp for right now.\n     *\n     * @returns {string}\n     */\n    getTimestamp(): string {\n        return new Date().toISOString();\n    }\n\n    render() {\n        const { children, onMetric, startMarkName, ...rest } = this.props;\n\n        return React.cloneElement(children, {\n            ...rest,\n            logger: this.loggerProps,\n        });\n    }\n}\n\nexport default Logger;\n"],"mappings":"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","ignoreList":[]}