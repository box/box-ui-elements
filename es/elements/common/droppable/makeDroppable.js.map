{"version":3,"file":"makeDroppable.js","names":["React","PureComponent","classNames","makeDroppable","dropValidator","onDrop","Wrapped","_DroppableComponent","DroppableComponent","constructor","props","_defineProperty","element","removeEventListeners","droppableEl","bindDragDropHandlers","addEventListener","handleDragEnter","handleDragOver","handleDragLeave","handleDrop","removeEventListener","event","preventDefault","enterLeaveCounter","dataTransfer","canDrop","setState","isOver","state","dropEffect","effectAllowed","isDragging","componentWillUnmount","render","_this$props","className","rest","_objectWithoutProperties","_excluded","classes","mergedProps","_objectSpread","ref","setDroppableRef","createElement"],"sources":["../../../../src/elements/common/droppable/makeDroppable.js"],"sourcesContent":["/**\n * @flow\n * @file HOC for drag drop\n * @author Box\n */\n\nimport React, { PureComponent } from 'react';\nimport classNames from 'classnames';\nimport type { ClassComponent } from '../../../common/types/core';\n\ntype PropsShape = {\n    className: string,\n};\n\ntype State = {\n    canDrop: boolean,\n    isDragging: boolean,\n    isOver: boolean,\n};\n\n/* eslint-disable no-plusplus */\nconst makeDroppable =\n    ({ dropValidator, onDrop }: { dropValidator?: Function, onDrop?: Function }) =>\n    <Props: PropsShape>(Wrapped: Function): ClassComponent<any, any> =>\n        class DroppableComponent extends PureComponent<Props, State> {\n            props: Props;\n\n            state: State;\n\n            enterLeaveCounter: number;\n\n            droppableEl: Element | null;\n\n            static defaultProps = {\n                className: '',\n            };\n\n            /**\n             * [constructor]\n             *\n             * @param {*} props\n             * @return {DroppableComponent}\n             */\n            constructor(props: Props) {\n                super(props);\n                this.enterLeaveCounter = 0;\n                this.state = {\n                    canDrop: false,\n                    isDragging: false,\n                    isOver: false,\n                };\n            }\n\n            /**\n             * Removes event listeners when the component is going to unmount\n             * @inheritdoc\n             */\n            componentWillUnmount() {\n                this.removeEventListeners(this.droppableEl);\n            }\n\n            /**\n             * Ref callback to store the DOM element reference\n             * @param {Element | null} element - The DOM element or null\n             */\n            setDroppableRef = (element: Element | null) => {\n                this.removeEventListeners(this.droppableEl);\n\n                this.droppableEl = element;\n\n                this.bindDragDropHandlers(element);\n            };\n\n            /**\n             * Function that binds drag and drop related event listeners to the input element\n             * @param {Element | null} element - The DOM element to attach listeners to\n             */\n            bindDragDropHandlers = (element: Element | null) => {\n                if (!element) {\n                    return;\n                }\n                element.addEventListener('dragenter', this.handleDragEnter);\n                element.addEventListener('dragover', this.handleDragOver);\n                element.addEventListener('dragleave', this.handleDragLeave);\n                element.addEventListener('drop', this.handleDrop);\n            };\n\n            /**\n             * Function that removes the drag and drop related event listeners on the input element\n             * @param {Element | null} element - The DOM element to remove listeners from\n             */\n            removeEventListeners = (element: Element | null) => {\n                if (!element) {\n                    return;\n                }\n                element.removeEventListener('dragenter', this.handleDragEnter);\n                element.removeEventListener('dragover', this.handleDragOver);\n                element.removeEventListener('dragleave', this.handleDragLeave);\n                element.removeEventListener('drop', this.handleDrop);\n            };\n\n            /**\n             * Function that gets called when an item is dragged into the drop zone\n             *\n             * @param {SyntheticEvent} event - The dragenter event\n             * @return {void}\n             */\n            handleDragEnter = (event: DragEvent) => {\n                // This allows onDrop to be fired\n                event.preventDefault();\n\n                // Use this to track the number of drag enters and leaves.\n                // This is used to normalize enters/leaves between parent/child elements\n\n                // we only want to do things in dragenter when the counter === 1\n                if (++this.enterLeaveCounter === 1) {\n                    const { dataTransfer } = event;\n\n                    // if we don't have a dropValidator, we just default canDrop to true\n                    const canDrop = dropValidator ? dropValidator(this.props, dataTransfer) : true;\n\n                    this.setState({\n                        isOver: true,\n                        canDrop,\n                    });\n                }\n            };\n\n            /**\n             * Function that gets called when an item is dragged over the drop zone\n             *\n             * @param {DragEvent} event - The dragover event\n             * @return {void}\n             */\n            handleDragOver = (event: DragEvent) => {\n                // This allows onDrop to be fired\n                event.preventDefault();\n\n                const { canDrop } = this.state;\n                const { dataTransfer } = event;\n\n                if (!dataTransfer) {\n                    return;\n                }\n\n                if (!canDrop) {\n                    dataTransfer.dropEffect = 'none';\n                } else if (dataTransfer.effectAllowed) {\n                    // Set the drop effect if it was defined\n                    dataTransfer.dropEffect = dataTransfer.effectAllowed;\n                }\n            };\n\n            /**\n             * Function that gets called when an item is drop onto the drop zone\n             *\n             * @param {DragEvent} event - The drop event\n             * @return {void}\n             */\n            handleDrop = (event: DragEvent) => {\n                event.preventDefault();\n\n                // reset enterLeaveCounter\n                this.enterLeaveCounter = 0;\n\n                const { canDrop } = this.state;\n\n                this.setState({\n                    canDrop: false,\n                    isDragging: false,\n                    isOver: false,\n                });\n\n                if (canDrop && onDrop) {\n                    onDrop(event, this.props);\n                }\n            };\n\n            /**\n             * Function that gets called when an item is dragged out of the drop zone\n             *\n             * @param {DragEvent} event - The dragleave event\n             * @return {void}\n             */\n            handleDragLeave = (event: DragEvent) => {\n                event.preventDefault();\n\n                // if enterLeaveCounter is zero, it means that we're actually leaving the item\n                if (--this.enterLeaveCounter > 0) {\n                    return;\n                }\n\n                this.setState({\n                    canDrop: false,\n                    isDragging: false,\n                    isOver: false,\n                });\n            };\n\n            /**\n             * Renders the HOC\n             *\n             * @private\n             * @inheritdoc\n             * @return {Element}\n             */\n            render() {\n                const { className, ...rest } = this.props;\n                const { canDrop, isOver } = this.state;\n\n                const classes = classNames(className, {\n                    'is-droppable': canDrop,\n                    'is-over': isOver,\n                });\n\n                const mergedProps = {\n                    ...rest,\n                    ...this.state,\n                    className: classes,\n                    ref: this.setDroppableRef,\n                };\n\n                return <Wrapped {...mergedProps} />;\n            }\n        };\n\nexport default makeDroppable;\n"],"mappings":";;;;;;;;AAAA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,KAAK,IAAIC,aAAa,QAAQ,OAAO;AAC5C,OAAOC,UAAU,MAAM,YAAY;AAanC;AACA,MAAMC,aAAa,GACfA,CAAC;EAAEC,aAAa;EAAEC;AAAwD,CAAC,KACvDC,OAAiB;EAAA,IAAAC,mBAAA;EAAA,OAAAA,mBAAA,GACjC,MAAMC,kBAAkB,SAASP,aAAa,CAAe;IAazD;AACZ;AACA;AACA;AACA;AACA;IACYQ,WAAWA,CAACC,KAAY,EAAE;MACtB,KAAK,CAACA,KAAK,CAAC;MAiBhB;AACZ;AACA;AACA;MAHYC,eAAA,0BAImBC,OAAuB,IAAK;QAC3C,IAAI,CAACC,oBAAoB,CAAC,IAAI,CAACC,WAAW,CAAC;QAE3C,IAAI,CAACA,WAAW,GAAGF,OAAO;QAE1B,IAAI,CAACG,oBAAoB,CAACH,OAAO,CAAC;MACtC,CAAC;MAED;AACZ;AACA;AACA;MAHYD,eAAA,+BAIwBC,OAAuB,IAAK;QAChD,IAAI,CAACA,OAAO,EAAE;UACV;QACJ;QACAA,OAAO,CAACI,gBAAgB,CAAC,WAAW,EAAE,IAAI,CAACC,eAAe,CAAC;QAC3DL,OAAO,CAACI,gBAAgB,CAAC,UAAU,EAAE,IAAI,CAACE,cAAc,CAAC;QACzDN,OAAO,CAACI,gBAAgB,CAAC,WAAW,EAAE,IAAI,CAACG,eAAe,CAAC;QAC3DP,OAAO,CAACI,gBAAgB,CAAC,MAAM,EAAE,IAAI,CAACI,UAAU,CAAC;MACrD,CAAC;MAED;AACZ;AACA;AACA;MAHYT,eAAA,+BAIwBC,OAAuB,IAAK;QAChD,IAAI,CAACA,OAAO,EAAE;UACV;QACJ;QACAA,OAAO,CAACS,mBAAmB,CAAC,WAAW,EAAE,IAAI,CAACJ,eAAe,CAAC;QAC9DL,OAAO,CAACS,mBAAmB,CAAC,UAAU,EAAE,IAAI,CAACH,cAAc,CAAC;QAC5DN,OAAO,CAACS,mBAAmB,CAAC,WAAW,EAAE,IAAI,CAACF,eAAe,CAAC;QAC9DP,OAAO,CAACS,mBAAmB,CAAC,MAAM,EAAE,IAAI,CAACD,UAAU,CAAC;MACxD,CAAC;MAED;AACZ;AACA;AACA;AACA;AACA;MALYT,eAAA,0BAMmBW,KAAgB,IAAK;QACpC;QACAA,KAAK,CAACC,cAAc,CAAC,CAAC;;QAEtB;QACA;;QAEA;QACA,IAAI,EAAE,IAAI,CAACC,iBAAiB,KAAK,CAAC,EAAE;UAChC,MAAM;YAAEC;UAAa,CAAC,GAAGH,KAAK;;UAE9B;UACA,MAAMI,OAAO,GAAGtB,aAAa,GAAGA,aAAa,CAAC,IAAI,CAACM,KAAK,EAAEe,YAAY,CAAC,GAAG,IAAI;UAE9E,IAAI,CAACE,QAAQ,CAAC;YACVC,MAAM,EAAE,IAAI;YACZF;UACJ,CAAC,CAAC;QACN;MACJ,CAAC;MAED;AACZ;AACA;AACA;AACA;AACA;MALYf,eAAA,yBAMkBW,KAAgB,IAAK;QACnC;QACAA,KAAK,CAACC,cAAc,CAAC,CAAC;QAEtB,MAAM;UAAEG;QAAQ,CAAC,GAAG,IAAI,CAACG,KAAK;QAC9B,MAAM;UAAEJ;QAAa,CAAC,GAAGH,KAAK;QAE9B,IAAI,CAACG,YAAY,EAAE;UACf;QACJ;QAEA,IAAI,CAACC,OAAO,EAAE;UACVD,YAAY,CAACK,UAAU,GAAG,MAAM;QACpC,CAAC,MAAM,IAAIL,YAAY,CAACM,aAAa,EAAE;UACnC;UACAN,YAAY,CAACK,UAAU,GAAGL,YAAY,CAACM,aAAa;QACxD;MACJ,CAAC;MAED;AACZ;AACA;AACA;AACA;AACA;MALYpB,eAAA,qBAMcW,KAAgB,IAAK;QAC/BA,KAAK,CAACC,cAAc,CAAC,CAAC;;QAEtB;QACA,IAAI,CAACC,iBAAiB,GAAG,CAAC;QAE1B,MAAM;UAAEE;QAAQ,CAAC,GAAG,IAAI,CAACG,KAAK;QAE9B,IAAI,CAACF,QAAQ,CAAC;UACVD,OAAO,EAAE,KAAK;UACdM,UAAU,EAAE,KAAK;UACjBJ,MAAM,EAAE;QACZ,CAAC,CAAC;QAEF,IAAIF,OAAO,IAAIrB,MAAM,EAAE;UACnBA,MAAM,CAACiB,KAAK,EAAE,IAAI,CAACZ,KAAK,CAAC;QAC7B;MACJ,CAAC;MAED;AACZ;AACA;AACA;AACA;AACA;MALYC,eAAA,0BAMmBW,KAAgB,IAAK;QACpCA,KAAK,CAACC,cAAc,CAAC,CAAC;;QAEtB;QACA,IAAI,EAAE,IAAI,CAACC,iBAAiB,GAAG,CAAC,EAAE;UAC9B;QACJ;QAEA,IAAI,CAACG,QAAQ,CAAC;UACVD,OAAO,EAAE,KAAK;UACdM,UAAU,EAAE,KAAK;UACjBJ,MAAM,EAAE;QACZ,CAAC,CAAC;MACN,CAAC;MAxJG,IAAI,CAACJ,iBAAiB,GAAG,CAAC;MAC1B,IAAI,CAACK,KAAK,GAAG;QACTH,OAAO,EAAE,KAAK;QACdM,UAAU,EAAE,KAAK;QACjBJ,MAAM,EAAE;MACZ,CAAC;IACL;;IAEA;AACZ;AACA;AACA;IACYK,oBAAoBA,CAAA,EAAG;MACnB,IAAI,CAACpB,oBAAoB,CAAC,IAAI,CAACC,WAAW,CAAC;IAC/C;IA4IA;AACZ;AACA;AACA;AACA;AACA;AACA;IACYoB,MAAMA,CAAA,EAAG;MACL,MAAAC,WAAA,GAA+B,IAAI,CAACzB,KAAK;QAAnC;UAAE0B;QAAmB,CAAC,GAAAD,WAAA;QAANE,IAAI,GAAAC,wBAAA,CAAAH,WAAA,EAAAI,SAAA;MAC1B,MAAM;QAAEb,OAAO;QAAEE;MAAO,CAAC,GAAG,IAAI,CAACC,KAAK;MAEtC,MAAMW,OAAO,GAAGtC,UAAU,CAACkC,SAAS,EAAE;QAClC,cAAc,EAAEV,OAAO;QACvB,SAAS,EAAEE;MACf,CAAC,CAAC;MAEF,MAAMa,WAAW,GAAAC,aAAA,CAAAA,aAAA,CAAAA,aAAA,KACVL,IAAI,GACJ,IAAI,CAACR,KAAK;QACbO,SAAS,EAAEI,OAAO;QAClBG,GAAG,EAAE,IAAI,CAACC;MAAe,EAC5B;MAED,oBAAO5C,KAAA,CAAA6C,aAAA,CAACvC,OAAO,EAAKmC,WAAc,CAAC;IACvC;EACJ,CAAC,EAAA9B,eAAA,CAAAJ,mBAAA,kBA/LyB;IAClB6B,SAAS,EAAE;EACf,CAAC,GAAA7B,mBAAA;AAAA,CA6LJ;AAET,eAAeJ,aAAa","ignoreList":[]}