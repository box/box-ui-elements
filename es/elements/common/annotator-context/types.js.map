{"version":3,"file":"types.js","names":["CREATE","Action","Status"],"sources":["../../../../src/elements/common/annotator-context/types.ts"],"sourcesContent":["import { Location } from 'history';\nimport { match } from 'react-router-dom';\n\nexport const CREATE = 'create';\n\nexport enum Action {\n    CREATE_START = 'create_start',\n    CREATE_END = 'create_end',\n    DELETE_START = 'delete_start',\n    DELETE_END = 'delete_end',\n    SET_ACTIVE = 'set_active',\n    UPDATE_START = 'update_start',\n    UPDATE_END = 'update_end',\n    REPLY_CREATE_START = 'reply_create_start',\n    REPLY_CREATE_END = 'reply_create_end',\n    REPLY_DELETE_START = 'reply_delete_start',\n    REPLY_DELETE_END = 'reply_delete_end',\n    REPLY_UPDATE_START = 'reply_update_start',\n    REPLY_UPDATE_END = 'reply_update_end',\n}\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\nexport interface Annotator {\n    addListener: (event: string | symbol, listener: (...args: any[]) => void) => void;\n    emit: (event: string | symbol, ...args: any[]) => void;\n    removeAllListeners: () => void;\n    removeListener: (event: string | symbol, listener: (...args: any[]) => void) => void;\n}\n/* eslint-enable @typescript-eslint/no-explicit-any */\n\nexport interface AnnotatorState {\n    activeAnnotationFileVersionId?: string | null;\n    activeAnnotationId?: string | null;\n    annotation?: { id?: string } | null;\n    annotationReply?: { id?: string } | null;\n    action?: Action | null;\n    error?: Error | null;\n    meta?: Metadata | null;\n    origin?: string;\n}\n\nexport type GetMatchPath = (location?: Location) => match<MatchParams> | null;\n\nexport interface AnnotatorContext {\n    emitActiveAnnotationChangeEvent?: (id: string) => void;\n    emitAnnotationRemoveEvent?: (id: string, isStartEvent?: boolean) => void;\n    emitAnnotationReplyCreateEvent?: (\n        reply: Object,\n        requestId: string,\n        annotationId: string,\n        isStartEvent?: boolean,\n    ) => void;\n    emitAnnotationReplyDeleteEvent?: (id: string, annotationId: string, isStartEvent?: boolean) => void;\n    emitAnnotationReplyUpdateEvent?: (reply: Object, annotationId: string, isStartEvent?: boolean) => void;\n    emitAnnotationUpdateEvent?: (annotation: Object, isStartEvent?: boolean) => void;\n    getAnnotationsMatchPath?: GetMatchPath;\n    getAnnotationsPath?: (fileVersionId?: string, annotationId?: string) => string;\n    state: AnnotatorState;\n}\n\nexport enum Status {\n    ERROR = 'error',\n    PENDING = 'pending',\n    SUCCESS = 'success',\n}\n\nexport type MatchParams = {\n    annotationId?: string;\n    fileVersionId?: string;\n};\n\nexport interface Metadata {\n    requestId?: string;\n    status: Status;\n}\n\nexport interface AnnotationActionEvent {\n    annotation?: Object;\n    annotationReply?: Object;\n    error?: Error;\n    meta: Metadata;\n}\n"],"mappings":"AAGA,OAAO,MAAMA,MAAM,GAAG,QAAQ;AAE9B,WAAYC,MAAM,0BAANA,MAAM;EAANA,MAAM;EAANA,MAAM;EAANA,MAAM;EAANA,MAAM;EAANA,MAAM;EAANA,MAAM;EAANA,MAAM;EAANA,MAAM;EAANA,MAAM;EAANA,MAAM;EAANA,MAAM;EAANA,MAAM;EAANA,MAAM;EAAA,OAANA,MAAM;AAAA;;AAgBlB;;AAOA;;AAgCA,WAAYC,MAAM,0BAANA,MAAM;EAANA,MAAM;EAANA,MAAM;EAANA,MAAM;EAAA,OAANA,MAAM;AAAA","ignoreList":[]}