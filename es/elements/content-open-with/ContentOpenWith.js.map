{"version":3,"file":"ContentOpenWith.js","names":["React","PureComponent","classNames","uniqueid","noop","FormattedMessage","queryString","Internationalize","messages","withErrorBoundary","API","IntegrationPortalContainer","OpenWithDropdownMenu","BoxToolsInstallMessage","OpenWithButton","OpenWithFallbackButton","ExecuteForm","BOX_EDIT_INTEGRATION_ID","BOX_EDIT_SFC_INTEGRATION_ID","CLIENT_NAME_OPEN_WITH","CLIENT_VERSION","DEFAULT_HOSTNAME_API","ERROR_CODE_EXECUTE_INTEGRATION","HTTP_GET","HTTP_POST","ORIGIN_OPEN_WITH","TYPE_FILE","TYPE_FOLDER","UNSUPPORTED_INVOCATION_METHOD_TYPE","BLACKLISTED_ERROR_MESSAGE_KEY","BOX_TOOLS_INSTALL_ERROR_MESSAGE_KEY","GENERIC_EXECUTE_MESSAGE_KEY","AUTH_CODE","ContentOpenWith","constructor","props","_defineProperty","isDropdownOpen","integrations","isLoading","fetchError","executePostData","shouldRenderErrorIntegrationPortal","shouldRenderLoadingIntegrationPortal","boxToolsName","boxToolsInstallUrl","boxEditIntegration","find","appIntegrationId","isBoxEditIntegration","isDisabled","extension","getIntegrationFileExtension","isBoxEditAvailable","canOpenExtensionWithBoxEdit","error","errorMessageObject","message","formattedErrorMessage","createElement","disabledReasons","push","setState","fileId","Promise","resolve","reject","api","getFileAPI","getFileExtension","Error","getBoxEditAPI","checkBoxEditAvailability","catch","getAppForExtension","code","onError","displayName","getAppIntegrationsAPI","execute","executeIntegrationSuccessHandler","bind","executeBoxEditErrorHandler","executeIntegrationErrorHandler","windowFeatures","window","screenX","screenY","outerHeight","innerWidth","integrationWindow","open","document","title","onunload","cleanupIntegrationWindow","integrationId","executeData","executeBoxEditSuccessHandler","executeOnlineIntegrationSuccessHandler","onExecute","method","url","location","opener","token","queryParams","parse","authCode","isFileScoped","isBoxEditSFCIntegration","openFile","data","auth_code","token_scope","console","apiHost","clientName","language","requestInterceptor","responseInterceptor","id","version","state","_objectSpread","initialState","clearCache","destroy","componentWillUnmount","componentDidMount","fetchOpenWithData","componentDidUpdate","prevProps","currentFileId","previousFileId","getOpenWithAPI","getOpenWithIntegrations","fetchOpenWithSuccessHandler","fetchErrorHandler","integrationID","getDisplayIntegration","Array","isArray","length","render","intlMessages","dropdownAlignment","className","displayIntegration","numIntegrations","onClick","onIntegrationClick","hasError","onSubmit","onExecuteFormSubmit","windowName","name","ContentOpenWithComponent"],"sources":["../../../src/elements/content-open-with/ContentOpenWith.js"],"sourcesContent":["/**\n * @flow\n * @file Open With Component\n * @author Box\n */\n\nimport React, { PureComponent } from 'react';\nimport classNames from 'classnames';\nimport uniqueid from 'lodash/uniqueId';\nimport noop from 'lodash/noop';\nimport { FormattedMessage } from 'react-intl';\nimport queryString from 'query-string';\nimport Internationalize from '../common/Internationalize';\nimport messages from '../common/messages';\nimport { withErrorBoundary } from '../common/error-boundary';\nimport API from '../../api';\nimport IntegrationPortalContainer from './IntegrationPortalContainer';\nimport OpenWithDropdownMenu from './OpenWithDropdownMenu';\nimport BoxToolsInstallMessage from './BoxToolsInstallMessage';\nimport OpenWithButton from './OpenWithButton';\nimport OpenWithFallbackButton from './OpenWithFallbackButton';\nimport ExecuteForm from './ExecuteForm';\nimport '../common/base.scss';\nimport './ContentOpenWith.scss';\nimport {\n    BOX_EDIT_INTEGRATION_ID,\n    BOX_EDIT_SFC_INTEGRATION_ID,\n    CLIENT_NAME_OPEN_WITH,\n    CLIENT_VERSION,\n    DEFAULT_HOSTNAME_API,\n    ERROR_CODE_EXECUTE_INTEGRATION,\n    HTTP_GET,\n    HTTP_POST,\n    ORIGIN_OPEN_WITH,\n    TYPE_FILE,\n    TYPE_FOLDER,\n} from '../../constants';\nimport type { Alignment } from '../common/flowTypes';\nimport type { ExecuteAPI, Integration } from '../../common/types/integrations';\nimport type { StringMap, Token, BoxItem } from '../../common/types/core';\n\nconst UNSUPPORTED_INVOCATION_METHOD_TYPE = 'Integration invocation using this HTTP method type is not supported';\nconst BLACKLISTED_ERROR_MESSAGE_KEY = 'boxToolsBlacklistedError';\nconst BOX_TOOLS_INSTALL_ERROR_MESSAGE_KEY = 'boxToolsInstallErrorMessage';\nconst GENERIC_EXECUTE_MESSAGE_KEY = 'executeIntegrationOpenWithErrorHeader';\nconst AUTH_CODE = 'auth_code';\n\ntype ExternalProps = {\n    show?: boolean,\n};\n\ntype Props = {\n    /** Box API url. */\n    apiHost: string,\n    /** Class name applied to base component. */\n    boxToolsInstallUrl?: string,\n    /** Application client name. */\n    boxToolsName?: string,\n    /** Custom name for Box Tools to display to users */\n    className: string,\n    /** Custom URL to direct users to install Box Tools */\n    clientName: string,\n    /** Determines positioning of menu dropdown */\n    dropdownAlignment: Alignment,\n    /** Box File ID. */\n    fileId: string,\n    /** Language to use for translations. */\n    language?: string,\n    /** Messages to be translated. */\n    messages?: StringMap,\n    /** Callback that executes when an integration attempts to open the given file */\n    onError: Function,\n    /** Callback that executes when an integration invocation fails. The two most common cases being API failures or blocking of a new window */\n    onExecute: Function,\n    /** Axios request interceptor that runs before a network request. */\n    requestInterceptor?: Function,\n    /** Axios response interceptor that runs before a network response is returned. */\n    responseInterceptor?: Function,\n    /** Access token. */\n    token: Token,\n};\n\ntype State = {\n    executePostData: ?Object,\n    fetchError: ?Error,\n    integrations: ?Array<Integration>,\n    isDropdownOpen: boolean,\n    isLoading: boolean,\n    shouldRenderErrorIntegrationPortal: boolean,\n    shouldRenderLoadingIntegrationPortal: boolean,\n};\n\nclass ContentOpenWith extends PureComponent<Props, State> {\n    api: API;\n\n    id: string;\n\n    props: Props;\n\n    state: State;\n\n    window: any;\n\n    integrationWindow: ?any;\n\n    static defaultProps = {\n        apiHost: DEFAULT_HOSTNAME_API,\n        className: '',\n        clientName: CLIENT_NAME_OPEN_WITH,\n        onExecute: noop,\n        onError: noop,\n    };\n\n    initialState: State = {\n        isDropdownOpen: false,\n        integrations: null,\n        isLoading: true,\n        fetchError: null,\n        executePostData: null,\n        shouldRenderErrorIntegrationPortal: false,\n        shouldRenderLoadingIntegrationPortal: false,\n    };\n\n    /**\n     * [constructor]\n     *\n     * @private\n     * @return {ContentOpenWith}\n     */\n    constructor(props: Props) {\n        super(props);\n\n        const { token, apiHost, clientName, language, requestInterceptor, responseInterceptor } = props;\n        this.id = uniqueid('bcow_');\n        this.api = new API({\n            apiHost,\n            clientName,\n            language,\n            requestInterceptor,\n            responseInterceptor,\n            token,\n            version: CLIENT_VERSION,\n        });\n\n        // Clone initial state to allow for state reset on new files\n        this.state = { ...this.initialState };\n    }\n\n    /**\n     * Destroys api instances with caches\n     *\n     * @private\n     * @return {void}\n     */\n    clearCache(): void {\n        this.api.destroy(true);\n    }\n\n    /**\n     * Cleanup\n     *\n     * @private\n     * @inheritdoc\n     * @return {void}\n     */\n    componentWillUnmount() {\n        // Don't destroy the cache while unmounting\n        this.api.destroy(false);\n    }\n\n    /**\n     *\n     * @private\n     * @inheritdoc\n     * @return {void}\n     */\n    componentDidMount() {\n        const { fileId }: Props = this.props;\n        if (!fileId) {\n            return;\n        }\n\n        this.window = window;\n\n        this.fetchOpenWithData();\n    }\n\n    /**\n     * After component updates, re-fetch Open With data if appropriate.\n     *\n     * @return {void}\n     */\n    componentDidUpdate(prevProps: Props): void {\n        const { fileId: currentFileId }: Props = this.props;\n        const { fileId: previousFileId }: Props = prevProps;\n\n        if (!currentFileId) {\n            return;\n        }\n\n        if (currentFileId !== previousFileId) {\n            this.setState({ ...this.initialState });\n            this.fetchOpenWithData();\n        }\n    }\n\n    /**\n     * Checks if a given integration is a Box Edit integration.\n     *\n     * @param {string} [integrationId] - The integration ID\n     * @return {boolean}\n     */\n    isBoxEditIntegration(integrationId: ?string): boolean {\n        return integrationId === BOX_EDIT_INTEGRATION_ID || this.isBoxEditSFCIntegration(integrationId);\n    }\n\n    /**\n     * Checks if a given integration is a Box Edit integration.\n     *\n     * @param {string} [integrationId] - The integration ID\n     * @return {boolean}\n     */\n    isBoxEditSFCIntegration(integrationId: ?string): boolean {\n        return integrationId === BOX_EDIT_SFC_INTEGRATION_ID;\n    }\n\n    /**\n     * Fetches Open With data.\n     *\n     * @return {void}\n     */\n    fetchOpenWithData(): void {\n        const { fileId }: Props = this.props;\n        this.api\n            .getOpenWithAPI(false)\n            .getOpenWithIntegrations(fileId, this.fetchOpenWithSuccessHandler, this.fetchErrorHandler);\n    }\n\n    /**\n     * Fetch app integrations info needed to render.\n     *\n     * @param {OpenWithIntegrations} integrations - The available Open With integrations\n     * @return {void}\n     */\n    fetchOpenWithSuccessHandler = async (integrations: Array<Integration>): Promise<any> => {\n        const { boxToolsName, boxToolsInstallUrl } = this.props;\n        const boxEditIntegration = integrations.find(({ appIntegrationId }) =>\n            this.isBoxEditIntegration(appIntegrationId),\n        );\n\n        if (boxEditIntegration && !boxEditIntegration.isDisabled) {\n            try {\n                const { extension } = await this.getIntegrationFileExtension();\n                boxEditIntegration.extension = extension;\n                // If Box Edit is present and enabled, we need to set its ability to locally open the given file\n                // No-op if these checks are successful\n                await this.isBoxEditAvailable();\n                await this.canOpenExtensionWithBoxEdit(boxEditIntegration);\n            } catch (error) {\n                const errorMessageObject = messages[error.message] || messages[GENERIC_EXECUTE_MESSAGE_KEY];\n                let formattedErrorMessage = <FormattedMessage {...errorMessageObject} />;\n                if (error.message === BOX_TOOLS_INSTALL_ERROR_MESSAGE_KEY) {\n                    formattedErrorMessage = (\n                        <BoxToolsInstallMessage boxToolsInstallUrl={boxToolsInstallUrl} boxToolsName={boxToolsName} />\n                    );\n                }\n\n                boxEditIntegration.disabledReasons.push(formattedErrorMessage);\n                boxEditIntegration.isDisabled = true;\n            }\n        }\n\n        this.setState({ integrations, isLoading: false });\n    };\n\n    /**\n     * Fetches the file extension of the current file.\n     *\n     * @return {Promise}\n     */\n    getIntegrationFileExtension = (): Promise<BoxItem> => {\n        const { fileId }: Props = this.props;\n        return new Promise((resolve, reject) => {\n            this.api\n                .getFileAPI()\n                .getFileExtension(fileId, resolve, () => reject(new Error(GENERIC_EXECUTE_MESSAGE_KEY)));\n        });\n    };\n\n    /**\n     * Uses Box Edit to check if Box Tools is installed and reachable\n     *\n     * @return {Promise}\n     */\n    isBoxEditAvailable = (): Promise<any> => {\n        return this.api\n            .getBoxEditAPI()\n            .checkBoxEditAvailability()\n            .catch(() => {\n                throw new Error(BOX_TOOLS_INSTALL_ERROR_MESSAGE_KEY);\n            });\n    };\n\n    /**\n     * Uses Box Edit to check if Box Tools can open a given file type\n     *\n     * @param {String} extension - A file extension\n     * @return {Promise}\n     */\n    canOpenExtensionWithBoxEdit = ({ extension = '' }: Integration): Promise<any> => {\n        return this.api\n            .getBoxEditAPI()\n            .getAppForExtension(extension)\n            .catch(() => {\n                throw new Error(BLACKLISTED_ERROR_MESSAGE_KEY);\n            });\n    };\n\n    /**\n     * Handles a fetch error for the open_with_integrations and app_integrations endpoints\n     *\n     * @param {Error} error - An axios fetch error\n     * @return {void}\n     */\n    fetchErrorHandler = (error: any, code: string): void => {\n        this.props.onError(error, code, { error });\n        this.setState({ fetchError: error, isLoading: false });\n    };\n\n    /**\n     * Click handler when an integration is clicked\n     *\n     * @private\n     * @param {string} appIntegrationId - An app integration ID\n     * @param {string} displayName - The integration's display name\n     * @return {void}\n     */\n    onIntegrationClick = ({ appIntegrationId, displayName }: Integration): void => {\n        const { fileId }: Props = this.props;\n        const isBoxEditIntegration = this.isBoxEditIntegration(appIntegrationId);\n        this.api\n            .getAppIntegrationsAPI(false)\n            .execute(\n                appIntegrationId,\n                fileId,\n                this.executeIntegrationSuccessHandler.bind(this, appIntegrationId),\n                isBoxEditIntegration ? this.executeBoxEditErrorHandler : this.executeIntegrationErrorHandler,\n            );\n\n        if (isBoxEditIntegration) {\n            // No window management is required when using Box Edit.\n            return;\n        }\n\n        // These window features will open the new window directly on top of the current window at the same\n        const windowFeatures = `left=${window.screenX},top=${window.screenY},height=${window.outerHeight},width=${window.innerWidth},toolbar=0`;\n\n        // window.open() is immediately invoked to avoid popup-blockers\n        // The name is included to be the target of a form if the integration is a POST integration.\n        // A uniqueid is used to force the browser to open a new tab every time, while still allowing\n        // a form to reference a given tab.\n        this.integrationWindow = this.window.open('', `${uniqueid(appIntegrationId)}`, windowFeatures);\n        this.integrationWindow.document.title = displayName;\n        this.integrationWindow.onunload = this.cleanupIntegrationWindow;\n\n        this.setState({\n            shouldRenderLoadingIntegrationPortal: true,\n            shouldRenderErrorIntegrationPortal: false,\n        });\n    };\n\n    /**\n     * cleans up the portal UI when a tab is closed so that we can remount the component later.\n     *\n     * @private\n     * @return {void}\n     */\n    cleanupIntegrationWindow = () => {\n        this.setState({\n            shouldRenderLoadingIntegrationPortal: false,\n            shouldRenderErrorIntegrationPortal: false,\n        });\n    };\n\n    /**\n     * Opens the integration in a new tab based on the API data\n     *\n     * @private\n     * @param {string} integrationId - The integration that was executed\n     * @param {ExecuteAPI} executeData - API response on how to open an executed integration\n\n     * @return {void}\n     */\n    executeIntegrationSuccessHandler = (integrationId: string, executeData: ExecuteAPI): void => {\n        if (this.isBoxEditIntegration(integrationId)) {\n            this.executeBoxEditSuccessHandler(integrationId, executeData);\n        } else {\n            this.executeOnlineIntegrationSuccessHandler(executeData);\n        }\n        this.onExecute(integrationId);\n    };\n\n    /**\n     * Opens the file via a Partner Integration\n     *\n     * @private\n     * @param {ExecuteAPI} executeData - API response on how to open an executed integration\n\n     * @return {void}\n     */\n    executeOnlineIntegrationSuccessHandler = (executeData: ExecuteAPI): void => {\n        const { method, url } = executeData;\n        switch (method) {\n            case HTTP_POST:\n                this.setState({ executePostData: executeData });\n                break;\n            case HTTP_GET:\n                if (!this.integrationWindow) {\n                    return;\n                }\n\n                // Prevents abuse of window.opener\n                // see here for more details: https://mathiasbynens.github.io/rel-noopener/\n                this.integrationWindow.location = url;\n                this.integrationWindow.opener = null;\n                break;\n            default:\n                this.executeIntegrationErrorHandler(\n                    Error(UNSUPPORTED_INVOCATION_METHOD_TYPE),\n                    ERROR_CODE_EXECUTE_INTEGRATION,\n                );\n        }\n\n        this.integrationWindow = null;\n    };\n\n    /**\n     * Opens the file via Box Edit\n     *\n     * @private\n     * @param {string} url - Integration execution URL\n\n     * @return {void}\n     */\n    executeBoxEditSuccessHandler = (integrationId: string, { url }: ExecuteAPI): void => {\n        const { fileId, token, onError } = this.props;\n        const queryParams = queryString.parse(url);\n        const authCode = queryParams[AUTH_CODE];\n        const isFileScoped = this.isBoxEditSFCIntegration(integrationId);\n\n        this.api\n            .getBoxEditAPI()\n            .openFile(fileId, {\n                data: {\n                    auth_code: authCode,\n                    token,\n                    token_scope: isFileScoped ? TYPE_FILE : TYPE_FOLDER,\n                },\n            })\n            .catch(error => {\n                onError(error, ERROR_CODE_EXECUTE_INTEGRATION, { error });\n            });\n    };\n\n    /**\n     * Clears state after a form has been submitted\n     *\n     * @private\n     * @return {void}\n     */\n    onExecuteFormSubmit = (): void => {\n        this.setState({ executePostData: null });\n    };\n\n    /**\n     * Calls the onExecute prop\n     *\n     * @private\n     * @param {string} integrationID - The integration that was executed\n     * @return {void}\n     */\n    onExecute(integrationID: string) {\n        this.props.onExecute(integrationID);\n        this.setState({\n            shouldRenderLoadingIntegrationPortal: false,\n        });\n    }\n\n    /**\n     * Handles execution related errors\n     *\n     * @private\n     * @param {Error} error - Error object\n     * @return {void}\n     */\n    executeIntegrationErrorHandler = (error: any, code: string): void => {\n        this.props.onError(error, code, { error });\n        // eslint-disable-next-line no-console\n        console.error(error);\n        this.setState({\n            shouldRenderLoadingIntegrationPortal: false,\n            shouldRenderErrorIntegrationPortal: true,\n        });\n    };\n\n    /**\n     * Handles Box Edit execution related errors\n     *\n     * @private\n     * @param {Error} error - Error object\n     * @return {void}\n     */\n    executeBoxEditErrorHandler = (error: any): void => {\n        this.props.onError(error);\n        // eslint-disable-next-line no-console\n        console.error(error);\n    };\n\n    /**\n     * Gets a display integration, if available, for the Open With button\n     *\n     * @private\n     * @return {?Integration}\n     */\n    getDisplayIntegration(): ?Integration {\n        const { integrations }: State = this.state;\n        // We only consider an integration a display integration if is the only integration in our state\n        return Array.isArray(integrations) && integrations.length === 1 ? integrations[0] : null;\n    }\n\n    /**\n     * Render the Open With element\n     *\n     * @private\n     * @inheritdoc\n     * @return {Element}\n     */\n    render() {\n        const { language, messages: intlMessages, dropdownAlignment }: Props = this.props;\n        const {\n            fetchError,\n            isLoading,\n            integrations,\n            executePostData,\n            shouldRenderLoadingIntegrationPortal,\n            shouldRenderErrorIntegrationPortal,\n        }: State = this.state;\n\n        const className = classNames('be bcow', this.props.className);\n        const displayIntegration = this.getDisplayIntegration();\n        const numIntegrations = integrations ? integrations.length : 0;\n\n        return (\n            <Internationalize language={language} messages={intlMessages}>\n                <div className={className} data-testid=\"bcow-content\" id={this.id}>\n                    {numIntegrations <= 1 ? (\n                        <OpenWithButton\n                            displayIntegration={displayIntegration}\n                            error={fetchError}\n                            isLoading={isLoading}\n                            onClick={this.onIntegrationClick}\n                        />\n                    ) : (\n                        <OpenWithDropdownMenu\n                            dropdownAlignment={dropdownAlignment}\n                            integrations={((integrations: any): Array<Integration>)}\n                            onClick={this.onIntegrationClick}\n                        />\n                    )}\n                    {(shouldRenderLoadingIntegrationPortal || shouldRenderErrorIntegrationPortal) && (\n                        <IntegrationPortalContainer\n                            hasError={shouldRenderErrorIntegrationPortal}\n                            integrationWindow={this.integrationWindow}\n                        />\n                    )}\n                    {executePostData && (\n                        <ExecuteForm\n                            executePostData={executePostData}\n                            id={this.id}\n                            onSubmit={this.onExecuteFormSubmit}\n                            windowName={this.integrationWindow && this.integrationWindow.name}\n                        />\n                    )}\n                </div>\n            </Internationalize>\n        );\n    }\n}\n\nexport type ContentOpenWithProps = Props & ExternalProps;\nexport { ContentOpenWith as ContentOpenWithComponent };\nexport default withErrorBoundary(ORIGIN_OPEN_WITH, OpenWithFallbackButton)(ContentOpenWith);\n"],"mappings":"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","ignoreList":[]}