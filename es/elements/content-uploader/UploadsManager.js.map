{"version":3,"file":"UploadsManager.js","names":["React","classNames","ItemList","OverallUploadsProgressBar","isActivateKey","STATUS_ERROR","UploadsManager","isDragging","isExpanded","isResumableUploadsEnabled","isVisible","items","onItemActionClick","onRemoveActionClick","onUpgradeCTAClick","onUploadsManagerActionClick","toggleUploadsManager","view","handleProgressBarKeyDown","event","numFailedUploads","totalSize","totalUploaded","forEach","item","status","isFolder","size","progress","percent","isResumeVisible","hasMultipleFailedUploads","createElement","className","onClick","onKeyDown","onRemoveClick"],"sources":["../../../src/elements/content-uploader/UploadsManager.tsx"],"sourcesContent":["import * as React from 'react';\nimport classNames from 'classnames';\nimport ItemList from './ItemList';\nimport OverallUploadsProgressBar from './OverallUploadsProgressBar';\nimport { isActivateKey } from '../../utils/dom';\nimport { STATUS_ERROR } from '../../constants';\nimport type { View } from '../../common/types/core';\nimport type { UploadItem, UploadStatus } from '../../common/types/upload';\n\nimport './UploadsManager.scss';\n\nexport interface UploadsManagerProps {\n    isDragging: boolean;\n    isExpanded: boolean;\n    isResumableUploadsEnabled: boolean;\n    isVisible: boolean;\n    items: UploadItem[];\n    onItemActionClick: React.MouseEventHandler<HTMLButtonElement>;\n    onRemoveActionClick: (item: UploadItem) => void;\n    onUpgradeCTAClick?: () => void;\n    onUploadsManagerActionClick: (status: UploadStatus) => void;\n    toggleUploadsManager: () => void;\n    view: View;\n}\n\nconst UploadsManager = ({\n    isDragging,\n    isExpanded,\n    isResumableUploadsEnabled,\n    isVisible,\n    items,\n    onItemActionClick,\n    onRemoveActionClick,\n    onUpgradeCTAClick,\n    onUploadsManagerActionClick,\n    toggleUploadsManager,\n    view,\n}: UploadsManagerProps) => {\n    /**\n     * Keydown handler for progress bar\n     *\n     * @param {React.KeyboardEvent} event\n     * @return {void}\n     */\n    const handleProgressBarKeyDown = (event: React.KeyboardEvent) => {\n        if (isActivateKey(event)) {\n            toggleUploadsManager();\n        }\n    };\n\n    let numFailedUploads = 0;\n    let totalSize = 0;\n    let totalUploaded = 0;\n    items.forEach(item => {\n        if (item.status !== STATUS_ERROR && !item.isFolder) {\n            totalSize += item.size;\n            totalUploaded += (item.size * item.progress) / 100.0;\n        } else if (item.status === STATUS_ERROR) {\n            numFailedUploads += 1;\n        }\n    });\n\n    const percent = (totalUploaded / totalSize) * 100;\n    const isResumeVisible = isResumableUploadsEnabled && numFailedUploads > 0;\n    const hasMultipleFailedUploads = numFailedUploads > 1;\n\n    return (\n        <div\n            data-resin-component=\"uploadsmanager\"\n            data-resin-feature=\"uploads\"\n            className={classNames('be bcu-uploads-manager-container', {\n                'bcu-is-expanded': isExpanded,\n                'bcu-is-visible': isVisible,\n            })}\n        >\n            <OverallUploadsProgressBar\n                isDragging={isDragging}\n                isExpanded={isExpanded}\n                isResumeVisible={isResumeVisible}\n                isVisible={isVisible}\n                hasMultipleFailedUploads={hasMultipleFailedUploads}\n                onClick={toggleUploadsManager}\n                onKeyDown={handleProgressBarKeyDown}\n                onUploadsManagerActionClick={onUploadsManagerActionClick}\n                percent={percent}\n                view={view}\n            />\n            <div className=\"bcu-uploads-manager-item-list\">\n                <ItemList\n                    isResumableUploadsEnabled={isResumableUploadsEnabled}\n                    items={items}\n                    onClick={onItemActionClick}\n                    onRemoveClick={onRemoveActionClick}\n                    onUpgradeCTAClick={onUpgradeCTAClick}\n                />\n            </div>\n        </div>\n    );\n};\n\nexport default UploadsManager;\n"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,OAAOC,UAAU,MAAM,YAAY;AACnC,OAAOC,QAAQ,MAAM,YAAY;AACjC,OAAOC,yBAAyB,MAAM,6BAA6B;AACnE,SAASC,aAAa,QAAQ,iBAAiB;AAC/C,SAASC,YAAY,QAAQ,iBAAiB;AAI9C,OAAO,uBAAuB;AAgB9B,MAAMC,cAAc,GAAGA,CAAC;EACpBC,UAAU;EACVC,UAAU;EACVC,yBAAyB;EACzBC,SAAS;EACTC,KAAK;EACLC,iBAAiB;EACjBC,mBAAmB;EACnBC,iBAAiB;EACjBC,2BAA2B;EAC3BC,oBAAoB;EACpBC;AACiB,CAAC,KAAK;EACvB;AACJ;AACA;AACA;AACA;AACA;EACI,MAAMC,wBAAwB,GAAIC,KAA0B,IAAK;IAC7D,IAAIf,aAAa,CAACe,KAAK,CAAC,EAAE;MACtBH,oBAAoB,CAAC,CAAC;IAC1B;EACJ,CAAC;EAED,IAAII,gBAAgB,GAAG,CAAC;EACxB,IAAIC,SAAS,GAAG,CAAC;EACjB,IAAIC,aAAa,GAAG,CAAC;EACrBX,KAAK,CAACY,OAAO,CAACC,IAAI,IAAI;IAClB,IAAIA,IAAI,CAACC,MAAM,KAAKpB,YAAY,IAAI,CAACmB,IAAI,CAACE,QAAQ,EAAE;MAChDL,SAAS,IAAIG,IAAI,CAACG,IAAI;MACtBL,aAAa,IAAKE,IAAI,CAACG,IAAI,GAAGH,IAAI,CAACI,QAAQ,GAAI,KAAK;IACxD,CAAC,MAAM,IAAIJ,IAAI,CAACC,MAAM,KAAKpB,YAAY,EAAE;MACrCe,gBAAgB,IAAI,CAAC;IACzB;EACJ,CAAC,CAAC;EAEF,MAAMS,OAAO,GAAIP,aAAa,GAAGD,SAAS,GAAI,GAAG;EACjD,MAAMS,eAAe,GAAGrB,yBAAyB,IAAIW,gBAAgB,GAAG,CAAC;EACzE,MAAMW,wBAAwB,GAAGX,gBAAgB,GAAG,CAAC;EAErD,oBACIpB,KAAA,CAAAgC,aAAA;IACI,wBAAqB,gBAAgB;IACrC,sBAAmB,SAAS;IAC5BC,SAAS,EAAEhC,UAAU,CAAC,kCAAkC,EAAE;MACtD,iBAAiB,EAAEO,UAAU;MAC7B,gBAAgB,EAAEE;IACtB,CAAC;EAAE,gBAEHV,KAAA,CAAAgC,aAAA,CAAC7B,yBAAyB;IACtBI,UAAU,EAAEA,UAAW;IACvBC,UAAU,EAAEA,UAAW;IACvBsB,eAAe,EAAEA,eAAgB;IACjCpB,SAAS,EAAEA,SAAU;IACrBqB,wBAAwB,EAAEA,wBAAyB;IACnDG,OAAO,EAAElB,oBAAqB;IAC9BmB,SAAS,EAAEjB,wBAAyB;IACpCH,2BAA2B,EAAEA,2BAA4B;IACzDc,OAAO,EAAEA,OAAQ;IACjBZ,IAAI,EAAEA;EAAK,CACd,CAAC,eACFjB,KAAA,CAAAgC,aAAA;IAAKC,SAAS,EAAC;EAA+B,gBAC1CjC,KAAA,CAAAgC,aAAA,CAAC9B,QAAQ;IACLO,yBAAyB,EAAEA,yBAA0B;IACrDE,KAAK,EAAEA,KAAM;IACbuB,OAAO,EAAEtB,iBAAkB;IAC3BwB,aAAa,EAAEvB,mBAAoB;IACnCC,iBAAiB,EAAEA;EAAkB,CACxC,CACA,CACJ,CAAC;AAEd,CAAC;AAED,eAAeR,cAAc","ignoreList":[]}