{"version":3,"file":"DroppableContent.js","names":["React","ItemList","UploadState","makeDroppable","dropDefinition","dropValidator","allowedTypes","types","Array","from","some","type","indexOf","allowedList","filter","allowed","contains","length","onDrop","event","addDataTransferItemsToUploadQueue","dataTransfer","DroppableContentComponent","forwardRef","addFiles","canDrop","isFolderUploadEnabled","isOver","isTouch","items","onClick","view","ref","handleSelectFiles","target","files","hasItems","createElement","className","onSelect","DroppableContent"],"sources":["../../../src/elements/content-uploader/DroppableContent.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport ItemList from './ItemList';\nimport UploadState from './UploadState';\n\nimport makeDroppable from '../common/droppable';\nimport type { UploadFile, UploadFileWithAPIOptions, UploadItem } from '../../common/types/upload';\nimport type { DOMStringList, View } from '../../common/types/core';\n\nimport './DroppableContent.scss';\n\nexport interface DroppableContentProps {\n    addDataTransferItemsToUploadQueue: (droppedItems: DataTransfer) => void;\n    addFiles: (files?: Array<UploadFileWithAPIOptions | UploadFile>) => void;\n    allowedTypes: Array<string>;\n    canDrop: boolean;\n    isFolderUploadEnabled: boolean;\n    isOver: boolean;\n    isTouch: boolean;\n    items: UploadItem[];\n    onClick: (item: UploadItem) => void;\n    view: View;\n}\n\n/**\n * Definition for drag and drop behavior.\n */\nconst dropDefinition = {\n    /**\n     * Validates whether a file can be dropped or not.\n     */\n    dropValidator: (\n        { allowedTypes }: { allowedTypes: Array<string> },\n        { types }: { types: Array<string> | DOMStringList },\n    ) => {\n        if (types instanceof Array) {\n            return Array.from(types).some(type => allowedTypes.indexOf(type) > -1);\n        }\n\n        const allowedList = allowedTypes.filter(allowed => types.contains(allowed));\n        return allowedList.length > 0;\n    },\n\n    /**\n     * Determines what happens after a file is dropped\n     */\n    onDrop: (event, { addDataTransferItemsToUploadQueue }: DroppableContentProps) => {\n        const { dataTransfer } = event;\n        addDataTransferItemsToUploadQueue(dataTransfer);\n    },\n} as const;\n\nconst DroppableContentComponent = React.forwardRef<HTMLDivElement, DroppableContentProps>(\n    ({ addFiles, canDrop, isFolderUploadEnabled, isOver, isTouch, items, onClick, view }, ref) => {\n        const handleSelectFiles = ({ target: { files } }) => addFiles(files);\n        const hasItems = items.length > 0;\n\n        return (\n            <div ref={ref} className=\"bcu-droppable-content\" data-testid=\"bcu-droppable-content\">\n                <ItemList items={items} onClick={onClick} />\n                <UploadState\n                    canDrop={canDrop}\n                    hasItems={hasItems}\n                    isFolderUploadEnabled={isFolderUploadEnabled}\n                    isOver={isOver}\n                    isTouch={isTouch}\n                    onSelect={handleSelectFiles}\n                    view={view}\n                />\n            </div>\n        );\n    },\n);\n\nconst DroppableContent = makeDroppable(dropDefinition)(DroppableContentComponent);\n\nexport default DroppableContent;\n"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAE9B,OAAOC,QAAQ,MAAM,YAAY;AACjC,OAAOC,WAAW,MAAM,eAAe;AAEvC,OAAOC,aAAa,MAAM,qBAAqB;AAI/C,OAAO,yBAAyB;AAehC;AACA;AACA;AACA,MAAMC,cAAc,GAAG;EACnB;AACJ;AACA;EACIC,aAAa,EAAEA,CACX;IAAEC;EAA8C,CAAC,EACjD;IAAEC;EAAgD,CAAC,KAClD;IACD,IAAIA,KAAK,YAAYC,KAAK,EAAE;MACxB,OAAOA,KAAK,CAACC,IAAI,CAACF,KAAK,CAAC,CAACG,IAAI,CAACC,IAAI,IAAIL,YAAY,CAACM,OAAO,CAACD,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;IAC1E;IAEA,MAAME,WAAW,GAAGP,YAAY,CAACQ,MAAM,CAACC,OAAO,IAAIR,KAAK,CAACS,QAAQ,CAACD,OAAO,CAAC,CAAC;IAC3E,OAAOF,WAAW,CAACI,MAAM,GAAG,CAAC;EACjC,CAAC;EAED;AACJ;AACA;EACIC,MAAM,EAAEA,CAACC,KAAK,EAAE;IAAEC;EAAyD,CAAC,KAAK;IAC7E,MAAM;MAAEC;IAAa,CAAC,GAAGF,KAAK;IAC9BC,iCAAiC,CAACC,YAAY,CAAC;EACnD;AACJ,CAAU;AAEV,MAAMC,yBAAyB,gBAAGtB,KAAK,CAACuB,UAAU,CAC9C,CAAC;EAAEC,QAAQ;EAAEC,OAAO;EAAEC,qBAAqB;EAAEC,MAAM;EAAEC,OAAO;EAAEC,KAAK;EAAEC,OAAO;EAAEC;AAAK,CAAC,EAAEC,GAAG,KAAK;EAC1F,MAAMC,iBAAiB,GAAGA,CAAC;IAAEC,MAAM,EAAE;MAAEC;IAAM;EAAE,CAAC,KAAKX,QAAQ,CAACW,KAAK,CAAC;EACpE,MAAMC,QAAQ,GAAGP,KAAK,CAACZ,MAAM,GAAG,CAAC;EAEjC,oBACIjB,KAAA,CAAAqC,aAAA;IAAKL,GAAG,EAAEA,GAAI;IAACM,SAAS,EAAC,uBAAuB;IAAC,eAAY;EAAuB,gBAChFtC,KAAA,CAAAqC,aAAA,CAACpC,QAAQ;IAAC4B,KAAK,EAAEA,KAAM;IAACC,OAAO,EAAEA;EAAQ,CAAE,CAAC,eAC5C9B,KAAA,CAAAqC,aAAA,CAACnC,WAAW;IACRuB,OAAO,EAAEA,OAAQ;IACjBW,QAAQ,EAAEA,QAAS;IACnBV,qBAAqB,EAAEA,qBAAsB;IAC7CC,MAAM,EAAEA,MAAO;IACfC,OAAO,EAAEA,OAAQ;IACjBW,QAAQ,EAAEN,iBAAkB;IAC5BF,IAAI,EAAEA;EAAK,CACd,CACA,CAAC;AAEd,CACJ,CAAC;AAED,MAAMS,gBAAgB,GAAGrC,aAAa,CAACC,cAAc,CAAC,CAACkB,yBAAyB,CAAC;AAEjF,eAAekB,gBAAgB","ignoreList":[]}